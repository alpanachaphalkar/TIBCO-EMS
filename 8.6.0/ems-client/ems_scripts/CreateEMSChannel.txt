# Queues
create queue tibco.aff.catalog.product.request
create queue tibco.aff.catalog.planfragment.request
create queue tibco.aff.catalog.action.request
create queue tibco.aff.orchestrator.provider.order.feasibility.request
create queue tibco.aff.orchestrator.provider.order.feasibility.reply
create queue tibco.aff.orchestrator.provider.order.opd.request
create queue tibco.aff.orchestrator.provider.order.opd.reply
create queue tibco.aff.orchestrator.provider.planItem.failed.request
create queue tibco.aff.orchestrator.provider.planItem.failed.reply
create queue tibco.aff.orchestrator.provider.order.prequal.failed.request
create queue tibco.aff.orchestrator.provider.order.prequal.failed.reply
create queue tibco.aff.orchestrator.order.activate
create queue tibco.aff.orchestrator.order.cancel
create queue tibco.aff.orchestrator.order.submit
create queue tibco.aff.orchestrator.order.suspend
create queue tibco.aff.orchestrator.order.withdraw
create queue tibco.aff.orchestrator.planItem.activate.request
create queue tibco.aff.orchestrator.planItem.execute.request
create queue tibco.aff.orchestrator.planItem.execute.reply
create queue tibco.aff.orchestrator.planItem.externalDependency.release.request
create queue tibco.aff.orchestrator.planItem.milestone.notify.request
create queue tibco.aff.orchestrator.planItem.milestone.release.request
create queue tibco.aff.orchestrator.planItem.suspend.request
create queue tibco.aff.orchestrator.planItem.suspend.reply
create queue tibco.aff.orchestrator.planItem.Test.execute.request
create queue tibco.aff.orchestrator.cache.addEvent 
create queue tibco.aff.orchestrator.cache.cleanup
create queue tibco.aff.orchestrator.order.submit.dead
create queue tibco.aff.orchestrator.provider.order.opd.reply.dead
create queue tibco.aff.orchestrator.order.withdraw.dead 
create queue tibco.aff.orchestrator.cache.cleanup.dead 
create queue tibco.aff.orchestrator.cache.addEvent.dead 
create queue tibco.aff.orchestrator.planItem.execute.reply.dead
create queue tibco.aff.orchestrator.planItem.milestone.notify.request.dead
create queue tibco.aff.orchestrator.order.activate.dead
create queue tibco.aff.orchestrator.planItem.suspend.reply.dead
create queue tibco.aff.orchestrator.order.suspend.dead
create queue tibco.aff.orchestrator.provider.order.feasibility.reply.dead
create queue tibco.aff.orchestrator.provider.order.prequal.failed.reply.dead
create queue tibco.aff.orchestrator.provider.planItem.failed.reply.dead
create queue tibco.aff.orchestrator.planItem.externalDependency.release.request.dead
create queue tibco.aff.orchestrator.process.deadLetter
create queue tibco.aff.orchestrator.order.mopd.reply
create queue tibco.aff.orchestrator.order.mopd.reply.dead
create queue tibco.aff.tds.order.read.request
create queue tibco.aff.tds.plan.read.request
create queue tibco.aff.orchestrator.order.amend
create queue tibco.aff.orchestrator.order.resume
create queue tibco.aff.centrallog.queue
create queue tibco.aff.oms.ordersService
create queue tibco.aff.orchestrator.order.submitResponse
create queue tibco.aff.oms.syncorderstatusrecovery
create queue tibco.aff.oms.events.jeopardy.update
create queue tibco.aff.oms.plan.migrated.request
create queue tibco.aff.oms.plan.migrated.response
create queue tibco.aff.oms.jeoms.update.rule
create queue tibco.aff.oms.ordersService.amendment.task
create queue tibco.aff.tds.keymapping.request
create queue tibco.aff.orchestrator.customAudit.request
create queue tibco.aff.orchestrator.customAudit.response
create queue tibco.aff.oms.internal.error.handler.int
create queue tibco.aff.oms.retry.opd
create queue tibco.aff.tds.plan.request
create queue tibco.aff.oms.internal.error.handler.int.dead
create queue tibco.aff.tds.plan.reply
create queue tibco.aff.oms.tds.plan.read.request.dead
create queue tibco.aff.orchestrator.outbound.notification
create queue tibco.aff.orchestrator.archival.notification

# Topics
create topic tibco.ac.planfragmentmodel.topic
create topic tibco.ac.productmodel.topic
create topic tibco.ac.actionmodel.topic
create topic tibco.aff.orchestrator.notification.order
create topic tibco.aff.orchestrator.notification.orderAmendment
create topic tibco.aff.orchestrator.notification.orderLine
create topic tibco.aff.orchestrator.notification.plan
create topic tibco.aff.orchestrator.notification.planItem
create topic tibco.aff.orchestrator.cluster.heartbeat
create topic tibco.aff.orchestrator.cluster.advisory.heartbeat
create topic tibco.aff.orchestrator.cluster.startup
create topic tibco.aff.centrallog.topic
create topic tibco.aff.orchestrator.cluster.backup
create topic tibco.fom.nodefind.ping
create topic tibco.aff.oms.events.jeopardy.publish
create topic tibco.fos.global.cache.clean.publish

# Set expiration property for the notification topics
setprop topic tibco.ac.planfragmentmodel.topic expiration=5sec
setprop topic tibco.ac.productmodel.topic expiration=5sec
setprop topic tibco.ac.actionmodel.topic expiration=5sec
setprop topic tibco.aff.orchestrator.notification.order expiration=5sec
setprop topic tibco.aff.orchestrator.notification.orderAmendment expiration=5sec
setprop topic tibco.aff.orchestrator.notification.orderLine expiration=5sec
setprop topic tibco.aff.orchestrator.notification.plan expiration=5sec
setprop topic tibco.aff.orchestrator.notification.planItem expiration=5sec

#Bridges
create bridge source=topic:tibco.aff.oms.events.jeopardy.publish target=queue:tibco.aff.oms.events.jeopardy.update
create bridge source=queue:tibco.aff.orchestrator.outbound.notification target=queue:tibco.aff.orchestrator.archival.notification

create bridge source=queue:tibco.aff.orchestrator.outbound.notification target=topic:tibco.aff.orchestrator.notification.order selector="NotificationType='ORDER'"
create bridge source=queue:tibco.aff.orchestrator.outbound.notification target=topic:tibco.aff.orchestrator.notification.orderAmendment selector="NotificationType='ORDERAMENDMENT'"
create bridge source=queue:tibco.aff.orchestrator.outbound.notification target=topic:tibco.aff.orchestrator.notification.orderLine selector="NotificationType='ORDERLINE'"
create bridge source=queue:tibco.aff.orchestrator.outbound.notification target=topic:tibco.aff.orchestrator.notification.plan selector="NotificationType='PLAN'"
create bridge source=queue:tibco.aff.orchestrator.outbound.notification target=topic:tibco.aff.orchestrator.notification.planItem selector="NotificationType='PLANITEM'"

commit
