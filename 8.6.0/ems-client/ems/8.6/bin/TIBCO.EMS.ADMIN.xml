<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TIBCO.EMS.ADMIN</name>
    </assembly>
    <members>
        <member name="T:TIBCO.EMS.ADMIN.ACLEntry">
            <summary> An ACLEntry represents the set of permissions that a Principal (User or Group) has on
            a Destination (Topic or Queue).
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ACLEntry.Destination">
            <summary> Get or set the destination that this entry applies to.
            </summary>
            <returns> the DestinationInfo that this ACLEntry applies to.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ACLEntry.Principal">
            <summary> Get the principal that this entry applies to.
            </summary>
            <returns> the PrincipalInfo that this ACLEntry applies to.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ACLEntry.PrincipalName">
            <summary> Set the principal that this entry applies to.
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ACLEntry.Permissions">
            <summary> Get or set the permissions for this entry.
            </summary>
            <returns> the permissions for this entry.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ACLEntry.#ctor(TIBCO.EMS.ADMIN.DestinationInfo,TIBCO.EMS.ADMIN.PrincipalInfo,TIBCO.EMS.ADMIN.Permissions)">
            <summary> Constructor used to create ACLEntries that will be passed to
            Admin.grant() and Admin.revoke() methods.
            </summary>
            <param name="destination">the destination the permissions apply to.
            </param>
            <param name="principal">  the principal that has the permissions.
            </param>
            <param name="permissions">the permissions for this entry.
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ACLEntry.ToString">
            <summary> Generate a string representation of this ACLEntry.
            </summary>
            <returns>  a string representation of this ACLEntry.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.Store">
            <summary> Enum that contains values for store, sync or async
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Store.Sync">
            <summary>Syncronous</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Store.Async">
            <summary>Asynchronous</summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.Admin">
            <summary> This is the main class for administering a TIBCO 
            Enterprise Message Service server.
            </summary>
            <remarks>To use this API, first create an instance of this class using one of
            the constructors. With that instance, one can retrieve
            information about the server and its components,
            as well as modify the server's configuration. 
            All modifications to the server configuration are made
            through this class. For example, to change the description
            of a group, one would do the following:
            <code>
            GroupInfo groupInfo = Admin.GetGroup("groupName");
            groupInfo.SetDescription("New Description");
            Admin.UpdateGroup(groupInfo);
            </code>
            It is important to note that public constructors (such as those for 
            TopicInfo and GroupInfo), will initialize internal variables.
            When updating the server be sure to populate objects entirely or
            retrieve them from the server first as in the example above to avoid
            any unintentional updates. 
            </remarks>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.PERMISSIONS_DIRECT_DEST">
            <summary> Permissions flag to get direct dest permissions
            for a given user. Use this flag with GetPermissions(UserInfo, flags)
            API.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.PERMISSIONS_DIRECT_ADMIN">
            <summary> Permissions flag to get direct admin permissions
            for a given user. Use this flag with GetPermissions(UserInfo, flags)
            API.
            </summary>      
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.PERMISSIONS_ALL_ADMIN">
            <summary> Permissions flag to get all admin permissions
            for a given user (direct and inherited (i.e. as inhertied from 
            groups to which the user belongs). Use this flag with 
            GetPermissions(UserInfo, flags)
            API.
            </summary>  
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.PERMISSIONS_ALL_DEST">
            <summary> Permissions flag to get all dest permissions
            for a given user (direct and inherited (i.e. as inhertied from 
            groups to which the user belongs). Use this flag with 
            GetPermissions(UserInfo, flags)
            API.
            </summary>  
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.PERMISSIONS_DIRECT">
            <summary> Permissions flag to get all direct permissions
            for a given user (i.e. the one's directly assinged to the user).
            Use this flag with GetPermissions(UserInfo, flags)
            API.
            </summary>      
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.PERMISSIONS_ALL">
            <summary> Permissions flag to get all permissions
            for a given user (destination and admin permissions both direct and
            inherited (i.e. as inherited from groups to which the user belogs).
            Use this flag with GetPermissions(UserInfo, flags)
            API.
            </summary>          
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.SESSION_UNKNOWN_ACKNOWLEDGE">
            <summary>
            Unknown session acknowledge mode. This may be used
            as return value in cases, for example, when a consumer
            has no associated session.
            See <see cref="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetSessionAcknowledgeMode"/>.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.SESSION_NO_ACKNOWLEDGE">
            <summary>
            No acknowledgement mode.
            See <see cref="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetSessionAcknowledgeMode"/>.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.SESSION_AUTO_ACKNOWLEDGE">
            <summary>
            AUTO acknowledgement mode.
            See <see cref="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetSessionAcknowledgeMode"/>.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.SESSION_DUPS_OK_ACKNOWLEDGE">
            <summary>
            DUPS_OK acknowledgement mode.
            See <see cref="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetSessionAcknowledgeMode"/>.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.SESSION_CLIENT_ACKNOWLEDGE">
            <summary>
            CLIENT acknowledgement mode.
            See <see cref="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetSessionAcknowledgeMode"/>.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.SESSION_TRANSACTED">
            <summary>
            Acknowledgement mode describing transacted session.
            See <see cref="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetSessionAcknowledgeMode"/>.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.SESSION_XA">
            <summary>
            Acknowledgement mode describing XA session.
            See <see cref="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetSessionAcknowledgeMode"/>.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.GET_STAT">
            <summary>
            Flag requesting overall statistics to be returned
            by methods such as <see cref="M:TIBCO.EMS.ADMIN.Admin.GetConsumers"></see>
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.GET_DETAILED_STAT">
            <summary>
            Flag requesting both overall and detailed statistics to be returned
            by methods such as <see cref="M:TIBCO.EMS.ADMIN.Admin.GetConsumers"></see>
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.GET_SELECTOR">
            <summary>
            Flag requesting consumer's selector to be included into
            <see cref="T:TIBCO.EMS.ADMIN.ConsumerInfo"></see> objects returned by the 
             <see cref="M:TIBCO.EMS.ADMIN.Admin.GetConsumers"></see> method.
            <see cref="M:TIBCO.EMS.ADMIN.Admin.GetConsumers"></see>
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.DEST_CURSOR_FIRST">
            <summary>
            First cursorPosition for requested destinations.
            See <see cref="M:TIBCO.EMS.ADMIN.Admin.GetQueues(System.String,TIBCO.EMS.ADMIN.RequestDestInfo,System.Int32,System.Int32)"></see>,
            <see cref="M:TIBCO.EMS.ADMIN.Admin.GetTopics(System.String,TIBCO.EMS.ADMIN.RequestDestInfo,System.Int32,System.Int32)"></see>,
            <see cref="M:TIBCO.EMS.ADMIN.Admin.GetQueuesStatistics(System.String,System.Int32,System.Int32)"></see>,
            and <see cref="M:TIBCO.EMS.ADMIN.Admin.GetTopicsStatistics(System.String,System.Int32,System.Int32)"></see>.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.DEST_CURSOR_NEXT">
            <summary>
            Next cursorPosition for requested destinations.
            See <see cref="M:TIBCO.EMS.ADMIN.Admin.GetQueues(System.String,TIBCO.EMS.ADMIN.RequestDestInfo,System.Int32,System.Int32)"></see>,
            <see cref="M:TIBCO.EMS.ADMIN.Admin.GetTopics(System.String,TIBCO.EMS.ADMIN.RequestDestInfo,System.Int32,System.Int32)"></see>,
            <see cref="M:TIBCO.EMS.ADMIN.Admin.GetQueuesStatistics(System.String,System.Int32,System.Int32)"></see>,
            and <see cref="M:TIBCO.EMS.ADMIN.Admin.GetTopicsStatistics(System.String,System.Int32,System.Int32)"></see>.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.DEST_CURSOR_LAST">
            <summary>
            Last cursorPosition for requested destinations.
            See <see cref="M:TIBCO.EMS.ADMIN.Admin.GetQueues(System.String,TIBCO.EMS.ADMIN.RequestDestInfo,System.Int32,System.Int32)"></see>,
            <see cref="M:TIBCO.EMS.ADMIN.Admin.GetTopics(System.String,TIBCO.EMS.ADMIN.RequestDestInfo,System.Int32,System.Int32)"></see>,
            <see cref="M:TIBCO.EMS.ADMIN.Admin.GetQueuesStatistics(System.String,System.Int32,System.Int32)"></see>,
            and <see cref="M:TIBCO.EMS.ADMIN.Admin.GetTopicsStatistics(System.String,System.Int32,System.Int32)"></see>.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.SUBSCRIPTIONS_FILTER_DURABLE_ONLY">
            <summary>
            Flag requesting non durable subscriptions to be filtered out.
            See <see cref="M:TIBCO.EMS.ADMIN.Admin.GetSubscriptions(System.Int32,System.String,System.String)"/>.
            </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.SUBSCRIPTIONS_FILTER_NO_DURABLE">
            <summary>
            Flag requesting durable subscriptions to be filtered out.
            See <see cref="M:TIBCO.EMS.ADMIN.Admin.GetSubscriptions(System.Int32,System.String,System.String)"/>.
            </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.SUBSCRIPTIONS_FILTER_SHARED_ONLY">
            <summary>
            Flag requesting non shared subscriptions to be filtered out.
            See <see cref="M:TIBCO.EMS.ADMIN.Admin.GetSubscriptions(System.Int32,System.String,System.String)"/>.
            </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.SUBSCRIPTIONS_FILTER_NO_SHARED">
            <summary>
            Flag requesting shared subscriptions to be filtered out.
            See <see cref="M:TIBCO.EMS.ADMIN.Admin.GetSubscriptions(System.Int32,System.String,System.String)"/>.
            </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.STORE_COMPACT_NOLIMIT">
            <summary>
            Used to run the store compact as a full re-write with no time
            limit. Valid only for mstores.
            See <see cref="M:TIBCO.EMS.ADMIN.Admin.Compact(TIBCO.EMS.ADMIN.Store,System.Int64)"/>.
            See <see cref="M:TIBCO.EMS.ADMIN.Admin.Compact(System.String,System.Int64)"/>.
            </summary>
            <para>Since EMS 8.3.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.CommandTimeout">
            <summary> Get and set the command timeout in milliseconds.
            </summary>
            <remarks> If the server does
            not respond to a command within specified timeout the command
            throws an exception. Default value is 60000 (60 seconds). Expects
            the timeout value in milliseconds
            </remarks>
            <returns> the current timeout in milliseconds.
            </returns>
            <exception cref="T:System.ArgumentException">if value is less than 5000ms.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.AutoSave">
            <summary> Returns true if server configuration is saved in the configuration
            files on disk after each change.
            </summary>
            <remarks>If auto save mode is turned off, the application should call 
            SaveConfiguration() method in order to save the changes in the
            configuration files.  If auto save is turned on, the server updates
            the configuration files on disk after every change and calls to 
            SaveConfiguration() are not required.
            </remarks> 
            <returns> true if configuration is saved in the files after every change.
            </returns>
            <value>true if chages should be saved after every change in the configuration.
            </value>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.Info">
            <summary> Get the current set of server configuration and metrics.
            </summary>
            <returns>  a ServerInfo object containing the current configuration and metrics for the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.StateInfo">
            <summary> Get the current FT state of the server, along with its name, pid, version
            and whether or not it is running in an appliance.
            </summary>
            <returns> a StateInfo object containing the current FT state of the server and its
            name, pid, version and whether or not it is running in an appliance
            or null if the server does not support this method (EMS 8.0 and earlier).
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.CMListeners">
            <summary> Get the TIBCO Rendezvous certified listeners explicitly created
            in the server configuration.
            </summary>
            <returns> array of CMListenerInfo objects.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception> 
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.Routes">
            <summary> Returns all routes known to the server.
            </summary>
            <remarks>
            Notice returned objects do not contain statistical data for
            the routes. Use GetRouteStatistics() method to obtain statistical
            information about the route.
            </remarks>
            <returns>all routes known to the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception> 
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.Users">
            <summary> Get the array of all UserInfos known to the server.
            </summary>
            <returns>  the array of all UserInfos known to the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception> 
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.Groups">
            <summary> Get all the groups known to the server.
            </summary>
            <returns>  all the groups known to the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.ACLEntries">
            <summary> Get all ACL entries for destinations.</summary>
            <returns>  all ACL entries for destinations known to the server
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or some error occurred.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.ConnectionFactories">
            <summary> Get all connection factories in the server configuration.
            </summary>
            <returns> array of ConnectionFactoryInfo objects.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.Transactions">
            <summary> Get all the xa transactions known to the server.
            </summary>
            <returns>  all the xa transactions known to the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetTransaction(TIBCO.EMS.ADMIN.TransactionInfo)">
            <summary> Get a specific xa transaction.
            </summary>
            <returns> the xa transaction, represented by the TransactionInfo object.
            </returns>
            <param name="transaction"> The TransactionInfo object for the transaction to be inspected.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.Transports">
            <summary> Get all the transports known to the server.
            </summary>
            <returns>  all the transports known to the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.ExceptionListener">
            <summary> Sets an exception listener for the connection used by this
            API to communicate with the EMS server.</summary>
            <remarks>See the EMS API documentation for more information about exception listeners.
            Note in particular that you should only use either an ExceptionListener or an
            ExceptionHandler, not both.
            </remarks>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="E:TIBCO.EMS.ADMIN.Admin.ExceptionHandler">
            <summary>
            Add the exception handler to the Admin object's underlying connection.
            </summary>
            <remarks>See the EMS API documentation for more information about exception handlers.
            Note in particular that you should only use either an ExceptionListener or an
            ExceptionHandler, not both.
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.ConnectionId">
            <summary> Get the connection id of the Admin object's connection to the
            server.
            </summary>
            <returns> the connection id of the Admin's connection to the server,
            or zero if the connection is closed or broken.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.#ctor(System.String,System.String,System.String)">
            <summary> This constructor is used to create an administrative connection to the server.
            </summary>
            <param name="url">        The URL of the server to administer.
            </param>
            <param name="userName">   Name of the administrator user.
            </param>
            <param name="password">   User password.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.#ctor(System.String,System.String,System.String,System.Collections.Hashtable)">
            <summary> This constructor is used to create an administrative 
            connection to the server.
            </summary>
            <remarks>
            Use this constructor if the connection to the server needs to use SSL.
            </remarks>
            <param name="url">        The URL of the server to administer.
            </param>
            <param name="userName">   Name of the administrator user.
            </param>
            <param name="password">   User password.
            </param>
            <param name="sslParams">  The parameters used for the SSL 
            connection. See the documentation of the TIBCO.EMS.EMSSSL class for
            details of valid SSL parameters. </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.Close">
            <summary> Close connection to the server.
            </summary>
            <remarks>After connection is closed
            the Admin object should no longer be used.
            </remarks>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.SaveConfiguration">
            <summary> Save any configuration changes to the server's config files.
            </summary>
            <remarks>This call is necessary when auto save mode is not set.
            </remarks>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.UpdateServer(TIBCO.EMS.ADMIN.ServerInfo)">
            <summary> Update the server configuration.
            </summary>
            <param name="info"> a ServerInfo object containing the changed configuration parameters.
            </param> 
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException">if ServerInfo object is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.Shutdown">
            <summary> Shutdown the server.
            </summary>
            <remarks>This causes the connection to the server to be lost, so subsequent calls
            to this object will fail with the exception of Close() method.
            </remarks>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.Restart">
            <summary> Restart the server.
            </summary>
            <remarks>Not supported.
            </remarks>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">Not supported.
            </exception>
            \deprecated As of release 8.2.2
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.RotateLog">
            <summary> Rotate server's log file.
            </summary>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.UpdateCRL">
            <summary> Update server's CRL.
            </summary>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.CreateCMListener(TIBCO.EMS.ADMIN.CMListenerInfo)">
            <summary> Create (pre-register) TIBCO Rendezvous certified listener.
            </summary>
            <param name="cmListener">the certified listener to be created (pre-registered).
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException">if CMListenerInfo object is null.
            </exception> 
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.DeleteCMListener(TIBCO.EMS.ADMIN.CMListenerInfo)">
            <summary> Delete TIBCO Rendezvous certified listener.
            </summary>
            <param name="cmListener">the certified listener to be deleted.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException">if cmListener is null.
            </exception> 
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetCMLedger(System.String)">
            <summary> Returns a summary of the contents of the ledger file of the server's
            default TIBCO Rendezvous certified messaging transport.
            </summary>
            <remarks> If the server
            uses multiple named transports then use the GetCMLedger(String
            transport, String pattern) method to query the ledger for the given
            transport. Specifying a pattern limits the scope of the query to only
            those Rendezvous subjects matching the pattern.
            The pattern may contain the wildcards "*" and ">". See the TIBCO EMS documentation
            for how wildcards work. A pattern of "", ">", or null will return
            information on all the subjects in the ledger file.
            </remarks>
            <param name="pattern"> a pattern indicating which subjects are of interest.
            </param>
            <returns> array of CMLedgerSubjectInfo objects that match the given pattern.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetCMLedger(System.String,System.String)">
            <summary> Returns a summary of the contents of the transport's ledger file.
            </summary>
            <remarks>
            Specifying a pattern limits the scope of the query to only
            those Rendezvous subjects matching the pattern.
            The pattern may contain the wildcards "*" and ">". See the TIBCO EMS documentation
            for how wildcards work. A pattern of "", ">", or null will return
            information on all the subjects in the ledger file.
            </remarks>
            <param name="transport"> the name of the transport whose ledger file is to be
            summarized.
            </param>
            <param name="pattern"> a pattern indicating which subjects are of interest.
            </param>
            <returns> array of CMLedgerSubjectInfo objects that match the given pattern.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetRoute(System.String)">
            <summary> Returns route information or null if such route does not exist.
            </summary>
            <remarks>
            Notice returned object does not contain statistical data for
            the route. Use GetRouteStatistics() method to obtain statistical
            information about the route.
            </remarks>
            <param name="name">name of the route.
            </param>
            <returns>  RouteInfo object or null if route with such name does not exist.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException">if name is not a legal route name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.CreateRoute(TIBCO.EMS.ADMIN.RouteInfo)">
            <summary> Create a new route.
            </summary>
            <param name="routeInfo">  The parameters for the new route.
            </param>
            <returns>  the fully configured RouteInfo from the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException">if routeInfo is null.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException">if RouteInfo object does not have a legal name and url.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.UpdateRoute(TIBCO.EMS.ADMIN.RouteInfo)">
            <summary> Update route parameters.
            </summary>
            <remarks> This method can only be used to update a route
            that already exists on the server. To create a new route use the
            <see cref="M:TIBCO.EMS.ADMIN.Admin.CreateRoute(TIBCO.EMS.ADMIN.RouteInfo)"></see> method.
            </remarks>
            <param name="routeInfo">  The route info to save.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.DestroyRoute(System.String)">
            <summary> Destroy the route with specified name.
            </summary>
            <param name="name">The name of the route to destroy.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException">if name is not a legal route name.
            </exception> 
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.Connections">
            <summary> Returns all connections except system connections.
            </summary>
            <remarks>System connections are connections to other servers.
            </remarks>
            <returns> all the (non-system) connections known to the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.SystemConnections">
            <summary> Returns all system connections.
            </summary>
            <remarks>System connections are connections to other servers.
            </remarks>
            <returns> all the system connections known to the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin._GetConnections(System.String,System.String,System.Int32)">
            <summary> Get the array of all ConnectionInfo objects for connections matching 
            given host, username, and type.
            </summary>
            <param name="host">The host name or IP address to match.
            </param>
            <param name="username">The username to match.
            </param>
            <param name="destType">The destination type to match (DestinationType.Topic or DestinationType.Queue).
            </param>
            <returns> the connections that match the given criteria.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.DestroyConnection(System.Int64)">
            <summary> Destroy the client connection for the given connectionID.
            </summary>
            <remarks> This will disconnect
            the client using the connection from the server, so this method should be used with caution.
            </remarks>
            <param name="connectionID">The connection ID of the connection to be destroyed.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.CreateQueue(TIBCO.EMS.ADMIN.QueueInfo)">
            <summary> Create a queue based on the parameters from the given QueueInfo.
            </summary>
            <param name="queue">  The description of the queue to be created.
            </param>
            <returns>  The fully configured QueueInfo from the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException">if the name of the queue is not a legal queue name.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminNameExistsException">if a queue already exists with the given name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.UpdateQueue(TIBCO.EMS.ADMIN.QueueInfo)">
            <summary> Change the properties of the queue corresponding to the given
            QueueInfo. 
            </summary>
            <remarks>This method can only be used to update a queue
            that already exists on the server. To create a new queue use the 
            <see cref="M:TIBCO.EMS.ADMIN.Admin.CreateQueue(TIBCO.EMS.ADMIN.QueueInfo)"></see> method.
            </remarks>
            <param name="queue">  The QueueInfo for the queue to be modified.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException">if QueueInfo object is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.DestroyQueue(System.String)">
            <summary> Destroy the queue for the given queue name.
            </summary>
            <param name="queueName">  The name of the queue to destroy.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException">if queueName is not a legal queue name.
            </exception> 
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.DestroyQueues(System.String)">
            <summary> Destroy queues matching the given pattern.
            </summary>
            <param name="pattern">  a pattern indicating which queues to destroy.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if pattern is not a legal pattern.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetQueue(System.String)">
            <summary> Get the queue for the given queue name.
            </summary>
            <param name="queueName">  The name of the queue to get.
            </param>
            <returns>  The QueueInfo for the given name or null if the name is not found.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException">if queueName is not a legal name
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetQueues(System.String)">
            <summary> Get the information for queues that match the given pattern.
            </summary>
            <remarks>
            The pattern may contain the wildcards "*" and ">". See the TIBCO EMS
            documentation for how wildcards work in queue names. A pattern of "",
            ">", or null will return all the queues.
            </remarks>
            <param name="pattern">The pattern that must be matched
            </param>
            <returns>  The QueueInfos that match the pattern.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.Queues">
            <summary> Get the information for all the queues that are known to the server.
            </summary>
            <returns> the QueueInfos for all the queues that are known to the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetQueues(System.String,TIBCO.EMS.ADMIN.RequestDestInfo)">
            <summary> Get the information for the queues that match the given pattern
            and the given permanence type, (that can be any of the
            <see cref="T:TIBCO.EMS.ADMIN.RequestDestInfo">RequestDestInfo</see> types)
            that is an indication to return queues only of specified types.
            </summary>
            <remarks>
            The pattern may contain the wildcards "*" and ">". See the TIBCO EMS
            documentation for how wildcards work in queue names. A pattern of "",
            ">", or null will return all the queues if permanenceType is 
            DestGetALL
            </remarks>
            <param name="pattern">The pattern that must be matched
            </param>
            <param name="permanenceType">The permanenceType can be either
            RequestDestInfo.DestGetNoTemp, RequestDestInfo.DestGetStatic,
            RequestDestInfo.DestGetDynamic, or RequestDestInfo.DestGetAll.
            See <see cref="T:TIBCO.EMS.ADMIN.RequestDestInfo">RequestDestInfo</see>.
            </param>
            <returns>  The QueueInfos that match the pattern and permanenceType
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException">if permanenceType is invalid
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetQueues(System.String,TIBCO.EMS.ADMIN.RequestDestInfo,System.Int32,System.Int32)">
             <summary> Get the information for the queues that match the given pattern
             and the given permanence type, (that can be any of the
             <see cref="T:TIBCO.EMS.ADMIN.RequestDestInfo">RequestDestInfo</see> types)
             that is an indication to return queues only of specified types.
             </summary>
             <remarks>
             The pattern may contain the wildcards "*" and ">". See the TIBCO EMS
             documentation for how wildcards work in queue names. A pattern of "",
             ">", or null will return all the queues if permanenceType is 
             DestGetALL
            
             One can start, continue or complete a cursored scan of queues.
            
             </remarks>
             <param name="pattern">The pattern that must be matched
             </param>
             <param name="permanenceType">The permanenceType can be either
             RequestDestInfo.DestGetNoTemp, RequestDestInfo.DestGetStatic,
             RequestDestInfo.DestGetDynamic, or RequestDestInfo.DestGetAll.
             See <see cref="T:TIBCO.EMS.ADMIN.RequestDestInfo">RequestDestInfo</see>.
             </param>
             <param name="cursorPosition">The cursorPosition can be
             <see cref="F:TIBCO.EMS.ADMIN.Admin.DEST_CURSOR_FIRST">Admin.DEST_CURSOR_FIRST</see>,
             <see cref="F:TIBCO.EMS.ADMIN.Admin.DEST_CURSOR_NEXT">Admin.DEST_CURSOR_NEXT</see>,
             <see cref="F:TIBCO.EMS.ADMIN.Admin.DEST_CURSOR_LAST">Admin.DEST_CURSOR_LAST</see>
             </param>
             <param name="cursorSize">The cursorSize must be greater than zero.  Note that the operation may return less than the requested size.
             </param>
             <returns>  The QueueInfos that match the pattern and permanenceType.  Returns null when cursor is complete.
             </returns>
             <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
             </exception>
             <exception cref="T:System.ArgumentException">if permanenceType is invalid
             </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.PurgeQueue(System.String)">
            <summary> Purge pending messages from the queue for the given name.
            </summary>
            <param name="queueName">  The name of the queue to purge.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException">if queueName is not a legal queue name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.PurgeQueues(System.String)">
            <summary> Purge pending messages from queues matching the given pattern.
            </summary>
            <param name="pattern">  a pattern indicating which queues to destroy.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if pattern is not a legal pattern.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.CreateTopic(TIBCO.EMS.ADMIN.TopicInfo)">
            <summary> Create a topic based on the parameters from the given TopicInfo.
            </summary>
            <param name="topic">  The description of the topic to be created.
            </param>
            <returns>  The fully configured TopicInfo from the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException">if the name of the topic is not a legal topic name.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminNameExistsException">if a topic already exists with the given name.
            </exception> 
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.UpdateTopic(TIBCO.EMS.ADMIN.TopicInfo)">
            <summary> Change the properties of the topic corresponding to the given
            TopicInfo. 
            </summary>
            <remarks>This method can only be used to update a topic
            that already exists on the server. To create a new topic use the
            <see cref="M:TIBCO.EMS.ADMIN.Admin.CreateTopic(TIBCO.EMS.ADMIN.TopicInfo)"></see> method.
            </remarks>
            <param name="topic">  The TopicInfo for the queue to be modified.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> if TopicInfo object is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.DestroyTopic(System.String)">
            <summary> Destroy the topic for the given topic name.
            </summary>
            <param name="topicName">  The name of the topic to destroy.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if topicName is not a legal topic name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.DestroyTopics(System.String)">
            <summary> Destroy topics matching the given pattern.
            </summary>
            <param name="pattern">  a pattern indicating which topics to destroy.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if pattern is not a legal pattern.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetTopic(System.String)">
            <summary> Get the topic for the given topic name.
            </summary>
            <param name="topicName">  The name of the topic to get.
            </param>
            <returns>  The TopicInfo for the given name or null if the name is not found.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if topicName is not a legal topic name
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetTopics(System.String)">
            <summary> Get the information for the topics that match the given pattern.
            </summary>
            <remarks>The pattern may contain the wildcards "*" and ">" .  See the TIBCO EMS
            documentation for how wildcards work in topic names.
            A pattern of "", ">", or null will return all the topics.
            </remarks>
            <param name="pattern">The pattern that must be matched
            </param>
            <returns>  The TopicInfos that match the pattern.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetTopics(System.String,TIBCO.EMS.ADMIN.RequestDestInfo)">
            <summary> Get the information for the topics that match the given pattern
            and the given permanence type, (that can be any of the
            <see cref="T:TIBCO.EMS.ADMIN.RequestDestInfo">RequestDestInfo</see> types)
            that is an indication to return topics only of specified types.
            </summary>
            <remarks>
            The pattern may contain the wildcards "*" and ">". See the TIBCO EMS
            documentation for how wildcards work in topic names. A pattern of "",
            ">", or null will return all the topics if permanenceType is DestGetAll.
            </remarks>
            <param name="pattern">The pattern that must be matched
            </param>
            <param name="permanenceType">The permanenceType can be either
            RequestDestInfo.DestGetNoTemp, RequestDestInfo.DestGetStatic,
            RequestDestInfo.DestGetDynamic, or RequestDestInfo.DestGetAll.
            See <see cref="T:TIBCO.EMS.ADMIN.RequestDestInfo">RequestDestInfo</see>.
            </param>
            <returns>  The TopicInfos that match the pattern and permanenceType
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException">if permanenceType is invalid
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetTopics(System.String,TIBCO.EMS.ADMIN.RequestDestInfo,System.Int32,System.Int32)">
             <summary> Get the information for the topics that match the given pattern
             and the given permanence type, (that can be any of the
             <see cref="T:TIBCO.EMS.ADMIN.RequestDestInfo">RequestDestInfo</see> types)
             that is an indication to return topics only of specified types.
             </summary>
             <remarks>
             The pattern may contain the wildcards "*" and ">". See the TIBCO EMS
             documentation for how wildcards work in topic names. A pattern of "",
             ">", or null will return all the topics if permanenceType is
             DestGetAll.
            
             One can start, continue or complete a cursored scan of queues.
            
             </remarks>
             <param name="pattern">The pattern that must be matched
             </param>
             <param name="permanenceType">The permanenceType can be either
             RequestDestInfo.DestGetNoTemp, RequestDestInfo.DestGetStatic,
             RequestDestInfo.DestGetDynamic, or RequestDestInfo.DestGetAll.
             See <see cref="T:TIBCO.EMS.ADMIN.RequestDestInfo">RequestDestInfo</see>.
             </param>
             <param name="cursorPosition">The cursorPosition can be
             <see cref="F:TIBCO.EMS.ADMIN.Admin.DEST_CURSOR_FIRST">Admin.DEST_CURSOR_FIRST</see>,
             <see cref="F:TIBCO.EMS.ADMIN.Admin.DEST_CURSOR_NEXT">Admin.DEST_CURSOR_NEXT</see>,
             <see cref="F:TIBCO.EMS.ADMIN.Admin.DEST_CURSOR_LAST">Admin.DEST_CURSOR_LAST</see>
             </param>
             <param name="cursorSize">The cursorSize must be greater than zero.  Note that the operation may return less than the requested size.
             </param>
             <returns>  The TopicInfos that match the pattern and permanenceType.  Returns null when cursor is complete.
             </returns>
             <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
             </exception>
             <exception cref="T:System.ArgumentException">if permanenceType is invalid
             </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.Topics">
            <summary> Get the information for all the topics that are known to the server.
            </summary>
            <returns> the TopicInfos for all the topics that are known to the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.PurgeTopic(System.String)">
            <summary> Purge pending messages from the topic for the given name.
            </summary>
            <param name="topicName">  The name of the topic to purge.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if topicName is not a legal topic name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.PurgeTopics(System.String)">
            <summary> Purge pending messages from topics matching the given pattern.
            </summary>
            <param name="pattern">  a pattern indicating which topics to destroy.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if pattern is not a legal pattern.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.CreateUser(TIBCO.EMS.ADMIN.UserInfo)">
            <summary> Create a user based on the information in the given UserInfo.
            </summary>
            <param name="user">   The information for the user to be created.
            </param>
            <returns> the fully configured UserInfo from the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if the name of the user is not a legal user name.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminNameExistsException"> if a user already exists with the given name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.DestroyUser(System.String)">
            <summary> Destroy the user for the given userName.
            </summary>
            <param name="userName">   The name of the user to destroy.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if userName is not a legal user name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.UpdateUser(TIBCO.EMS.ADMIN.UserInfo)">
            <summary> Save changes made to the given UserInfo.
            </summary>
            <remarks> This method can only be used to
            update a user that already exists on the server. To create a new user
            use the <see cref="M:TIBCO.EMS.ADMIN.Admin.CreateUser(TIBCO.EMS.ADMIN.UserInfo)"></see> method.
            </remarks>
            <param name="userInfo">   The user information to save.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> if UserInfo object is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetUser(System.String)">
            <summary> Get the user for the given username.
            </summary>
            <param name="userName">   The name of the user to retrieve info for.
            </param>
            <returns>  the UserInfo object for the given username or null if the name is not found.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if userName is not a legal user name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.CreateGroup(TIBCO.EMS.ADMIN.GroupInfo)">
            <summary> Create a group based on the information in the given GroupInfo.
            </summary>
            <param name="group">  The info for the group to be created.
            </param>
            <returns>  The fully configured GroupInfo from the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if the name of the group is not a legal group name.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminNameExistsException"> if a user aleady exists with the given name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.DestroyGroup(System.String)">
            <summary> Destroy the group for the given groupName.
            </summary>
            <param name="groupName">  The name of the group to destroy.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if groupName is not a legal name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.UpdateGroup(TIBCO.EMS.ADMIN.GroupInfo)">
            <summary> Save changes made to the given GroupInfo.
            </summary>
            <remarks> This method can only be used
            to update a group that already exists on the server. To create a new
            group use the <see cref="M:TIBCO.EMS.ADMIN.Admin.CreateGroup(TIBCO.EMS.ADMIN.GroupInfo)"></see> method.
            </remarks>
            <param name="groupInfo">  The group to save configuration changes for.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> if GroupInfo object is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetGroup(System.String)">
            <summary> Get the group for the given name.
            </summary>
            <param name="groupName">  The name of the group to retrieve.
            </param>
            <returns>  the GroupInfo for the given name or null if the name is not found.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if groupName is not a legal group name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.AddUserToGroup(System.String,System.String)">
            <summary> Add the user for the given userName to the group for the given groupName.
            </summary>
            <param name="groupName">  The group that the user will be added to.
            </param>
            <param name="userName">   The user to be added.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if the names of the group or the user are not legal.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.AddUsersToGroup(System.String,System.String[])">
            <summary> Add the users for the given array of userNames to the group for the given groupName.
            </summary>
            <param name="groupName">  The group that the users will be added to.
            </param>
            <param name="userNames">  The users to be added.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if the names of the group or users are not legal.
            </exception>
            <exception cref="T:System.ArgumentException"> if the array of user names is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.RemoveUserFromGroup(System.String,System.String)">
            <summary> Remove the user for the given userName from the group for the given groupName.
            </summary>
            <param name="groupName">  The group that the user will be removed from.
            </param>
            <param name="userName">   The user to be removed.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if groupName or userName are not legal names.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.RemoveUsersFromGroup(System.String,System.String[])">
            <summary> Remove the users for the given array of userNames from the group for the given groupName.
            </summary>
            <param name="groupName">  The group that the users will be removed from.
            </param>
            <param name="userNames">   The users to be removed.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if groupName or one of the user names is not a legal name.
            </exception>
            <exception cref="T:System.ArgumentException"> if userNames is null;
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.Permissions">
            <summary> Get all permission entries.</summary>
            <returns>  all ACL entries known to the server. Array elements are ACLEntry and
            AdminACLEntry objects.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetPermissions(System.Object)">
            <summary> Get all permission entries for specified target.
            </summary>
            <remarks> Target parameter can be UserInfo, GroupInfo, TopicInfo
            or QueueInfo. If target parameter is null, this method returns all permissions.
            </remarks>
            <param name="target">the object
            </param>
            <returns>  all ACL entries for specified target object
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetPermissions(TIBCO.EMS.ADMIN.UserInfo,System.Int32)">
             <summary> Get user permissions based on the flags set. 
             </summary>
             
             <remarks>
             <para>
             <list type="bullet">
             
             <item> If no flags are specified i.e flags == 0, then all the permissions 
             for the user are returned.</item>
             
             <item> If flags == PERMISSIONS_ALL, then all the permissions are 
             returned for the specified user, (i.e direct, inhertied i.e dest 
             (user and admin) and other admin). </item>
             
             <item> If flags == PERMISSIONS_ALL_DEST, then all the destination 
             permissions for the user are returned, both direct and indirect
             (i.e inherited from groups).</item>
             
             <item> If flags == PERMISSIONS_ALL_ADMIN, then all direct and inherited 
             admin permissions are returned. </item>
             
             <item> If flags == PERMISSIONS_DIRECT, then all direct destination
             permissions (user and admin) are returned (i.e the one directly 
             assigned to the user). </item>
             
             <item> If flags == PERMISSIONS_DIRECT_DEST all direct destination permissions
             for the user are returned. </item>
             
             <item> If flags == PERMISSIONS_DIRECT_ADMIN, then all direct admin 
             permissions are returned (i.e the ones directly assigned to 
             the user). </item>
             
             <item> <b><i>NOTE: </i></b>If arbitrary combinations of flags are chosen
             then the supersed'ing flag is chosen.
             e.g flags = PERMISSIONS_ALL | PERMISSIONS_ALL_DEST
             here the ALL superseds ALL_DEST flag, so all permissions
             are returned. </item>
             </list>
            
             </para>
             
             <para>
             <b>NOTE:</b> Inherited permissions cannot be modified (i.e removed)
             </para>
             
             </remarks>
             <param name="target">the userinfo object</param>
             <param name="flags">the flags, based on which the different permissions are returned
             </param>
             <returns>ACL entries for specified target object as defined by the flags, Array elements 
             are be either ACLEntry, AdminACLEntry objects or both.</returns>
             <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.</exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetQueueACLEntries(System.String)">
            <summary> Get all ACL entries pertaining to the queue with the given queueName.
            </summary>
            <param name="queueName">  Queue name.
            </param>
            <returns>  the array of ACLEntries for the given queue.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or some error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if queueName is not a legal queue name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetTopicACLEntries(System.String)">
            <summary> Get all ACL entries pertaining to the topic with the given topicName.</summary>
            <param name="topicName">  Topic name.
            </param>
            <returns>  the array of ACLEntries for the given topic.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or some error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if topicName is not a legal topic name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetUserACLEntries(System.String)">
            <summary> Get all ACL entries pertaining to the user with the given userName.</summary>
            <param name="userName">  User name.
            </param>
            <returns>  the array of ACLEntries for the given user.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or some error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if userName is not a legal user name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetGroupACLEntries(System.String)">
            <summary> Get all permissions on destinations for specified group.</summary>
            <param name="groupName">the name of the group.
            </param>
            <returns> array of ACLEntry objects for the specified group.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or some error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if groupName is not a legal group name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.Grant(TIBCO.EMS.ADMIN.ACLEntry)">
            <summary> Grant the permissions specified in the given ACLEntry.</summary>
            <param name="entry">  The description of the permissions to grant.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or some error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> if entry is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.Grant(TIBCO.EMS.ADMIN.ACLEntry[])">
            <summary> Grant the permissions specified in the given ACLEntries.</summary>
            <param name="acls">   The descriptions of the permissions to grant.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or some error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> if acls is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.Grant(TIBCO.EMS.ADMIN.AdminACLEntry)">
            <summary> Grant the administrative permissions.</summary>
            <param name="entry">the AdminACLEntry to grant.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or some error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> if entry is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.Revoke(TIBCO.EMS.ADMIN.ACLEntry)">
            <summary> Revoke the permissions specified in the given ACLEntry.</summary>
            <param name="entry">the ACLEntry to revoke.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or some error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> if ACLEntry is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.Revoke(TIBCO.EMS.ADMIN.ACLEntry[])">
            <summary> Revoke the permissions specified in the given ACLEntries.</summary>
            <param name="acls">an array of ACLEntry objects containing the positive permissions to be revoked.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or some error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> if ACLEntry array is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.Revoke(TIBCO.EMS.ADMIN.AdminACLEntry)">
            <summary> Revoke the administrative permissions.
            </summary>
            <remarks> Only permissions specified as
            positive in the AdminPermissions member of supplied AdminAclEntry are
            taken into account and revoked. The negative permissions of participating
            AdminPermissions are ignored.
            </remarks>
            <param name="entry">the AdminACLEntry containing the positive permissions to be revoked.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or some error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> if AdminACLEntry is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetDurable(System.String,System.String)">
            <summary> Get the durable subscription information for the 
            given durable name and clientID.
            </summary>
            <param name="durableName">name of the durable subsription.
            </param>
            <param name="clientID">   client ID associated with the durable (can be null).
            </param>
            <returns>  the DurableInfo.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if durableName is not a legal name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetDurables(System.String)">
            <summary> Get the durable subscription information for the given topic name.
            </summary>
            <param name="topicName">The name of topic to get durable information on.
            </param>
            <returns>The array of DurableInfos for the given topic.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <remarks> Deprecated this method, remains fully functional but 
            in EMS 4.4 the preferred way to obtain consumer information is 
            via method
            <see cref="M:TIBCO.EMS.ADMIN.Admin.GetConsumers"></see>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.Durables">
            <summary> Get the durable subscription information for all durables known to the server.
            </summary>
            <returns>  the array of DurableInfos for the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.PurgeDurable(System.String,System.String)">
            <summary> Purge pending messages for the durable with given name and client ID.
            </summary>
            <param name="durableName">The name of the durable to purge.
            </param>
            <param name="clientID">   The client ID associated with the durable (can be null).
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if durableName is not a legal durable name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.CreateDurable(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary> Create the durable with given name and client ID.
            </summary>
            <param name="topicName">  The name of topic on which to create durable.
            </param>
            <param name="durableName">The name of the durable to create.
            </param>
            <param name="clientID">   The client ID associated with the durable (can be null).
            </param>
            <param name="selector">   The selector associated with the durable (can be null).
            </param>
            <param name="nolocal">    Prevents reception of messages sent on this session.
            </param>
            <param name="route">      Designates this as a durable for another server.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if durableName is not a legal name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.DestroyDurable(System.String,System.String)">
            <summary> Destroy the durable with given name and client ID.
            </summary>
            <param name="durableName">The name of the durable to destroy.
            </param>
            <param name="clientID">   The client ID associated with the durable (can be null).
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if durableName is not a legal name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetMessage(System.String)">
            <summary> Get the message for the given message ID.
            </summary>
            <param name="messageID">  The ID of the message to retrieve.
            </param>
            <returns>  the message for the given ID or null if none is found.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> if messageID is not a legal ID.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.DestroyMessage(System.String)">
            <summary> Destroy the message for the given message ID.
            </summary>
            <param name="messageID">  The ID of the message to destroy.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> if messageID is not a legal ID.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetMessages(System.String)">
            <summary> Get the messages that have the given correlation ID.
            </summary>
            <param name="correlationID">  The correlation ID of the messages to retrieve.
            </param>
            <returns>  The array of messages with the given correlation ID.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> if correlationID is not a legal ID.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.CreateConnectionFactory(System.String,TIBCO.EMS.ADMIN.ConnectionFactoryInfo)">
            <summary> Create a connection factory based on the given ConnectionFactoryInfo 
            and bind it to the given name in the internal JNDI implementation.
            </summary>
            <param name="jndiName">   The JNDI name to which the new factory will be bound.
            </param>
            <param name="cfi">        The info for the factory to create.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if the JNDI name is not legal.
            </exception>
            <exception cref="T:System.ArgumentException"> if ConnectionFactoryInfo object is null.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminNameExistsException"> if the JNDI name is already in use.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.UpdateConnectionFactory(System.String,TIBCO.EMS.ADMIN.ConnectionFactoryInfo)">
            <summary> Save changes to the connection factory stored at the given JNDI name
            using information from the given ConnectionFactoryInfo.
            </summary>
            <remarks>This method can
            only be used to update a factory that already exists on the server. To
            create a new factory use the <see cref="M:TIBCO.EMS.ADMIN.Admin.CreateConnectionFactory(System.String,TIBCO.EMS.ADMIN.ConnectionFactoryInfo)"></see> method.
            </remarks>
            <param name="jndiName">   The JNDI name of the factory that will be updated.
            </param>
            <param name="cfi">        The updated info for the factory.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if jndiName is not a legal JNDI name.
            </exception>
            <exception cref="T:System.ArgumentException"> if ConnectionFactoryInfo object is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.DestroyConnectionFactory(System.String)">
            <summary> Destroy the connection factory bound to the given JNDI name.
            </summary>
            <param name="jndiName">   A JNDI name for the factory to destroy.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if jndiName is not a legal name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.BindQueue(System.String,System.String)">
            <summary> Bind the queue for the given queue name to the given JNDI name.
            </summary>
            <param name="name">       The JNDI name to which the queue will be bound.
            </param>
            <param name="queueName">  The name of the queue to bind.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminNameExistsException"> if the JNDI name is already in use.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if name or queueName are not legal names.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.BindTopic(System.String,System.String)">
            <summary> Bind the topic for the given topic name to the given JNDI name.
            </summary>
            <param name="name">       The JNDI name to which the topic will be bound.
            </param>
            <param name="topicName">  The name of the topic to bind.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminNameExistsException"> if the JNDI name is already in use.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if name and topicName are legal names.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.Bind(System.String,System.String)">
            <summary> Bind an object already bound to an existing JNDI name to a new JNDI name.
            </summary>
            <remarks>The object will be bound to both names after this call.
            </remarks>
            <param name="newName">        The new name that will be bound to the object currently bound to the existing name.
            </param>
            <param name="existingName">   The name that is currently bound to the object.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminNameExistsException"> if the JNDI name is already in use.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if the JNDI names are not legal.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.Unbind(System.String)">
            <summary> Remove the binding between the given JNDI name and the object bound to it.
            </summary>
            <remarks>
            Note that removing the last JNDI name for a connection factory results in the destruction
            of that factory.
            </remarks>
            <param name="name">   The JNDI name to unbind.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if name is not a legal JNDI name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.Lookup(System.String)">
            <summary> Retrieve that administrative object bound to the given JNDI name.
            </summary>
            <param name="name">   The JNDI name to lookup.
            </param>
            <returns>  the ConnectionFactoryInfo, TopicInfo, or QueueInfo bound to the given name or null if nothing is bound to the name.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if name is not a legal name.
            </exception>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Admin.ALL_CONSUMERS">
            <summary>  </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.ConsumersStatistics">
            <summary> Get statistical information about all consumers.
            </summary>
            <returns> array of ConsumerInfo objects with statistical data or null if
            no consumers found or statistics are disabled.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetConsumersStatistics(System.Int64,System.String,TIBCO.EMS.ADMIN.DestinationInfo)">
            <summary> Get statistical information about consumers with specified parameters.
            </summary>
            <param name="connectionID">consumer connection ID or null.
            </param>
            <param name="username">    consumer user name or null.
            </param>
            <param name="destination"> consumer destination pattern or null.
            </param>
            <returns> array of ConsumerInfo objects with statistical data or null if
            no consumers found or statistics are disabled.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.ProducersStatistics">
            <summary> Returns statistical information about all producers.
            </summary>
            <returns> array of ProducerInfo objects with statistical data or null
            if no producers found or statistics are disabled.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetProducersStatistics(System.Int64,System.String,TIBCO.EMS.ADMIN.DestinationInfo)">
            <summary> Get the statistical information about producers with specified parameters.
            </summary>
            <param name="connectionID">producer connection ID or null.
            </param>
            <param name="username">    producer user name or null.
            </param>
            <param name="destination"> producer destination pattern or null.
            </param>
            <returns> array of ProducerInfo objects with statistical data or null
            if no producers found or statistics are disabled.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.TopicsStatistics">
            <summary> Get the statistical information for all topics.
            </summary>
            <returns> array of TopicInfo objects with statistical data or null
            if no topics found or statistics are disabled.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetTopicsStatistics(System.String)">
            <summary> Get the statistical information for the topics that match the given pattern.
            </summary>
            <remarks>
            The pattern may contain the wildcards "*" and ">".  See the TIBCO EMS documentation
            for how wildcards work in topic names. A pattern of "", ">", or null will
            return statistics for all the topics.
            </remarks>
            <param name="pattern">The pattern that must be matched
            </param>
            <returns> array of TopicInfo objects with statistical data or null
            if no topics found or statistics are disabled.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetTopicsStatistics(System.String,System.Int32,System.Int32)">
             <summary> Get the statistical information for the topics that match the given pattern.
             </summary>
             <remarks>
             The pattern may contain the wildcards "*" and ">".  See the TIBCO EMS documentation
             for how wildcards work in topic names. A pattern of "", ">", or null will
             return statistics for all the topics.
            
             One can start, continue or complete a cursored scan of queues.
            
             </remarks>
             <param name="pattern">The pattern that must be matched
             </param>
             <param name="cursorPosition">The cursorPosition can be
             <see cref="F:TIBCO.EMS.ADMIN.Admin.DEST_CURSOR_FIRST">Admin.DEST_CURSOR_FIRST</see>,
             <see cref="F:TIBCO.EMS.ADMIN.Admin.DEST_CURSOR_NEXT">Admin.DEST_CURSOR_NEXT</see>,
             <see cref="F:TIBCO.EMS.ADMIN.Admin.DEST_CURSOR_LAST">Admin.DEST_CURSOR_LAST</see>
             </param>
             <param name="cursorSize">The cursorSize must be greater than zero.  Note that the operation may return less than the requested size.
             </param>
             <returns> array of TopicInfo objects with statistical data or null
             if no topics found or statistics are disabled or when cursor complete.
             </returns>
             <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
             </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.QueuesStatistics">
            <summary> Get the statistical information about all queues.
            </summary>
            <returns>  array of QueueInfo objects with statistical data or null if no
            queues found or statistics are disabled.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetQueuesStatistics(System.String)">
            <summary> Get the statistical information for the queues that match the given pattern.
            </summary>
            <remarks>
            The wildcards "*" and ">" may be included in the pattern.  See the TIBCO EMS
            documentation for how wildcards work in queue names. A pattern of "",
            ">", or null will return statistics for all the queues.
            </remarks>
            <param name="pattern">The pattern that must be matched
            </param>
            <returns>  array of QueueInfo objects with statistical data or null if no
            queues found or statistics are disabled.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetQueuesStatistics(System.String,System.Int32,System.Int32)">
             <summary> Get the statistical information for the queues that match the given pattern.
             </summary>
             <remarks>
             The wildcards "*" and ">" may be included in the pattern.  See the TIBCO EMS
             documentation for how wildcards work in queue names. A pattern of "",
             ">", or null will return statistics for all the queues.
            
             One can start, continue or complete a cursored scan of queues.
            
             </remarks>
             <param name="pattern">The pattern that must be matched
             </param>
             <param name="cursorPosition">The cursorPosition can be
             <see cref="F:TIBCO.EMS.ADMIN.Admin.DEST_CURSOR_FIRST">Admin.DEST_CURSOR_FIRST</see>,
             <see cref="F:TIBCO.EMS.ADMIN.Admin.DEST_CURSOR_NEXT">Admin.DEST_CURSOR_NEXT</see>,
             <see cref="F:TIBCO.EMS.ADMIN.Admin.DEST_CURSOR_LAST">Admin.DEST_CURSOR_LAST</see>
             </param>
             <param name="cursorSize">The cursorSize must be greater than zero.  Note that the operation may return less than the requested size.
             </param>
             <returns>  array of QueueInfo objects with statistical data or null if no
             queues found or statistics are disabled or when cursor complete.
             </returns>
             <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
             </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetRouteStatistics(System.String)">
            <summary> Returns statistical information about the route with specified name.</summary>
            <param name="name">name of the route.
            </param>
            <returns>  RouteInfo object or null if route with such name does not exist or statistics are disabled.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if name is not a legal route name.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.CommitTransaction(TIBCO.EMS.ADMIN.TransactionInfo)">
            <summary> Commit the xa transaction.
            </summary>
            <param name="transaction">   The TransactionInfo object for the transaction
            to be committed.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> if transaction is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.RollbackTransaction(TIBCO.EMS.ADMIN.TransactionInfo)">
            <summary> Roll the xa transaction back.
            </summary>
            <param name="transaction">   The TransactionInfo object for the transaction
            to be rolled back.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> if TransactionInfo object is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetTransport(System.String)">
            <summary> Get the transport with a given name.
            </summary>
            <param name="transportName">the name of the transport.
            </param>
            <returns>  the transport or null if not found.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if transportName is not a legal
            transport name
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.Bridges">
            <summary> Get all the bridges known to the server.
            </summary>
            <returns> all the bridges known to the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetBridges(TIBCO.EMS.ADMIN.DestinationType,System.String)">
            <summary> Get all the bridges known to the server where the source destination is
            of a given type and the source destination name matches the given
            pattern.
            </summary>
            <param name="type">the type of source destination, either
            DestinationType.Queue to return only bridges from queues,
            DestinationType.Topic to return only bridges from topics, or
            DestinationType.All types to return bridges from both queues and
            topics.
            </param>
            <param name="pattern">a filter to restrict the bridges that are returned to
            only those whose name matches the pattern, null indicates all bridges.
            </param>
            <returns> all the matching bridges.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> if type is invalid
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetBridge(TIBCO.EMS.ADMIN.DestinationType,System.String)">
            <summary> Get the bridge from a given destination.
            </summary>
            <param name="type">the type of source destination, either
            DestinationType.Queue or DestinationType.Topic.
            </param>
            <param name="name">the name of the source destination
            </param>
            <returns> the BridgeInfo object representing the bridge.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> type is invalid or name is null
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetJACIInfo">
             <summary>
             Get statistics on the JACI permissions cache.
             </summary>
            
             <returns> JACIInfo object that describes the current statistics 
             of the JACI cache.
             </returns>
             <exception cref="T:TIBCO.EMS.ADMIN.AdminException">
             </exception>
            
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.ResetJACIStats">
            <summary>
            Reset all JACI statistics counters to zero.
            </summary>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.ClearJACICache">
             <summary>
             Clear all entries out of the JACI results cache.
             </summary>
            
             <exception cref="T:TIBCO.EMS.ADMIN.AdminException">
             </exception>
            
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.CreateDestinationBridge(TIBCO.EMS.ADMIN.DestinationBridgeInfo)">
            <summary> Creates a destination bridge as specified by the DestinationBridgeInfo object.</summary>
            <param name="destBridge">the destination bridge to be created
            </param>
            <returns> the newly created destination bridge
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or some other error occurred</exception>
            <exception cref="T:System.ArgumentException">if the DestinationBridgeInfo object is null</exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException">if the DestinationBridgeInfo object is not valid</exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminNameExistsException">if a destination bridge already exists between the
            specified source and target.</exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.DestroyDestinationBridge(TIBCO.EMS.ADMIN.DestinationType,System.String,TIBCO.EMS.ADMIN.DestinationType,System.String)">
            <summary> Destroy the destination bridge between a source and a target</summary>
            <param name="sourceType">the type of the source destination, either a topic or a queue.  See <see cref="T:TIBCO.EMS.ADMIN.DestinationType">DestinationType</see>
            </param>
            <param name="sourceName">the name of the source destination
            </param>
            <param name="targetType">the type of the target destination, either a topic or a queue.  See <see cref="T:TIBCO.EMS.ADMIN.DestinationType">DestinationType</see>
            </param>
            <param name="targetName">the name of the target destination
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or some other error occurred</exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException">if the source our target names or types are not valid</exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetDestinationBridge(TIBCO.EMS.ADMIN.DestinationType,System.String,TIBCO.EMS.ADMIN.DestinationType,System.String)">
            <summary> Returns the destination bridge between a source and a target</summary>
            <param name="sourceType">the type of the source destination, either a topic or queue.  See <see cref="T:TIBCO.EMS.ADMIN.DestinationType">DestinationType</see>
            </param>
            <param name="sourceName">the name of the source destination
            </param>
            <param name="targetType">the type of the target destination, either a topic or queue.  See <see cref="T:TIBCO.EMS.ADMIN.DestinationType">DestinationType</see>
            </param>
            <param name="targetName">the name of the target destination
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or some other error occurred</exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException">if the source our target names or types are not valid</exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetDestinationBridges(TIBCO.EMS.ADMIN.DestinationType,System.String)">
            <summary> Get the destination bridges for all source destinations that match the given source type and
            source pattern.
            </summary>
            <remarks>The source type can be either a topic, queue, or all.  See <see cref="T:TIBCO.EMS.ADMIN.DestinationType">DestinationType</see>.
            The source pattern may contain the wildcards "*" and ">".  See the Tibjms
            documentation for how wildcards work in destination names. A pattern of "", ">", or null will return the
            destination bridges from all the queues if sourceType is a queue or from all
            the topics if sourceType is a topic.
            </remarks>
            <param name="sourceType">the type of the source, either topic, queue, or all. See <see cref="T:TIBCO.EMS.ADMIN.DestinationType">DestinationType</see>,
            </param>
            <param name="sourcePattern">a pattern or destination name
            </param>
            <returns> an array of DestinationBridgeInfo objects that match the source pattern and type
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred</exception> 
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException">if sourcePattern or sourceType are not valid</exception> 
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.Compact(TIBCO.EMS.ADMIN.Store,System.Int64)">
            <summary> Compact one of the server's store files until either no more compaction
            can be done or timeout seconds have elapsed, whichever occurs first.
            (See remarks for important warning).
            </summary>
            <remarks>
            For mstores only, a value of <see cref="F:TIBCO.EMS.ADMIN.Admin.STORE_COMPACT_NOLIMIT"/> for the
            timeout triggers a full re-write of the mstore <b>with no time limit</b>.<br/><br/>
            <b>WARNING:</b> Once started, it is not possible to interrupt the
            compaction, and all other operations (creating new connections,
            sending and/or receiving messages, etc...) will be suspended during,
            at most, the number of seconds specified (the 'timeout' value) or, if
            using <see cref="F:TIBCO.EMS.ADMIN.Admin.STORE_COMPACT_NOLIMIT"/>, and for mstores only,
            until the mstore has been entirely re-written.
            </remarks>
            <param name="store">the store file to compact, <see cref="T:TIBCO.EMS.ADMIN.Store"></see>
            </param>
            <param name="timeout">time in seconds allowed for compaction (must be
            greater than zero) or, for mstores only, <see cref="F:TIBCO.EMS.ADMIN.Admin.STORE_COMPACT_NOLIMIT"/>
            </param>
            <returns> true if the store file was fully compacted before the timeout
            expired, false otherwise.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> if store is invalid or timeout is not
            greater than zero.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.Compact(System.String,System.Int64)">
            <summary> Compact one of the server's store files until either no more compaction
            can be done or timeout seconds have elapsed, whichever occurs first.
            (See remarks for important warning).
            </summary>
            <remarks>
            For mstores only, a value of <see cref="F:TIBCO.EMS.ADMIN.Admin.STORE_COMPACT_NOLIMIT"/> for the
            timeout triggers a full re-write of the mstore <b>with no time limit</b>.<br/><br/>
            <b>WARNING:</b> Once started, it is not possible to interrupt the
            compaction, and all other operations (creating new connections,
            sending and/or receiving messages, etc...) will be suspended during,
            at most, the number of seconds specified (the 'timeout' value) or, if
            using <see cref="F:TIBCO.EMS.ADMIN.Admin.STORE_COMPACT_NOLIMIT"/>, and for mstores only,
            until the mstore has been entirely re-written.
            </remarks>        
            <param name="name">the store file 'name' to compact.
            </param>
            <param name="timeout">time in seconds allowed for compaction (must be
            greater than zero) or, for mstores only, <see cref="F:TIBCO.EMS.ADMIN.Admin.STORE_COMPACT_NOLIMIT"/>
            </param>
            <returns> true if the store file was fully compacted before the timeout
            expired, false otherwise.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> if store is invalid or timeout is not
            greater than zero.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetStoreInfo(TIBCO.EMS.ADMIN.Store)">
            <summary> Get a summary of the usage of a store file.</summary>
            <param name="store">the store file to summarize.  See <see cref="T:TIBCO.EMS.ADMIN.Store"/>
            </param>
            <returns> a StoreInfo object detailing the usage of the store file.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            <exception cref="T:System.ArgumentException"> if store is invalid
            </exception>
            \deprecated Use GetStoreInfo(String name) instead
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetStoreInfo(System.String)">
            <summary>
            Get information about a store.
            </summary>
            <param name="name"> retrieve information about the store with this name
            </param>
            <returns> cref="FileStoreInfo" or cref="DbStoreInfo" or cref="MStoreInfo" object detailing
            configuration and usage of the store.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or an error occurred.
            </exception>
            <remarks>
            since EMS 5.0
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetStores">
            <summary>
            Get a list of configured stores.
            </summary>
            <returns> an array of Sring objects containing individual store names.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or an error occurred.
            </exception>
            <remarks>
            EMS 5.0
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetConsumers">
            <summary>
            Returns all consumers in the server.
            Returned array may be of 0 length if there are no consumers
            in the server. Returned consumers are not sorted and placed
            in the array in any order. Application may need to sort the consumers
            in application-specific order if required.
            This method is equivalent to calling method
            <c>GetConsumers(null,null,null,false,0)</c>. See 
            <see cref="M:TIBCO.EMS.ADMIN.Admin.GetConsumers(System.Object,System.String,TIBCO.EMS.ADMIN.DestinationInfo,System.Boolean,System.Int32)"/>
            for detailed information. 
            </summary>
            <returns> array of all consumers in the server or array of 0 length.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException" >if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetConsumers(System.Object,System.String,TIBCO.EMS.ADMIN.DestinationInfo,System.Boolean,System.Int32)">
             <summary>
             Returns consumers matching specified filters.
             Returned array may be of 0 length if there are no consumers in the server
             which match specified filters.
             </summary>
             
             <remarks>
             This method returns only consumers matching filters specified by parameters
             <c>consumerID</c>, <c>username</c> and <c>destination</c>.
             Parameter <c>durable</c> is applied only to topic subscribers.
             All filters may be omitted by specifying <c>null</c> value.
             Parameter <c>durable</c> has special meaning in that it prevents
             this method from returning non-durable topic consumers. It however does
             not affect which queue consumers are returned.
             Returned consumers are not sorted and placed in the array in any order.
             Application may need to sort the consumers in application-specific order
             if required.
             </remarks>
            
             <example>
                <ul>
                  <li>Calling  <c>GetConsumers(null,null,null,false,0);</c>
                    returns all consumers known to server but does not 
                    include statistical information nor selector (if present) for
                    each consumer.</li> 
                  <li>Calling <c>GetConsumers(null,null,null,true,0);</c>
                    returns all queue consumers and durable topic consumers.</li>
                  <li>Calling <code>
                      TopicInfo topic = new TopicInfo("news.///");
                      GetConsumers(null,null,topic,true,Admin.GET_DETAILED_STAT);</code>
                      returns all durable topic consumers which subscribe to any topic matching
             topic "news.///". Returned {<see cref="T:TIBCO.EMS.ADMIN.ConsumerInfo"/>} objects will include detailed
             statistics about consumers if statistics are enabled in the server but will
             not include consumer's selector.
             </li>
             <li>Calling<code>
                    QueueInfo queue = new QueueInfo("purchase.order.>");
                    GetConsumers(null,"OrderProcessor",queue,false,
                                   Admin.GET_DETAILED_STAT+Admin.GET_SELECTOR);</code>
             returns all queue consumers created by user "OrderProcessor" and receiving
             messages from all queues matching name "purchase.order.>". Each consumer
             object will include full statistics are available for consumer and consumer's
             selector if present.
              </li>
             </ul>
             </example>
             
             <param name="connectionID">if specified, only consumers for specified connection
             will be returned. Specify <c>null</c> if all consumers should be returned.
             </param>
            
             <param name="username">if specified, only consumers for connections with specified
             user name will be returned. Specify <c>null</c> if all consumers should be returned.
             </param>
            
             <param name="destination"> may be set to <c>null</c> or specify
             {<see cref="T:TIBCO.EMS.ADMIN.TopicInfo"/>} or {<see cref="T:TIBCO.EMS.ADMIN.QueueInfo"/>} object. If specified, only
             consumers subscribing to destinations of same type and matching this
             destination name will be returned.
             </param>
            
             <param name="durable"> specified that only durable topic subscribers should
             be returned. This does not affect returned queue consumers. If parameter
             <c>destination</c> specifies QueueInfo, this parameter is ignored.
             </param>
            
             <param name="dataFlags">specifies what information, besides common, should be included
             into returned ConsumerInfo objects. Value can be any combination of flags
             {<see cref="F:TIBCO.EMS.ADMIN.Admin.GET_STAT"/>}, {<see cref="F:TIBCO.EMS.ADMIN.Admin.GET_DETAILED_STAT"/>} and {<see cref="F:TIBCO.EMS.ADMIN.Admin.GET_SELECTOR"/>}.
             Notice {<see cref="F:TIBCO.EMS.ADMIN.Admin.GET_DETAILED_STAT"/>} superceeds {<see cref="F:TIBCO.EMS.ADMIN.Admin.GET_STAT"/>}. If not specified,
             returned objects do not contain statistics or consumer's selector.
             Also notice that statistical information may not be returned even when requested
             if statistics are disabled in the server.
             </param>
             
             <returns>array of consumers or array of 0 length. </returns>
             
             <exception cref="T:System.ArgumentException"> if <c>dataFlags</c> parameter
             is invalid.</exception>
            
             <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or an error occurred.
             </exception>
             <see cref="M:TIBCO.EMS.ADMIN.Admin.GetConsumers"/>
             <see cref="M:TIBCO.EMS.ADMIN.Admin.GetConsumer(System.Int64)"/>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetConsumer(System.Int64)">
            <summary>
            Returns consumer with specified ID.
            Returned consumer object contains all information about consumer known
            to server, including all details, available statistics, and consumer's
            selector.
            </summary>
            <returns>consumer information or <c>null</c> if consumer with 
            specified ID does not exist in the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or an error occurred.
            </exception>
            <see cref="M:TIBCO.EMS.ADMIN.Admin.GetConsumers"/>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetSubscriptions">
            <summary>
            Returns all subscriptions in the server.
            </summary>
            <remarks ref="true()">
            <para>
            Returned array may be of 0 length if there is no subscription
            in the server. Returned subscriptions are not sorted and placed
            in the array in any order. Application may need to sort the 
            subscriptions in application-specific order if required.
            </para>
            <para>
            This method is equivalent to calling method <c>GetSubscriptions(0, null, null)</c>.
            Refer to documentation of <see cref="M:TIBCO.EMS.ADMIN.Admin.GetSubscriptions(System.Int32,System.String,System.String)"/>
            for detailed information.
            </para>
            </remarks>
            <returns>Array of all subscriptions in the server or array of 0 length.</returns>
            <seealso cref="M:TIBCO.EMS.ADMIN.Admin.GetSubscriptions(System.Int32,System.String,System.String)"/>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or an error occurred.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetSubscriptions(System.Int32,System.String,System.String)">
            <summary>
            Returns subscriptions matching specified filters.
            </summary>
            <remarks ref="true()">
            <para>
            Returned array may be of 0 length if there is no subscription in 
            the server which match specified filters.
            </para>
            <para>
            This method returns only subscriptions matching filters specified by parameters
            <c>filterFlags</c>, <c>name</c> and <c>topicName</c>.
            </para>
            <para>
            Filters may be omitted by specifying <c>0</c> or <c>null</c> value.
            </para>
            <para>
            Returned subscriptions are not sorted and placed in the array in any 
            order. Application may need to sort the subscriptions in 
            application-specific order if required.
            </para>
            <example>
            <ul>
                <li>
                Calling <c>GetSubscriptions(0, null, null);</c>
                returns all subscriptions known to server. 
                </li>
                <li>
                Calling <c>GetSubscriptions(Admin.SUBSCRIPTIONS_FILTER_DURABLE_ONLY, null, null);</c>
                returns all durable (shared or not shared) subscriptions.    
                </li>
                <li>
                Calling <c>GetSubscriptions(Admin.SUBSCRIPTIONS_FILTER_DURABLE_ONLY + Admin.SUBSCRIPTIONS_FILTER_SHARED_ONLY, null, "news.*");</c>
                returns all shared durable subscriptions on any topic matching topic <c>"news.*"</c>.
                </li>
            </ul>
            </example>
            </remarks>
            <returns>Array of subscriptions or array of 0 length.</returns>
            <param name="filterFlags">value can be any
            combination of <see cref="F:TIBCO.EMS.ADMIN.Admin.SUBSCRIPTIONS_FILTER_DURABLE_ONLY"/>, 
            <see cref="F:TIBCO.EMS.ADMIN.Admin.SUBSCRIPTIONS_FILTER_NO_DURABLE"/>, 
            <see cref="F:TIBCO.EMS.ADMIN.Admin.SUBSCRIPTIONS_FILTER_SHARED_ONLY"/> and 
            <see cref="F:TIBCO.EMS.ADMIN.Admin.SUBSCRIPTIONS_FILTER_NO_SHARED"/>.
            </param>
            <param name="name">specifies that only subscriptions with this name 
            should be returned.
            </param>
            <param name="topicName">specifies that only subscriptions on a topic 
            matching this topic name should be returned.
            </param>
            <seealso cref="M:TIBCO.EMS.ADMIN.Admin.GetSubscriptions"/>
            <exception cref="T:System.ArgumentException">if parameter <c>filterFlags</c> is
            invalid.
            </exception> 
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or an error occurred.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.Channels">
            <summary> Get all the multicast channels known to the server.
            </summary>
            <returns> all the multicast channels known to the server.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if not authorized or an error occurred.
            </exception>
            \deprecated As of release 8.3
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetChannels">
            <summary> Returns all multicast channels in the server. </summary>
            <remarks>
            Notice returned objects do not contain statistical data for the
            channels. Use GetChannelStatistics() method to obtain statistical
            information about the channels.
            </remarks>
            <returns> array of ChannelInfo objects or array of 0 length if no
            channels exist.
            </returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or an error
            occurred.
            </exception>
            <see cref="M:TIBCO.EMS.ADMIN.Admin.GetChannel(System.String)"></see>
            <see cref="M:TIBCO.EMS.ADMIN.Admin.GetChannelStatistics(System.String)"></see>
            \deprecated As of release 8.3
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetChannel(System.String)">
            <summary> Returns the multicast channel with the specified name. 
            </summary>
            <remarks>
            Notice returned object does not contain statistical data for the
            channel. Use GetChannelStatistics() method to obtain statistical
            information about the channel.
            </remarks>
            <param name="name"> the name of the channel.
            </param>
            <returns> ChannelInfo object or <c>null</c> if channel with
            specified name does not exist in the server.
            </returns> 
            <exception cref="T:System.ArgumentException"> if <c>name</c> parameter
            is invalid.</exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or an error
            occurred.</exception>
            <see cref="M:TIBCO.EMS.ADMIN.Admin.GetChannels"></see>
            <see cref="M:TIBCO.EMS.ADMIN.Admin.GetChannelStatistics(System.String)"></see>
            \deprecated As of release 8.3
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetChannelStatistics(System.String)">
            <summary> Returns statistical information about the multicast 
            channel with the specified name. 
            </summary>
            <param name="name"> the name of the channel.
            </param>
            <returns> ChannelInfo object or <c>null</c> if channel with
            specified name does not exist in the server or statistics are
            disabled. 
            </returns> 
            <exception cref="T:System.ArgumentException"> if <c>name</c> parameter
            is invalid.</exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if not authorized or an error
            occurred.</exception>
            <see cref="M:TIBCO.EMS.ADMIN.Admin.GetChannels"></see>
            <see cref="M:TIBCO.EMS.ADMIN.Admin.GetChannel(System.String)"></see>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Admin.RestartRequired">
            <summary>Query a server to determine whether a restart is required to 
            complete state changes.
            </summary>
            <remarks>
            This allows the server to be checked before issuing a restart.
            </remarks>
            <returns> True if the server requires a restart to attain a state 
            consistent with the configuration. 
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Admin.GetTraceBuffer(System.Boolean)">
            <summary>Reserved for internal provider use only. Do not use this method.
            </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.AdminACLEntry">
            <summary> This class represents a set of administrative permissions for a Principal (user or group).</summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.AdminACLEntry.Principal">
            <summary> Get or set the principal that this entry applies to.
            </summary>
            <returns> the PrincipalInfo that this AdminACLEntry applies to.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.AdminACLEntry.Permissions">
            <summary> Get or set the permissions for this entry.
            </summary>
            <returns> the permissions for this entry.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminACLEntry.#ctor(TIBCO.EMS.ADMIN.PrincipalInfo,TIBCO.EMS.ADMIN.AdminPermissions)">
            <summary> Constructor used to create AdminACLEntries that will be passed to
            Admin.grant() and Admin.revoke() methods.
            </summary>
            <param name="principal">  the principal that has the permissions.
            </param>
            <param name="permissions">the permissions for this entry.
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminACLEntry.ToString">
            <summary> Generate a string representation of this AdminACLEntry.
            </summary>
            <returns>  a string representation of this AdminACLEntry.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.AdminException">
            <summary> This is the general admin exception used when an error occurs with a call to the server.</summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminException.#ctor(System.String)">
            <summary> Create a new AdminException with given error message.
            </summary>
            <param name="msg">The error message for the exception.
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminException.#ctor(System.String,System.Exception)">
            <summary> Create a new AdminException with given error message and root exception.
            </summary>
            <param name="msg">The error message for the exception.
            </param>
            <param name="e">  The root cause of the exception.
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminException._GetException(System.String,TIBCO.EMS.ADMIN.Status)">
            <summary> Generate the appropriate exception based on the status.  The generated exception
            could be a subclass of AdminException.
            </summary>
            <param name="msg">    The message for the generated exception.
            </param>
            <param name="status"> The error code for the exception.
            </param>
            <returns>  the generated AdminException or appropriate subclass.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminException.printStackTrace">
            <summary>Prints stack trace of this exception and of the internal 
            exception if it is set.
            </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminException.printStackTrace(System.IO.StreamWriter)">
            <summary> Prints stack trace of this exception and of the internal
            exception if it is set.
            </summary>
            <param name="s">the PrintWriter object to print to.
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminException.ToString">
            <summary> Generate a string representation of this AdminException.
            </summary>
            <returns>  a string representation of this AdminException.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.AdminInvalidNameException">
            <summary> This is the admin exception thrown when the name used to 
            create a User, Group, or Destination is invalid.
            </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminInvalidNameException.#ctor(System.String)">
            <summary> Create a AdminInvalidNameException with the given message.
            </summary>
            <param name="msg">The error message for this exception.
            </param>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.AdminNameExistsException">
            <summary> This is the admin exception thrown when the name used to create a
            User, Group, Destination, or JNDI binding is already in use.
            </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminNameExistsException.#ctor(System.String)">
            <summary>
            Create a AdminNameExistsException with the given message.
            </summary>
            <param name="msg">The error message for this exception.</param>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.AdminPermissions">
            <summary> This class represents a set of positive and negative 
            administrative permissions. Negative permissions are only
            returned when the entry is returned from the server. In
            grant() and revoke() methods only positive permissions are
            used to specify the set of permissions which should be
            granted or revoked. Applications normally use objects returned
            as a result of a server query to obtain administrative permissions.
            If any permissions have to be changed, a new AdminPermission object
            should be created.
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.AdminPermissions.Empty">
            <summary> Indicates whether or not this object has no negative or positive
            permissions set.
            </summary>
            <returns> a boolean to indicate whether or not both the positive and
            negative permissions are not set.
            </returns>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.VIEW_FACTORY">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.CHANGE_FACTORY">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.VIEW_ROUTE">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.CHANGE_ROUTE">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.VIEW_CONNECTION">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.CHANGE_CONNECTION">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.VIEW_DURABLE">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.CHANGE_DURABLE">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.PURGE_DURABLE">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.VIEW_USER">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.CHANGE_USER">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.VIEW_GROUP">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.CHANGE_GROUP">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.VIEW_ACL">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.CHANGE_ACL">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.VIEW_DESTINATION">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.CREATE_DESTINATION">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.DELETE_DESTINATION">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.MODIFY_DESTINATION">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.PURGE_DESTINATION">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.VIEW_MESSAGE">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.CHANGE_MESSAGE">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.VIEW_SERVER">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.CHANGE_SERVER">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.SHUTDOWN_SERVER">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.VIEW_ADMIN_ACL">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.CHANGE_ADMIN_ACL">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.VIEW_BRIDGE">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.CHANGE_BRIDGE">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.VIEW_CHANNEL">
            <summary>  </summary>
            \deprecated As of release 8.3
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.CHANGE_CHANNEL">
            <summary>  </summary>
            \deprecated As of release 8.3
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.PROTECT1">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.PROTECT2">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.PROTECT3">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.PROTECT4">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.VIEW_ALL">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AdminPermissions.ALL">
            <summary>  </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminPermissions.#ctor">
            <summary> Default constructor which creates empty set of permissions.</summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminPermissions.#ctor(System.Int64)">
            <summary> Creates a given set of positive permissions.
            </summary>
            <param name="positive_perms">the administrative permissions.
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminPermissions.#ctor(System.Int64,System.Int64)">
            <summary> Creates a given sets of positive and negative permissions.
            </summary>
            <param name="positive_perms">the positive permissions.
            </param>
            <param name="negative_perms">the negative permissions.
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminPermissions.HasPositivePermission(System.Int64)">
            <summary> Indicates whether or not given positive permissions are set.
            </summary>
            <param name="perm">the positive permissions to be checked.
            </param>
            <returns> boolean to indicate whether or not the positive permissions are set.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminPermissions.SetPermission(System.Int64,System.Boolean)">
            <summary> Set or unset positive permissions.
            </summary>
            <param name="perm">positive permissions to be granted or revoked.
            </param>
            <param name="grant">true if the permissions are to be granted and false if the
            permissions are to be revoked.
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminPermissions.HasNegativePermission(System.Int64)">
            <summary> Indicates whether or not given negative permissions are set.
            </summary>
            <param name="perm">the negative permissions to be checked.
            </param>
            <returns> boolean to indicate whether or not the negative permissions are set.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminPermissions.HasInheritedPermission(System.Int64)">
            <summary>
            Determine if the given permission is present in the Inherited Permissions.
            </summary>
            <param name="perm ">permissions</param>
            <returns>  true    if given permissions are all present in inherited 
            permissions</returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminPermissions.ToString">
            <summary> 
            Generate a string representation of this AdminPermissions.
            </summary>
            <returns>  String representation of this AdminPermissions.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.AdminSecurityException">
            <summary> This is the admin exception thrown when the user 
            is not authorized to execute a command.</summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.AdminSecurityException.#ctor(System.String)">
            <summary>
            Create a AdminSecurityException with the given message.
            </summary>
            <param name="msg">The error message for this exception.</param>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.BridgeInfo">
            <summary> This class represents the definition of a bridge. A bridge consists of a
            source destination name and type and 1 or more BridgeTarget objects.
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.BridgeInfo.Name">
            <summary> Get the name of the destination being bridged from.</summary>
            <returns> the name of the destination.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.BridgeInfo.Type">
            <summary> Get the type of the destination being bridged from.</summary>
            <returns> DestinationType.Queue if the destination being bridged
            from is a queue or DestinationType.Topic if it is a topic.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.BridgeInfo.Targets">
            <summary> Get the destinations being bridged to</summary>
            <returns> an array of BridgeTarget objects.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.BridgeInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.BridgeTarget">
            <summary> This class represents the target destination of a bridge.</summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.BridgeTarget.Name">
            <summary> Get the name of the destination being bridged to.</summary>
            <returns> the name of the destination.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.BridgeTarget.Type">
            <summary> Get the type of the destination being bridged to.</summary>
            <returns> DestinationType.Queue if the destination being bridged to
            is a queue or DestinationType.Topic if it is a topic.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.BridgeTarget.Selector">
            <summary> Get the selector.
            </summary>
            <remarks>Only messages matching the selector will be bridged
            to this destination.
            </remarks>
            <returns> the selector or null if one is not set.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.BridgeTarget.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.ChannelInfo">
            <summary> An object of this class represents the configuration and
            optionally statistical data about the multicast channel.
            </summary>
            <remarks> When this object is received via the method Admin.getChannel()
            it does not contain statistical information about the channel. Only
            objects returned by the method Admin.GetChannelStatistics() return 
            ChannelInfo objects that include statistical data.
            </remarks>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ChannelInfo.Name">
            <summary> The channel's name.
            </summary>
            <returns> the channel's name.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ChannelInfo.Address">
            <summary> The channel's multicast address.
            </summary>
            <returns> the channel's multicast address.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ChannelInfo.Interface">
            <summary> The channel's multicast interface.
            </summary>
            <returns> the channel's multicast interface.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ChannelInfo.Ttl">
            <summary> The channel's multicast time-to-live.
            </summary>
            <returns> the channel's multicast time-to-live.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ChannelInfo.Priority">
            <summary> The channel's multicast priority.
            </summary>
            <returns> the channel's multicast priorty.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ChannelInfo.MaxRate">
            <summary> The channel's maximum transmission rate.
            </summary>
            <returns> the channel's maximum transmission rate 
            in bytes per second.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ChannelInfo.MaxTime">
            <summary> The channel's maximum window size for retransmissions.
            </summary>
            <returns> the channel's maximum window size for retransmissions 
            in seconds.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ChannelInfo.Active">
            <summary> Indicates whether or not the channel is active.
            </summary>
            <returns> true if this channel is active and false if this channel 
            is defined in the server configuration but is not active.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ChannelInfo.BacklogCount">
            <summary> The channel's message backlog count. This is the number
            of messages buffered in the server waiting to be sent on the
            channel.
            </summary>
            <returns> the channel's message backlog count.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ChannelInfo.BacklogSize">
            <summary> The channel's message backlog size. This is the number
            of bytes buffered in the server waiting to be sent on the channel.
            </summary>
            <returns> the channel's message backlog size.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ChannelInfo.TransmittedBytes">
            <summary> The number of bytes sent by this channel. This number
            does not include any retransmissions.
            </summary>
            <returns> the number of bytes sent by this channel.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ChannelInfo.RetransmittedBytes">
            <summary> The number of bytes sent in retransmissions by this 
            channel.
            </summary>
            <returns> the number of bytes sent in retransmissions by this 
            channel.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ChannelInfo.BufferedBytes">
            <summary> The number of bytes buffered for retransmission by this
            channel.
            </summary>
            <returns> the number of bytes buffered for retransmission by this
            channel.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ChannelInfo.Statistics">
            <summary> Returns cumulative statistics for all destinations on the
            channel. 
            </summary>
            <returns> cumulative statistics for all destinations on the channel,
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ChannelInfo.DetailedStatistics">
            <summary> Returns detailed statistics for all destinations being 
            sent on the channel.
            </summary>
            <returns> detailed statistics for all destinations being sent on
            the channel.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ChannelInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.CMLedgerListenerInfo">
            <summary> This class represents a summary about a single registered TIBCO Rendezvous
            certified listener that the EMS server exports messages to.
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.CMLedgerListenerInfo.LastConf">
            <summary> Returns the TIBCO Rendezvous Certified Messaging sequence number of the
            last message for which the listener confirmed delivery.
            </summary>
            <returns> the sequence number of the last message for which the listener
            confirmed delivery.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.CMLedgerListenerInfo.Name">
            <summary> Returns the name of the TIBCO Rendezvous certified listener that this
            object summarizes.
            </summary>
            <returns> the name of the TIBCO Rendezvous certified listener that this
            object summarizes.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.CMLedgerListenerInfo.Dynamic">
            <summary> Indicates whether or not the TIBCO Rendezvous certified listener had
            been pre-registered or whether it was created dynamically.
            </summary>
            <returns> true if TIBCO Rendezvous certified listener had been created
            dynamically, false if it was pre-registered.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.CMLedgerListenerInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.CMLedgerSubjectInfo">
            <summary> This class represents an outbound subject entry in a TIBCO Rendezvous
            Certified Messaging ledger file.
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.CMLedgerSubjectInfo.Subject">
            <summary> Returns the name of the subject that this object summarizes.
            </summary>
            <returns> the name of the subject that this object summarizes.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.CMLedgerSubjectInfo.LastSent">
            <summary> Returns the sequence number of the most recent message sent with this
            subject name.
            </summary>
            <returns> the sequence number of the most recent message sent with this
            subject name.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.CMLedgerSubjectInfo.TotalMsgs">
            <summary> Returns the total number of messages stored on this subject.
            </summary>
            <returns> the total number of messages stored on this subject.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.CMLedgerSubjectInfo.TotalSize">
            <summary> Returns the total storage (in bytes) occupied by all messages with this
            subject name.
            </summary>
            <remarks>If the ledger contains several messages with this subject
            name, then this field sums the storage space over all of them.
            </remarks>
            <returns> the total storage (in bytes) occupied by all messages with this
            subject name.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.CMLedgerSubjectInfo.Listeners">
            <summary> Returns an array of CMLedgerListenerInfo objects, one for each
            registered listener.
            </summary>
            <returns> an array of CMLedgerListenerInfo objects, one for each
            registered listener.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.CMLedgerSubjectInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.CMListenerInfo">
            <summary> This class represents a TIBCO Rendezvous CM listener.</summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.CMListenerInfo.Transport">
            <summary> Get or set the name of the listener's transport.
            </summary>
            <returns> transport name.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.CMListenerInfo.Name">
            <summary> Get or set the name of the listener.
            </summary>
            <returns> listener name.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.CMListenerInfo.Subject">
            <summary> Get or set the subject of the listener.
            </summary>
            <returns> listener subject.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.CMListenerInfo.#ctor">
            <summary>Creates CMListener with empty transport, name and subject. </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.CMListenerInfo.#ctor(System.String,System.String,System.String)">
            <summary> Creates CMListener on a given transport with given name and subject
            name.
            </summary>
            <param name="transport">the name of the transport on which the listener is to
            be created.
            </param>
            <param name="name">the name of listener to be created.
            </param>
            <param name="subject">the subject on which the listener is to be created.
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.CMListenerInfo.#ctor(System.String,System.String)">
            <summary> Creates CMListener with given name and subject name.
            </summary>
            <remarks> CMListeners created with this method are assigned to the 
            default TIBCO Rendezvous CM transport ("$RVCM$"). If the server uses
            multiple named transports then use the CMListenerInfo(string transport,
            string name, string subject) constructor, specifying which transport 
            the listener is to be created on.
            </remarks>
            <param name="name">the name of listener to be created.
            </param>
            <param name="subject">the subject on which the listener is to be created.
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.CMListenerInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.Metric">
            <summary> Defines the possible values for load balanced metric that
            can be specified for a connection factory or retrieved from 
            a connection factory object.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Metric.None">
            <summary> Connection factory is not load balanced.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Metric.Connections">
            <summary> Connection factory load balances by generating a connection to the server
            with the fewest number of connections.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Metric.ByteRate">
            <summary> Connection factory load balances by generating a connection to the server
            with the lowest total byte rate, input and output.
            </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.ConnectionFactoryInfo">
            <summary> A ConnectionFactoryInfo object represents a configured ConnectionFactory
            that can be retrieved by an EMS client through the built in JNDI
            implementation.  This class is used to create and alter the properties of
            the ConnectionFactory.
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.JNDINames">
            <summary> Return the array of names that this factory is bound to in the default JNDI.
            </summary>
            <returns>  the array of names for this factory.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.URL">
            <summary> Get or set the URL for this factory.
            </summary>
            <returns>  the URL for this factory.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.ClientID">
            <summary> Get or set the clientID for this factory.
            </summary>
            <returns>  the clientID for this factory.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.SSLParams">
            <summary> Get the SSL parameters for this factory.
            </summary>
            <returns>  the SSL parameters for this factory or null if none exist.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.DestinationType">
            <summary> Get or set the destination type for this factory.
            </summary>
            <returns>  the destination type for this factory.
            DestinationType.Queue, DestinationType.Topic or
            DestinationType.All if it is a generic factory.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.XAType">
            <summary> Get or change whether or not the factory is an XA factory.
            </summary>
            <returns> true if this is XA factory, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.LoadBalanced">
            <summary> Indicates whether or not the connection factory is load balanced.
            </summary>
            <returns> true if the factory is load balanced, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.Metric">
            <summary> Get or set the metric used for load balancing.
            </summary>
            <remarks> If the factory is not load balanced the metric returned will be
            TIBCO.EMS.ADMIN.Metric.None. If the factory is load balanced but no metric has 
            been set explicitly the metric returned will be the default,
            TIBCO.EMS.ADMIN.Metric.Connections. <see cref="T:TIBCO.EMS.ADMIN.Metric"></see>.
            </remarks>
            <returns> The metric. See <see cref="T:TIBCO.EMS.ADMIN.Metric"></see>.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.ConnectAttemptCount">
            <summary> Get or set the connect_attempt_count for this factory.
            </summary>
            <returns>  the connect_attempt_count for this factory.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.ConnectAttemptDelay">
            <summary> Get or set the connect_attempt_delay for this factory.
            </summary>
            <returns>  the connect_attempt_delay for this factory.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.ConnectAttemptTimeout">
            <summary> Get or set the connect_attempt_timeout for this factory.
            </summary>
            <returns>  the connect_attempt_timeout for this factory.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.ReconnectAttemptCount">
            <summary> Get or set the reconnect_attempt_count for this factory.
            </summary>
            <returns>  the reconnect_attempt_count for this factory.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.ReconnectAttemptDelay">
            <summary> Get or set the reconnect_attempt_delay for this factory.
            </summary>
            <returns>  the reconnect_attempt_delay for this factory.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.ReconnectAttemptTimeout">
            <summary> Get or set the reconnect_attempt_timeout for this factory.
            </summary>
            <returns>  the reconnect_attempt_timeout for this factory.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.MulticastEnabled">
            <summary> Get or set whether the factory is multicast-enabled.
            </summary>
            <returns> true if the factory is multicast-enabled, false otherwise.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.MulticastDaemon">
            <summary> Get or set the multicast daemon port for the factory.
            </summary>
            <returns> the multicast daemon port for the factory.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.#ctor(System.String,System.String,TIBCO.EMS.ADMIN.DestinationType,System.Collections.Hashtable)">
            <summary> Creates ConnectionFactoryInfo.
            </summary>
            <remarks>  The ConnectionFactory is not created on
            the server until Admin.CreateConnectionFactory() is called.
            </remarks>
            <param name="url">        The server URL for the factory.
            </param>
            <param name="clientID">   The clientID for the connection created by this factory.
            </param>
            <param name="type">       Factory type. Can be DestinationType.Queue,
            DestinationType.Topic or DestinationType.All
            where latter creates a generic connection factory.
            </param>
            <param name="sslParams">     The SSL parameters for the connections
            created with this factory (can be null).
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.#ctor(System.String,System.String,TIBCO.EMS.ADMIN.DestinationType,System.Boolean,System.Collections.Hashtable)">
            <summary> Creates ConnectionFactoryInfo.
            </summary>
            <remarks>The ConnectionFactory is not created on
            the server until Admin.createConnectionFactory() is called.
            </remarks>
            <param name="url">        The server URL for the factory.
            </param>
            <param name="clientID">   The clientID for the connection created by this factory.
            </param>
            <param name="type">       Factory type. Can be DestinationType.Queue,
            DestinationType.Topic or DestinationType.All
            where latter creates a generic connection factory.
            </param>
            <param name="xa">         XA type. Set to true if this is an XA connection factory.
            </param>
            <param name="sslParams">     The SSL parameters for the connections
            created with this factory (can be null).
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConnectionFactoryInfo.ToString">
            <summary> Generate a string representation of this ConnectionFactoryInfo.
            </summary>
            <returns>  a string representation of this ConnectionFactoryInfo.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.SSLType">
            <summary> Types indicating whether connection is ssl or not
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLType.None">
            <summary> Type indicating that the connection is not an SSL connection.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLType.SSL">
            <summary> Type indicating that the connection is an SSL connection.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLType.TCP">
            <summary> Type indicating that the client uses SSL but connects by way
            of an external SSL accelerator to one of the server's TCP ports.
            </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.ConnectionInfo">
            <summary> A ConnectionInfo object represents a client connection to the TIBCO EMS server.
            ConnectionInfo objects are obtained through calls to Admin.GetConnections().
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.Type">
            <summary> Get the connection type for this connection.
            </summary>
            <returns>  the connection type for this connection. Will be one of the
            following: <see cref="F:TIBCO.EMS.ADMIN.ConnectionInfo.CONNECTION_TYPE_QUEUE"></see>, <see cref="F:TIBCO.EMS.ADMIN.ConnectionInfo.CONNECTION_TYPE_TOPIC"></see>,
            <see cref="F:TIBCO.EMS.ADMIN.ConnectionInfo.CONNECTION_TYPE_ROUTE"></see>, <see cref="F:TIBCO.EMS.ADMIN.ConnectionInfo.CONNECTION_TYPE_FT"></see>,
            or <see cref="F:TIBCO.EMS.ADMIN.ConnectionInfo.CONNECTION_TYPE_GENERIC"></see>.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.Host">
            <summary> Get the host for this connection.
            </summary>
            <returns>  the hostname for this connection.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.Address">
            <summary> Get the IP address for this connection.
            </summary>
            <returns>  the IP address for this connection.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.Port">
            <summary> Get the ephemeral port used on the client host for this connection.
            </summary>
            <returns>  the client ephemeral port.
            </returns>
            since EMS 8.4
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.ClientID">
            <summary> Get the clientID for this connection.
            </summary>
            <returns>  the clientID for this connection (can be null).
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.UserName">
            <summary> Get the username for this connection.
            </summary>
            <returns>  the username for this connection.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.SessionCount">
            <summary> Get the number of sessions for this connection.
            </summary>
            <returns>  the number of sessions for this connection.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.ConsumerCount">
            <summary> Get the number of consumers for this connection.
            </summary>
            <returns> the number of consumers for this connection.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.ProducerCount">
            <summary> Get the number of producers for this connection.
            </summary>
            <returns> the number of producers for this connection.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.StartTime">
            <summary> Get the creation time, in milliseconds, for this connection.
            </summary>
            <returns>  the creation time, in milliseconds, for this connection.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.UpTime">
            <summary> Get the time in milliseconds that this connection has been connected.
            </summary>
            <returns>  the time in milliseconds that this connection has been connected.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.VersionInfo">
            <summary> Get the version of the software being run by the client that created
            this connection.
            </summary>
            <returns>  the VersionInfo object representing the version of the software
            being run by the client or null if the version information was not
            provided by the server.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.UncommittedCount">
            <summary> Get the number of uncommitted mesages that are pending
            for this connection.
            </summary>
            <returns> the number of uncommitted messages
            </returns>
            since EMS 5.0
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.UncommittedSize">
            <summary> Get the size of all uncommitted mesages that are pending
            for this connection.
            </summary>
            <returns> the size of all uncommitted messages
            </returns>
            since EMS 5.0
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.ClientType">
            <summary> Get the language that the application was written in.
            </summary>
            <returns> the client type. Will be one of the following:
            <see cref="F:TIBCO.EMS.ADMIN.ConnectionInfo.CLIENT_TYPE_C"></see>, <see cref="F:TIBCO.EMS.ADMIN.ConnectionInfo.CLIENT_TYPE_JAVA"></see>,
            <see cref="F:TIBCO.EMS.ADMIN.ConnectionInfo.CLIENT_TYPE_CSHARP"></see> or <see cref="F:TIBCO.EMS.ADMIN.ConnectionInfo.CLIENT_TYPE_UNKNOWN"></see>.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.XA">
            <summary> Indicates whether or not the connection is an XA connection.</summary>
            <returns> true if the connection is an XA connection, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.FT">
            <summary> Indicates whether or not the connection is an FT connection, that is
            the connection has alternative URLs.
            </summary>
            <returns> true if the connection is an FT connection, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.Admin">
            <summary> Indicates whether or not the connection is a connection from an
            administration client, either Admin or a client using this
            administration api.
            </summary>
            <returns> true if the connection is an admin connection, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.SSLType">
            <summary> Get the type of SSL connection used, if any.</summary>
            <returns> the SSL type. <see cref="T:TIBCO.EMS.ADMIN.SSLType">SSLType</see>
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.Started">
            <summary> Indicates whether or not the connection as been started by the client.</summary>
            <returns> true if the connection has been started, false otherwise.
            </returns>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ConnectionInfo.CONNECTION_TYPE_QUEUE">
            <summary> Type indicating the connection is a queue connection.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ConnectionInfo.CONNECTION_TYPE_TOPIC">
            <summary> Type indicating the connection is a topic connection.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ConnectionInfo.CONNECTION_TYPE_ROUTE">
            <summary> Type indicating the connection is a route connection to another server.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ConnectionInfo.CONNECTION_TYPE_FT">
            <summary> Type indicating the connection is a fault tolerant connection to another
            server.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ConnectionInfo.CONNECTION_TYPE_GENERIC">
            <summary> Type indicating a generic client connection.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ConnectionInfo.CLIENT_TYPE_C">
            <summary> Type indicating the client is a C application.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ConnectionInfo.CLIENT_TYPE_JAVA">
            <summary> Type indicating the client is a Java application.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ConnectionInfo.CLIENT_TYPE_CSHARP">
            <summary> Type indicating the client is a C# application.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ConnectionInfo.CLIENT_TYPE_UNKNOWN">
            <summary> Type indicating the client is of unkown type.</summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.ID">
            <summary> Get the connection ID for this connection.
            </summary>
            <returns>  the connection ID for this connection.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConnectionInfo.URL">
            <summary> Get the URL for this connection.
            </summary>
            <returns> the URL for this connection.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConnectionInfo.ToString">
            <summary> Generate a string representation of this ConnectionInfo.
            </summary>
            <returns>  a string representation of this ConnectionInfo.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.ConsumerInfo">
            <summary> A ConsumerInfo object represents a message consumer.
            <see cref="M:TIBCO.EMS.ADMIN.Admin.GetConsumers"/>
            </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.ConsumerInfo.Details">
            <summary> Provides additional information about consumer.
            </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetRouteName">
            <summary>
            Returns queue owner's server name if this consumer's destination
            is a routed queue. Returns <c>null</c> for topic
            consumers and for queue consumers receiving messages
            from queues local to the server.
            </summary>
            <returns> queue owner server name or <c>null</c> </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetDestinationPrefetch">
            <summary>
            Returns destination prefetch value.
            This returns actual destination prefetch value used by the server
            at run time. Return value is a positive prefetch value or
            <see cref="F:TIBCO.EMS.ADMIN.DestinationInfo.PREFETCH_NONE"/> which is available for queues.
            </summary>
            <returns> destination prefetch value as positive value
            or <see cref="F:TIBCO.EMS.ADMIN.DestinationInfo.PREFETCH_NONE"/> for queues
            configured as no-prefetch queue.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetPrefetchDelivered">
            <summary>
            Returns number of prefetch messages delivered to consumer by the server.
            This value should be ignored for consumers on no-prefetch queues.
            For consumers receiving messages on any destination with positive
            prefetch value, this value is never more than the prefetch value of
            the destination. While normally this value cannot be used to identify
            the status of the consumer, it can be used in conjunction with other
            consumer information values to identify consumers who stopped receiving
            messages due to application-specific problems.
            </summary>
            <returns>number of messages delivered to consumer within prefetch window.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetCurrentMsgCountSentByServer">
            <summary>
            Returns number of messages sent to consumer and not yet
            acknowledged by consumer's session. For topic consumers
            this number is included into the number of pending messages
            returned by <see cref="M:TIBCO.EMS.ADMIN.ConsumerInfo.GetPendingMessageCount"/>.
            </summary>
            <returns> number of sent messages, possibly 0.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetCurrentMsgSizeSentByServer">
            <summary>
            Returns combined size of messages sent to consumer and not yet
            acknowledged by consumer's session. For topic consumers
            this size is included into the combined size of pending messages
            returned by <see cref="M:TIBCO.EMS.ADMIN.ConsumerInfo.GetPendingMessageSize"/>.
            </summary>
            <returns> combined size of sent messages, possibly 0.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetElapsedSinceLastSent">
            <summary>
            Returns number of milliseconds elapsed since last time the server
            sent a message to this consumer. This value, while returned in
            milliseconds, has a precision of 1 second. It should be used for
            informational purposes only.
            </summary>
            <returns> approximate number of milliseconds elapsed since last
            time the server sent a message to this consumer.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetElapsedSinceLastAcknowledged">
            <summary>
            Returns number of milliseconds elapsed since last time a message
            sent to this consumer was acknowledged by consumer's session.
            This value, while returned in milliseconds, has a precision of 1
            second. This value should be used for informational purposes only.
            It can be used, for example, to identify consumers which receive
            messages but do not acknowledge them for some reason, etc.
            </summary>
            <returns> approximate number of milliseconds elapsed since last
            time a message delivered to this consumer has been acknowledged by
            consumer's session.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetTotalMsgCountSentByServer">
            <summary>
            Returns total number of messages the server sent to this consumer since
            consumer was created. This value includes resends of the same message
            due to consumer's session recover or rollback. This value does not represent
            true number of unique messages received by this consumer and should be used
            only for statistical and informational purposes.
            </summary>
            <returns> number of messages sent by server to this consumer since consumer
            was created, including resends.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetTotalAcknowledgedCount">
            <summary>
            Returns total number of messages which were delivered to this
            consumer and have been acknowledged by consumer's session.
            This value should be used for informational purposes only.
            </summary>
            <returns> total number of acknowledged messages which were received
            via this consumer.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConsumerInfo.Details.System">
            <summary>
            Returns <c>true</c> if this consumer has been created
            automatically by the system. If this method returns
            <c>false</c>, this consumer has been created by user
            application. If this method returns <c>true</c> this
            consumer has been created automatically by the system. There
            are several types of consumers the system may create automatically.
            </summary>
            <returns> <c>true</c> if this consumer has been created by EMS
            server and not by application.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConsumerInfo.Details.Active">
            <summary>
            Returns <c>true</c> if this consumer is active.
            Active consumers are consumers to which the server can send 
            messages to.
            Only queue consumers which never called <c>Receive()</c>
            remain in inactive state. Queue consumers which called
            <c>Receive()</c> at least once or are configured with the
            message callback, and all topic consumers are always active.
            This method can identify inactive queue consumers which never
            called <c>Receive()</c> and, while present, never receive
            any messages from the server even in presence of pending messages
            in corresponding queue.
            </summary>
            <returns> <c>false</c> if this is a queue consumer which is not
            configured with the message callback and never called Receive().
            Returns <c>true</c> in all other cases. 
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetSessionAcknowledgeMode">
            <summary>
            Returns consumer's session acknowledge mode as a constant defined
            in <see cref="T:TIBCO.EMS.ADMIN.Admin"/>.
            </summary>
            <remarks>
            This method returns consumer's session acknowledge mode as a value
            defined in the <see cref="T:TIBCO.EMS.ADMIN.Admin"/> class. 
            <para><b>Returned value is </b></para>
            <ul>
               <li> <see cref="F:TIBCO.EMS.ADMIN.Admin.SESSION_UNKNOWN_ACKNOWLEDGE"/> if consumer is currently
                  not connected (for durable topic subscribers)
               </li>
               <li> <see cref="F:TIBCO.EMS.ADMIN.Admin.SESSION_XA"/> if consumer's session is XA session 
               </li>
               <li> <see cref="F:TIBCO.EMS.ADMIN.Admin.SESSION_TRANSACTED"/> if consumer's session is transacted 
               </li>
               <li> or one of values 
                <ul>
                   <li><see cref="F:TIBCO.EMS.ADMIN.Admin.SESSION_NO_ACKNOWLEDGE"/>,</li>
                   <li><see cref="F:TIBCO.EMS.ADMIN.Admin.SESSION_AUTO_ACKNOWLEDGE"/>, </li>
                   <li><see cref="F:TIBCO.EMS.ADMIN.Admin.SESSION_DUPS_OK_ACKNOWLEDGE"/>,</li>
                   <li><see cref="F:TIBCO.EMS.ADMIN.Admin.SESSION_CLIENT_ACKNOWLEDGE"/>. </li>
                </ul>
               </li>
            </ul>
            </remarks>
            <returns> consumer's session acknowledge mode </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.ToString">
            <summary>
            Returns string representation of this object.
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConsumerInfo.ID">
            <summary> Returns consumer ID. All consumers have a unique ID
            </summary>
            <returns> consumer ID.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConsumerInfo.SessionID">
            <summary>  Returns consumer's session ID or 0.
            If this is a durable topic subscriber which is
            currently not connected, this method returns 0,
             which is never a valid session ID
            </summary>
            <returns>consumer's session ID or 0.</returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConsumerInfo.ConnectionID">
            <summary> Return the consumer's connection ID or 0.
            If this is a durable topic subscriber which is currently not 
            connected, this method returns 0, which is never a valid connection 
            ID.
            </summary>
            <returns> consumer's connection ID or 0 if this is a disconnected
             durable topic subscriber.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConsumerInfo.CreateTime">
            <summary> Returns consumer's creation time in milliseconds.
            </summary>
            <returns> consumer's creation time in milliseconds.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConsumerInfo.Username">
            <summary> Returns consumer's user name or <c>null</c>.
            This method returns <c>null</c> for disconnected durable
            subscribers.
            </summary>
            <returns> consumer's user name or <c>null</c>.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConsumerInfo.DurableName">
            <summary> Returns the name of the consumer's durable subscription 
            or <c>null</c>
            Only durable topic consumers have durable name. This method returns
            <c>null</c> for non-durable topic subscribers and queue
            receivers.
            </summary>
            <returns> consumer's durable name or <c>null</c> if
            the consumer is not a durable topic consumer.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConsumerInfo.DestinationType">
            <summary>  Returns consumer's destination type.
            Returned value is either DestinationType.Queue or DestinationType.Topic.
            See <see cref="T:TIBCO.EMS.ADMIN.DestinationType"></see>.
            </summary>
            <returns> consumer's destination type.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConsumerInfo.DestinationName">
            <summary>  Returns consumer's destination name.
            </summary>
            <returns> consumer's destination name.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.GetPendingMessageCount">
            <summary>
            Returns number of pending messages for a topic consumer.
            Notice that only topic consumers have pending messages. For queue
            consumers the number of pending messages in the corresponding queue
            must be obtained via the queue itself.
            </summary>
            <returns> number of pending messages, possibly 0. Always
            returns 0 if this is a queue consumer.
            </returns>
            See <see cref="M:TIBCO.EMS.ADMIN.ConsumerInfo.GetPendingMessageSize"/> and
            <see cref="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetCurrentMsgCountSentByServer"/>.
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.GetPendingMessageSize">
            <summary>
            Returns combined size of pending messages for a topic consumer.
            </summary>
            <returns>cumulative size of pending messages, possibly 0.
            Always returns 0 if this is a queue consumer.
            </returns>
            See <see cref="M:TIBCO.EMS.ADMIN.ConsumerInfo.GetPendingMessageCount"/> and 
            <see cref="M:TIBCO.EMS.ADMIN.ConsumerInfo.Details.GetCurrentMsgSizeSentByServer"/>.
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.GetSelector">
            <summary>
            Returns consumer's selector or <c>null</c>.
            Notice that <c>ConsumerInfo</c> may or may not have the
            consumer's selector information depending on the way it was
            obtained, however method <see cref="M:TIBCO.EMS.ADMIN.ConsumerInfo.HasSelector"/> can be called
            in all cases to determine if consumer has a selector. 
            Method <see cref="M:TIBCO.EMS.ADMIN.Admin.GetConsumer(System.Int64)"/> always includes the selector
            text, if present, into returned consumer object. Methods returning
            multiple consumers include or do not include selector text depending on
            the flag.  See <see cref="F:TIBCO.EMS.ADMIN.Admin.GET_SELECTOR"/>.
            </summary>
            <returns> consumer's selector or <c>null</c>
            if this consumer has no selector.
            </returns>
            See <see cref="F:TIBCO.EMS.ADMIN.Admin.GET_SELECTOR"/>.
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.HasSelector">
            <summary>
            Returns <c>true</c> if this consumer has selector.
            Notice the selector itself may or may not be contained in the
            consumer object, depending on the way consumer information was
            obtained. However this method can be used in all cases to determine
            if a consumer has selector.
            Method <see cref="M:TIBCO.EMS.ADMIN.Admin.GetConsumer(System.Int64)"/> always includes the selector
            text, if present, into returned consumer object. Methods returning
            multiple consumers include or do not include selector text depending on
            the flag <see cref="F:TIBCO.EMS.ADMIN.Admin.GET_SELECTOR"/>.
            </summary>
            <returns> <c>true</c> if this consumer has selector, <c>false</c>
            otherwise.
            </returns>
            See <see cref="M:TIBCO.EMS.ADMIN.ConsumerInfo.GetSelector"/> and
            <see cref="F:TIBCO.EMS.ADMIN.Admin.GET_SELECTOR"/>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.isNolocal">
            <summary> Returns <c>true</c> if this is a nolocal topic 
            consumer.
            </summary>
            <returns><c>true</c> if this is a nolocal topic consumer.
            Always returns <c>false</c> if this is a queue consumer.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.isMulticast">
            <summary> Returns <c>true</c> if this is a multicast topic 
            consumer.
            </summary>
            <returns><c>true</c> if this is a multicast topic consumer.
            Always returns <c>false</c> if this is a queue consumer.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConsumerInfo.Statistics">
            <summary> Returns consumer's total statistics.
            </summary>
            <returns> consumer's total statistics.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConsumerInfo.DetailedStatistics">
            <summary> Returns consumer's detailed statistics.
            </summary>
            <remarks>
            This method may return <c>null</c> designating that no detailed
            statistics are available for this consumer. This can happen for
            any of the following reasons:
            <ul>
              <li> if consumer is not a wildcarded consumer;</li>
              <li> if detailed statistics are disabled in the server;</li>
              <li>if detailed statistics was not included into this consumer 
                  information object by the method of <see cref="T:TIBCO.EMS.ADMIN.Admin"/>
                  class used to obtain this object.</li>.
            </ul>
            </remarks>
            <returns>consumer's detailed statistics or <c>null</c> 
            if detailed statistics are not available.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.GetDetails">
            <summary>
            Returns additional details about this consumer or <c>null</c>.
            This method returns <c>null</c> if this object has been obtained
            via the <see cref="M:TIBCO.EMS.ADMIN.Admin.GetConsumersStatistics(System.Int64,System.String,TIBCO.EMS.ADMIN.DestinationInfo)"/> method. If
            this consumer was obtained via methods <see cref="M:TIBCO.EMS.ADMIN.Admin.GetConsumers"/>
            or <see cref="M:TIBCO.EMS.ADMIN.Admin.GetConsumer(System.Int64)"/>, this method returns non-<c>null</c>
            value containing detailed information about consumer.
            </summary>
            <returns> detailed information object or <c>null</c>
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.isConnected">
            <summary>
            Returns <c>true</c> if this consumer is connected to the server.
            Only durable topic subscribers may be in disconnected state.
            This method always returns <c>true</c> for queue receivers
            and non-durable topic consumers.
            </summary>
            <returns> <c>true</c> if this consumer connected to server,
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.isConnectionConsumer">
            <summary>
            Returns <c>true</c> if this is connection consumer.
            Notice that for disconnected durable topic subscribers
            this method returns <c>false</c> even if the durable has been
            originally created as connection consumer.
            </summary>
            <returns> <c>true</c> if this is a connection consumer,
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.isShared">
            <summary>
            Returns <c>true</c> if this is a shared topic consumer.
            The shared subscription name is <see cref="P:TIBCO.EMS.ADMIN.ConsumerInfo.SharedSubscriptionName"/>
            </summary>
            <returns> <c>true</c> if this topic consumer is on a shared
            subscription. Always returns <c>false</c> for queue consumers.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ConsumerInfo.SharedSubscriptionName">
            <summary>
            Returns the name of the shared subscription. For shared durable
            consumers, this is equivalent to the durable name.
            </summary>
            <returns> the name of the shared subscription, or <c>null</c>
            if the consumer is not a shared consumer or is a queue consumer.
            </returns>
            <para>Since EMS 8.0</para>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ConsumerInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.DbStoreInfo">
            <summary> Class representing information about server's database-based store.</summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DbStoreInfo.DriverName">
            <summary> Get the store's JDBC driver class name.</summary>
            <returns> driver name
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DbStoreInfo.URL">
            <summary> Get the store's JDBC URL.</summary>
            <returns> URL
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DbStoreInfo.UserName">
            <summary> Get the user name used to access the store.</summary>
            <returns> user name
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DbStoreInfo.DriverDialect">
            <summary> Get the store's Hibernate dialect.</summary>
            <returns> driver dialect
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.DbStoreInfo.#ctor(TIBCO.EMS.MapMessage)">
            <summary> Initializes a new instance of the DbStoreInfo
            with the specified map message
            </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.DbStoreInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.DestinationBridgeInfo">
            <summary> This class replaces the old BridgeInfo class to represent bridges between destinations.</summary>
            <remarks>DestinationBridgeInfo objects can be created and then passed to an Admin object to create or 
            update the bridge on the EMS server. DestinationBridgeInfo objects represent a bridge between a single source
            and a single target unlike the old BridgeInfo objects which had one source but could have multuple targets. 
            To modify a DestinationBridgeInfo object it is necessary to delete the old bridge and create a new one.
            </remarks> 
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationBridgeInfo.SourceType">
            <summary> Get the type of the destination that is the source for this bridge.</summary>
            <returns> the source's type, either DestinationType.Queue or DestinationType.Topic.
            <see cref="T:TIBCO.EMS.ADMIN.DestinationType">DestinationType</see>
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationBridgeInfo.SourceName">
            <summary> Get the name of the destination that is the source for this bridge.</summary>
            <returns> the source's name
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationBridgeInfo.TargetType">
            <summary> Get the type of the destination that is the target for this bridge.</summary>
            <returns> the target's type, either DestinationType.Queue or DestinationType.Topic.
            <see cref="T:TIBCO.EMS.ADMIN.DestinationType">DestinationType</see>
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationBridgeInfo.TargetName">
            <summary> Get the name of the destination that is the target for this bridge.</summary>
            <returns> the target's name
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationBridgeInfo.Selector">
            <summary> Get the selector used by this bridge.</summary>
            <remarks> Only messages that pass this selector will be bridged from the source
            destination to the target destination.
            </remarks>
            <returns> the selector or null if one is not set
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.DestinationBridgeInfo.#ctor(TIBCO.EMS.ADMIN.DestinationType,System.String,TIBCO.EMS.ADMIN.DestinationType,System.String,System.String)">
            <summary> Create a DestinationBridgeInfo object that will bridge between two destinations with an optional selector.
            </summary>
            <remarks>
            The bridge is not created on the server until the object is passed to Admin.createDestinationBridge().
            </remarks>
            <param name="sourceType">the type of the source destination, either DestinationType.Queue or 
            DestinationType.Topic. <see cref="T:TIBCO.EMS.ADMIN.DestinationType">DestinationType</see>
            </param>
            <param name="sourceName">the name of the source destination
            </param>
            <param name="targetType">the type of the target destination, either DestinationType.Queue or
            DestinationType.Topic. <see cref="T:TIBCO.EMS.ADMIN.DestinationType">DestinationType</see>
            </param>
            <param name="targetName">the name of the target destination
            </param>
            <param name="selector">the selector (can be null)
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.DestinationBridgeInfo.#ctor(TIBCO.EMS.MapMessage)">
            <summary>  </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.DestinationBridgeInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.DestinationType">
            <summary> Enum containing different destination types 
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.DestinationType.All">
            <summary> Type indicating a topic or queue.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.DestinationType.Queue">
            <summary> Type indicating a queue.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.DestinationType.Topic">
            <summary> Type indicating a topic.</summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.OverflowPolicyType">
            <summary> Enum contains different overflow policy types </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.OverflowPolicyType.Default">
            <summary> Default overflow policy.
            For queues this means that producers will receive an error if 
            they try to send a message to a queue that has reached either 
            its maxbytes limit or its maxmsgs limit. For topics, if a 
            subscriber has exceeded their maxbytes limit of their maxmsgs 
            limit then new messages will not be delivered to that subscriber
            but no error will be returned to the sender.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.OverflowPolicyType.DiscardOld">
            <summary> Policy is to discard old messages.
            If maxmsgs or maxbytes are exceeded for the queue or a
            topic's subscriber then when new messages arrive, old messages 
            will be discarded.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.OverflowPolicyType.RejectIncoming">
            <summary> Policy is to reject new messages.
            For queues, this behavior is the same as the default.
            For topics, the sender will receive an error if any of the 
            subscribers for the topics has exceeded either their 
            maxbytes limit or their maxmsgs limit.
            </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.RequestDestInfo">
            <summary> This enum is mainly for getting dests (either topic or queues)
            via the Admin.GetQueues(pattern, parameter) or 
            Admin.GetTopics(pattern, parameter) API's, Where the parameter can be
            one of the following.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.RequestDestInfo.DestGetStatic">
            <summary>
            Request info for static destinations only
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.RequestDestInfo.DestGetDynamic">
            <summary> 
            Request info for dynamic destinations only
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.RequestDestInfo.DestGetNoTemp">
            <summary>
            Request info for nontemporary destinations only
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.RequestDestInfo.DestGetAll">
            <summary>
            Request info for all destinations
            </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.DestinationInfo">
            <summary> This abstract class contains methods common to both QueueInfo
            and TopicInfo.
            </summary>
            <remarks> It represents a Topic or Queue known to the server.
            Destinations fall into three categories: static, dynamic, and temporary.
            Static destinations are explicitly configured and appear in the 
            configuration files on the server.
            Dynamic destinations are created dynamically by EMS clients or routed servers.
            Dynamic destinations cannot be modified.
            
            Temporary destinations are defined by the JMS specification.
            Temporary destinations cannot be modified.
            
            TopicInfo or QueueInfo objects received via Admin.GetTopic() or 
            Admin.GetQueue() methods do not contain the statistical data
            about the destination. In order to obtain statistical information about 
            destinations use Admin.GetTopicsStatistics() or Admin.GetQueuesStatistics().
            </remarks>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.DestinationInfo.PREFETCH_NONE">
            <summary> Indicates no messages will be prefetched into the EMS client.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.DestinationInfo.PREFETCH_DEFAULT">
            <summary> Indicates that the default number of messages will be prefetched into
            the EMS client.
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.JNDINames">
            <summary> Get the array of JNDI names for this destination.
            </summary>
            <returns> the array of JNDI names for this destination.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.Name">
            <summary> Get the name of this destination.
            </summary>
            <returns>  the name of this destination.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.Description">
            <summary> Get or set the description of this destination.
            </summary>
            <remarks> Deprecated as of release 4.4.0 because destinations
            never had a description property.
            </remarks>
            <returns>  the description of this destination.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.Failsafe">
            <summary> Get or set the failsafe property of this destination.
            </summary>
            <returns> true if this destination is failsafe.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.FailsafeInherited">
            <summary> Determine if the failsafe property was inherited from a parent destination or set directly for this destination.
            </summary>
            <returns>  true if the failsafe property was inherited.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.Secure">
            <summary> Get or set the secure property of this destination.
            </summary>
            <returns> true if this destination is secure.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.SecureInherited">
            <summary> Determine if the secure property was inherited from a parent destination or set directly for this destination.
            </summary>
            <returns>  true if the secure property was inherited.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.Global">
            <summary> Get or set the global property of this destination.
            </summary>
            <returns> true if this destination is global.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.GlobalInherited">
            <summary> Determine if the global property was inherited from a parent destination or set directly for this destination.
            </summary>
            <returns>  true if the global property was inherited.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.Prefetch">
            <summary> Get or set the number of messages prefetched by the EMS client from the server
            to improve efficiency.
            </summary>
            <returns>  the number of messages prefetched by the EMS client.
            </returns>
            <remarks>To use the default prefetch setting, prefetch should
            be set to PREFETCH_DEFAULT. To disable this feature so messages are not
            prefetched into the client set prefetch to PREFETCH_NONE.
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.PrefetchInherited">
            <summary> Determine if the prefetch setting for this queue is inherited from a parent queue.
            </summary>
            <returns>  true if the prefetch setting for this queue is inherited from a parent queue.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.ImportTransports">
            <summary> Get the names of the transports that this destination imports messages
            from.
            </summary>
            <returns> array of transport names.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.BridgeTargets">
            <summary> Get the target destinations that this destination bridges to.</summary>
            <returns> array of BridgeTarget objects.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.SenderName">
            <summary> Get or set sender_name property for this destination.
            </summary>
            <returns> true if sender_name property is set on this destionation, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.SenderNameInherited">
            <summary> Indicates whether or not the sender_name property is inherited.
            </summary>
            <returns> true if sender_name property is inherited, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.SenderNameEnforced">
            <summary> Get or set sender_name_enforced property.
            </summary>
            <returns> true if sender_name_enforced property is set on this destionation, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.SenderNameEnforcedInherited">
            <summary> Indicates whether or not the sender_name_enforced is inherited.
            </summary>
            <returns> true if sender_name_enforced property is inherited, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.MaxBytes">
            <summary> Get or set the maximum number of message bytes that the server will store for pending messages
            bound for this destination.
            </summary>
            <returns>  the maximum number of message bytes that the server will store for pending messages bound for this destination.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.MaxBytesInherited">
            <summary> Determine if the maxBytes property was inherited from a parent destination or set directly for this destination.
            </summary>
            <returns>  true if the maxBytes property was inherited.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.MaxMsgs">
            <summary> Get or set the maximum number of messages that the server will store for pending messages
            bound for this destination.
            </summary>
            <returns>  the maximum number of messages that the server will store for pending messages bound for this destination.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.MaxMsgsInherited">
            <summary> Determine if the maxMsgs property was inherited from a parent destination or set directly for this destination.
            </summary>
            <returns>  true if the maxMsgs property was inherited.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.OverflowPolicy">
            <summary> Get or set the overflow policy for this destination.
            </summary>
            <returns> the overflow policy for this destination. </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.OverflowPolicyInherited">
            <summary> Determine if the overflowPolicy property was inherited from a parent destination or set directly for this destination.
            </summary>
            <returns>  true if the overflowPolicy property was inherited.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.MsgTrace">
            <summary> Get or set the level of message tracing for this destination.</summary>
            <returns> a byte representing the level of message tracing for this
            destination.
            </returns>
            <exception cref="T:System.ArgumentException">if trace is invalid.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.MsgTraceInherited">
            <summary> Determine if the message trace property was inherited from a parent
            destination or set directly for this destination. 
            </summary>
            <returns>  true if the trace property was inherited, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.FlowControlMaxBytes">
            <summary> Get or set the volume of pending messages (in bytes) at which flow control is
            enabled for this destination.
            </summary>
            <returns>  the volume of pending messages (in bytes) that the server will 
            store for this destination before enabling flow control. A return value
            of zero indicates that flow control will never be enabled.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.FlowControlMaxBytesInherited">
            <summary> Determine if the flowControlMaxBytes property was inherited from a
            parent destination or set directly for this destination.
            </summary>
            <returns>  true if the flowControlMaxBytes property was inherited.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.Static">
            <summary> Determine if this destination is static.
            </summary>
            <remarks>  A destination is static if it
            is explicitly configured on the server.  Temporary destinations and
            destinations created by the client without being configured on the
            server are not static.  Only static destinations can be modified.
            Attempts to modify dynamic and temporary destinations will throw an
            exception.
            </remarks>
            <returns> true if this destination is static.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.Temporary">
            <summary> Determine if this destination is temporary.
            </summary>
            <returns> true if this destination is temporary.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.ConnectionID">
            <summary> Get a temporary destination's connection ID.
            </summary>
            <returns> the connection ID for a temporary destination.
            </returns>
            <para>Since EMS 8.2.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.PendingMessageCount">
            <summary> Get the total number of pending messages for this destination.
            </summary>
            <returns>  the total number of pending messages for this destination.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.PendingMessageSize">
            <summary> Get the total size for all pending messages for this destination.
            </summary>
            <returns>  the total size for all pending messages for this destination.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.PendingPersistentMessageCount">
            <summary> Get the total number of pending messages for this
            destination that were sent persistently.
            </summary>
            <returns>  the total number of pending messages for this
            destination that were sent persistently.
            </returns>
            since EMS 6.1
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.PendingPersistentMessageSize">
            <summary> Get the total size for all pending messages for this
            destination that were sent persistently.
            </summary>
            <returns>  the total number of pending messages for this
            destination that were sent persistently.
            </returns>
            since EMS 6.1
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.ConsumerCount">
            <summary> Get the number of consumers for this destination.
            </summary>
            <returns>  the number of consumers for this destination.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.InboundStatistics">
            <summary> Get inbound statistics for this destination.
            </summary>
            <remarks>Inbound statistics refers to all messages sent into
            this destination by EMS clients and routed server.
            </remarks>
            <returns> the inbound statistics for this destination
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.OutboundStatistics">
            <summary>Get outbound statistics for this destination.
            </summary>
            <remarks> Outbound statistics refers to all messages sent by the server
            to consumers on this destination and to other routed server.
            </remarks>
            <returns> the outbound statistics for this destination.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.ExpiryOverride">
            <summary> Get or set the expiry override for this destination.
            </summary>
            <remarks>
            When this property is set for a destination, and the server delivers a message to it, the server replaces the 
            producer's expiration value with this value.
            </remarks>
            <returns>  the expiry time in milliseconds.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.ExpiryOverrideInherited">
            <summary> Determine if the expiry override property was inherited from a parent destination or set directly for this destination.
            </summary>
            <returns>  true if the expiry override property was inherited.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.RedeliveryDelay">
            <summary> Get or set the redelivery delay for this queue.
            </summary>
            <remarks>
            When this property is set to a non-zero value for a destination,
            and the server needs to redeliver it to a consumer, the server
            delays resending the message for at least this amount of time.
            </remarks>
            <returns>  the redelivery delay in milliseconds.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.RedeliveryDelayInherited">
            <summary> Determine if the redelivery delay property was inherited
            from a parent queue or set directly for this queue.
            </summary>
            <returns>  true if the redelivery delay property was inherited.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.Store">
            <summary> Set or Get the store of this destination.
            </summary>
            <returns>  the store of this destination.
            </returns>
            <exception cref="T:System.ArgumentException">if value is null or empty
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.StoreInherited">
            <summary> Determine if the store property was inherited from a
            parent destination or set directly for this destination.
            </summary>
            <returns>  true if the store override property was inherited.
            </returns>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.DestinationInfo.MSG_TRACE_NONE">
            <summary> Indicates that messages will not be traced.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.DestinationInfo.MSG_TRACE_BASIC">
            <summary> Indicates that message sequence number and message ID will be traced.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.DestinationInfo.MSG_TRACE_DETAIL">
            <summary> Indicates that the message body will be traced in addition to the
            message sequnce number and message ID, .
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.ImportTransportsInherited">
            <summary> Determines if the list of transports this destination imports messages
            from was inherited from a parent destination or whether it was set on
            the destination directly.
            </summary>
            <returns> true if transport list inherited from parent, false otherwise.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.DestinationInfo.AddImportTransport(System.String)">
            <summary> Add a new import transport to the list of transports this destination
            imports messages from. 
            </summary>
            <remarks>If the current list of transports has been
            inherited from a parent destination then adding a transport will stop
            the inheritance and the inherited transports will all be removed 
            from the list and replaced with the new one. From then on
            ImportTransportsInherited will indicate that the transports are no
            longer inherited and future calls to addImportTransport will simply add 
            new transports to the list.
            </remarks>
            <param name="transportName">the name of the transport.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if transportName is not a legal
            transport name
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.DestinationInfo.RemoveImportTransport(System.String)">
            <summary> Remove an import transport from the list of transports this destination
            imports messages from. 
            </summary>
            <remarks>The removal of a transport from the list if the
            transports are inherited from a parent destination is not permitted and
            results in an exception.
            </remarks>
            <param name="transportName">the name of the transport.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException">if transportName is not a legal
            transport name
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if import transports is inherited
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DestinationInfo.BridgeTargetsInherited">
            <summary> Determines if the list of targets was inherited from a parent
            destination or whether it was set on the destination directly.
            </summary>
            <returns> true if targets inherited from parent, false otherwise.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.DestinationInfo.StatString">
            <summary> Helper method that generates the statistical information in the form of a string.
            </summary>
            <returns> String representation of statistical information.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.DetailedDestStat">
            <summary>This class represents detailed destination statistics about another object (Topic, Queue etc).
            </summary>
            <remarks>
            Detailed statistics are optionally collected by the server
            for wildcarded consumers, unidentified producers and routes.
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DetailedDestStat.DestinationType">
            <summary> Returns the type of the destination.
            </summary>
            <returns> destination type.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DetailedDestStat.DestinationName">
            <summary> Returns the name of the destination.
            </summary>
            <returns> destination name.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DetailedDestStat.StatData">
            <summary> Returns statistics if this is unidirectional
            destination statistics.
            </summary>
            <remarks>Unidirectional destinations
            are those collected for producers and consumers.
            </remarks>
            <returns> the statistics data.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DetailedDestStat.InboundStatData">
            <summary> Returns inbound statistics for this bidirectional
            destination.
            </summary>
            <remarks> Bidirectional destinations
            are those collected for routes.
            </remarks>
            <returns> the inbound statistics data.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DetailedDestStat.OutboundStatData">
            <summary> Returns outbound statistics for this bidirectional
            destination.
            </summary>
            <remarks> Bidirectional destinations
            are those collected for routes.
            </remarks>
            <returns> the outbound statistics data.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.DetailedDestStat.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.DetailedTransactionInfo">
            <summary> This class represents the a transaction as it is present on
             the EMS server. In addition to TransactionInfo it contains more detail.
             Especially about Messages that are part of this transaction. 
             </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.DetailedTransactionInfo.XAMessage">
            <summary>
            This class represents a Message that is involved in a transaction.
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DetailedTransactionInfo.XAMessage.DestinationName">
            <summary>
            Get the destination name to which this message was sent.
            </summary>
            <returns> the destination name to which this message was sent. 
            Null indicates the destination could not be found.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DetailedTransactionInfo.XAMessage.Type">
            <summary> Get the destination type to which this message was 
            sent.
            <see cref="F:TIBCO.EMS.ADMIN.DestinationType.All"/> indicates the destination 
            could not be found.
            </summary>
            <returns> the destination type to which this message was sent.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DetailedTransactionInfo.XAMessage.MessageID">
            <summary> Get the message ID of this message.
            </summary>
            <returns> the message ID of this message. 
            Null indicates the message ID could not be obtained 
            or was disabled.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.DetailedTransactionInfo.XAMessage.ToString">
            <summary>
             Gives a string representation of current objects data.
            </summary>
            <returns> String representation of current instance. </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.DetailedTransactionInfo.ConsumerMessage">
            <summary>
            This class represents a Message that is about to be consumed on 
            commit.
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DetailedTransactionInfo.ConsumerMessage.ConsumerID">
            <summary> Get the consumer ID of the Consumer consuming this 
            message.
            </summary>
            <returns> The consumer ID of the Consumer consuming this message
            or <code>0</code> if the consumer does not exist anymore. 
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.DetailedTransactionInfo.ConsumerMessage.ToString">
            <summary>
             Gives a string representation of current objects data.
            </summary>
            <returns> String representation of current instance. </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.DetailedTransactionInfo.ProducerMessage">
            <summary>
            This class represents a Message that is about to be produced on 
            commit.
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DetailedTransactionInfo.ProducerMessage.Timestamp">
            <summary> Get the timestamp, representing the time at which a 
            message was created.
            </summary>
            <returns> the time at which a message was created.
            <code>0</code> indicates the timestamp could not be obtained 
            or was disabled.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.DetailedTransactionInfo.ProducerMessage.ToString">
            <summary>
             Gives a string representation of current objects data.
            </summary>
            <returns> String representation of current instance. </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DetailedTransactionInfo.ProducerMessages">
            <summary> Get the list of messages that are about to be produced on 
            commit of this transaction.
            </summary>
            <returns> the list of messages that are about to be produced on 
            commit of this transaction. 
            Null indicates messages were not collected due to 
            transaction state.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DetailedTransactionInfo.ConsumerMessages">
            <summary> Get the list of messages that are about to be consumed on 
            commit of this transaction.
            </summary>
            <returns> the list of messages that are about to be consumed on 
            commit of this transaction. 
            Null indicates messages where not collected due to 
            transaction state.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DetailedTransactionInfo.RemainingTime">
            <summary> Get the remaining time before this transaction times out.
            </summary>
            <returns> Remaining time before timeout (in seconds). 
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DetailedTransactionInfo.HasTimeout">
            <summary> Returns whether or not this transaction has a timeout 
            associated with it.
            </summary> 
            <returns>true if a timeout exists
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.DetailedTransactionInfo.CreateFromMessage(TIBCO.EMS.MapMessage)">
            <summary>
            Creates the <see cref="T:TIBCO.EMS.ADMIN.DetailedTransactionInfo"/> from a 
            <see cref="T:TIBCO.EMS.MapMessage"/>.
            </summary>
            <param name="reply">Contains the response to the initial request 
            created in <see cref="M:TIBCO.EMS.ADMIN.DetailedTransactionInfo.Pack(TIBCO.EMS.MapMessage,TIBCO.EMS.ADMIN.TransactionInfo)"/></param>
            <returns>The detailed transaction information requested.</returns>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if something goes wrong</exception>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.DurableInfo">
            <summary> This class represents a durable subscription on the Tibjms server.
            </summary>
            <remarks>
            The durable subscription may be active
            and receiving messages or it may be dormant,
            with its messages being stored on the server until it is active again.
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DurableInfo.DurableName">
            <summary> Get the name of this durable.
            </summary>
            <returns> the name of this durable.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DurableInfo.TopicName">
            <summary> Get the topic name that this durable subscribes to.
            </summary>
            <returns> the name of the topic that the durable subsciption is on.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DurableInfo.ClientID">
            <summary> Get the client ID associated with this durable.
            </summary>
            <returns> the client ID associated with this durable (can be null).
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DurableInfo.UserName">
            <summary> Get the name of the authenticated user whose connection this durable
            subscriber is currently using.
            </summary>
            <returns> the name of the user using this durable subscription or null
            if there is no authenticated user or the durable is inactive.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DurableInfo.ConsumerID">
            <summary> Get the consumer ID associated with this durable.
            </summary>
            <returns> the consumer ID associated with this durable.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DurableInfo.Active">
            <summary> Determine if this durable is connected or dormant.
            This method has been replaced by <see cref="P:TIBCO.EMS.ADMIN.DurableInfo.Connected"/>
            and this method has been deprecated as of EMS 4.4
            </summary>
            <returns> true if the durable is actively connected to the server.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DurableInfo.Connected">
            <summary> Determine if this durable is connected or dormant.
            </summary>
            <returns> true if the durable is actively connected to the server.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DurableInfo.PendingMessageCount">
            <summary> Get the total number of messages waiting to be delivered to this durable
            subscription. This also includes the delivered message count.
            </summary>
            <returns> the number of messages waiting to be delivered to this durable
            subscription.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DurableInfo.DeliveredMessageCount">
            <summary> Get the number of messages that have been delivered to the
            durable subscription but have not yet been acknowledged.
            </summary>
            <returns> the number of messages delivered to this durable
            subscription.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DurableInfo.PendingMessageSize">
            <summary> Get the total size, in bytes, of messages waiting to be delivered to
            this durable subscription.
            </summary>
            <returns> the total size, in bytes, of messages waiting to be delivered
            to this durable subscription.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DurableInfo.NoLocalEnabled">
            <summary> Indicates whether or not the durable has opted not to receive "local"
            messages.
            </summary>
            <remarks>
            Local messages are those that have been sent on an application's
            own connection.
            </remarks>
            <returns> true if the noLocal attribute is set, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DurableInfo.Selector">
            <summary> Get the selector that this durable uses.</summary>
            <returns> the selector if one is set, null otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DurableInfo.Static">
            <summary> Determine if this durable is static or dynamic.
            </summary>
            <returns> true if the durable is statically configured on the server.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.DurableInfo.Shared">
            <summary>
            Returns <c>true</c> if this is a shared durable consumer.
            The shared subscription name is <see cref="P:TIBCO.EMS.ADMIN.DurableInfo.DurableName"/>
            </summary>
            <returns> <c>true</c> if this is a shared durable consumer.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.DurableInfo.ToString">
            <summary> Generate a string representation of this DurableInfo.
            </summary>
            <returns>  a string representation of this DurableInfo.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.FileStoreInfo">
            <summary> Class representing information about a server's file-based store.</summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.FileStoreInfo.NotInUseSpace">
            <summary> Get the amount of space in the store file that is not in use.</summary>
            <returns> the number of bytes that are free
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.FileStoreInfo.InUseSpace">
            <summary> Get the amount of space in the store file that is in use.</summary>
            <returns> the number of bytes that are in use
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.FileStoreInfo.Size">
            <summary> Get the total size of the store file.</summary>
            <returns> the size in bytes
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.FileStoreInfo.Percentage">
            <summary> Get the percentage fragmentation of the store file.
            </summary>
            <returns> the percentage (0 - 100) (-1 indicates not available)
            </returns>
            <para>Since Version 5.2
            </para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.FileStoreInfo.FileName">
            <summary> Get the file name.</summary>
            <returns> file name
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.FileStoreInfo.FileMinimum">
            <summary> Get the minimum size of the file (the file will pre-allocated at least to
            that size, if necessary).
            </summary>
            <returns> the size in bytes
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.FileStoreInfo.CRCEnabled">
            <summary> Indicates whether or not CRC checks are performed for stored data.</summary>
            <returns> true if CRC is enabled, false otherwise
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.FileStoreInfo.TruncationEnabled">
            <summary> Indicates whether or not the server will periodically check if there is
            unused space at the end of the file and, if so, truncate the file.
            </summary>
            <returns> true if truncation is enabled, false otherwise
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.FileStoreInfo.SynchronousWriteEnabled">
            <summary> Indicates whether or not the file is opened in synchronous write mode.</summary>
            <returns> true if synchronous mode is enabled, false otherwise
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.FileStoreInfo.WriteRate">
            <summary> Get the number of bytes written per second.</summary>
            <returns> the byte rate.
            </returns>
            since EMS 6.1
        </member>
        <member name="P:TIBCO.EMS.ADMIN.FileStoreInfo.DestinationDefrag">
            <summary> Get the maximum batch size for destination defragmentation.
            of queues in this store.</summary>
            <returns> the the maximum batch size for destination defrag.
            </returns>
            <para>Since EMS 6.1
            </para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.FileStoreInfo.SyncProgress">
            <summary> Get the current progress of the synchronization of this
            store file when the server is running in the EMS Appliance. </summary>
            <returns> the synchronization progress percentage as an integer
            between 0 and 100 or -1 either if no synchronization is ongoing
            or if requested from a server that is running outside the EMS Appliance
            </returns>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.FileStoreInfo.#ctor(TIBCO.EMS.MapMessage)">
            <summary> Initializes a new instance of the FileStoreInfo
            with the specified map message
            </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.FileStoreInfo.#ctor(TIBCO.EMS.MapMessage,TIBCO.EMS.ADMIN.Store)">
            \deprecated Use FileStoreInfo(MapMessage msg) instead.
        </member>
        <member name="M:TIBCO.EMS.ADMIN.FileStoreInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.FTLParams">
            <summary> This class represents FTL parameters.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.FTLParams.FTL_URL">
            <summary> String parameter for the FTL realm service URL.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.FTLParams.FTL_URL_SECONDARY">
            <summary> String parameter for the FTL realm server secondary URL (FTL 5.x only).</summary>
            \deprecated As of release 8.6.0
        </member>
        <member name="F:TIBCO.EMS.ADMIN.FTLParams.FTL_USERNAME">
            <summary> String parameter for the FTL username.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.FTLParams.FTL_LOG_LEVEL">
            <summary> String parameter for the FTL log level.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.FTLParams.FTL_DISCARD_POLICY">
            <summary> String parameter for the FTL discard policy.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.FTLParams.FTL_DISCARD_AMOUNT">
            <summary> String parameter for the FTL event queue discard amount.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.FTLParams.FTL_MAX_EVENTS">
            <summary> String parameter for the FTL event queue maximum event count.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.FTLParams.FTL_TRUSTFILE">
            <summary> String parameter for the FTL trust file path.</summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.FTLParams.#ctor(System.Collections.Hashtable)">
            <summary>  </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.FTLTransportInfo">
            <summary> This class represents TIBCO FTL transports that are configured on
            the EMS server.
            </summary>
            <remarks>
            FTL transports are mechanisms for importing and
            exporting messages between EMS and TIBCO FTL.
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.FTLTransportInfo.EndpointName">
            <summary> Get the name of the endpoint used by the transport.
            </summary>
            <returns>the name of the endpoint.
            </returns>
            since EMS 8.2
        </member>
        <member name="P:TIBCO.EMS.ADMIN.FTLTransportInfo.SubscriberName">
            <summary> Get the import subscriber name used by the transport.
            </summary>
            <returns>the name of the subscriber.
            </returns>
            since EMS 8.2
        </member>
        <member name="P:TIBCO.EMS.ADMIN.FTLTransportInfo.MatchString">
            <summary> Get the import match string used by the transport's content matcher.
            </summary>
            <returns>the match string of the transport.
            </returns>
            since EMS 8.2
        </member>
        <member name="P:TIBCO.EMS.ADMIN.FTLTransportInfo.ExportFormat">
            <summary> Get the name of the export format of the transport..
            </summary>
            <returns>the name of the export format.
            </returns>
            since EMS 8.2
        </member>
        <member name="P:TIBCO.EMS.ADMIN.FTLTransportInfo.Constants">
            <summary> Get an IDictionary&lt;String,String&gt; of the transport export constants.
            </summary>
            <remarks>
            The key is the name of the constant, and the value is a string
            representation of the constant value.
            </remarks>
            <returns>an IDictionary&lt;String,String&gt; of the transport export constants
            </returns>
            since EMS 8.2
        </member>
        <member name="M:TIBCO.EMS.ADMIN.FTLTransportInfo.ToString">
            <summary> Returns a String that represents the current Object.
            </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.GroupInfo">
            <summary> This class represents a group on the Tibjms server.
            </summary>
            <remarks>A group can contain users (but not other groups)
            and can be a principal in access control.
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.GroupInfo.Users">
            <summary> Get the array of users that belong to this group.
            </summary>
            <returns> the array of UserInfos that belong to this group.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.GroupInfo.#ctor(System.String,System.String)">
            <summary> Public constructor to create a GroupInfo.
            </summary>
            <remarks>The group will not be created on the server until
            the GroupInfo is passed to Admin.createGroup().
            </remarks>
            <param name="groupName">  the name of the new group.
            </param>
            <param name="description">the description for the new group.
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.GroupInfo.#ctor(System.String)">
            <summary> Public constructor to create a GroupInfo with no description.
            </summary>
            <remarks>The group will not be created on the server until
            the GroupInfo is passed to Admin.createGroup().
            </remarks>
            <param name="groupName">  the name of the new group.
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.GroupInfo.ToString">
            <summary> Generate a string representation of this GroupInfo.
            </summary>
            <returns>  a string representation of this GroupInfo.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.JACIInfo">
            <summary>
            This class represents a set of statistics about the JACI cache collected from the EMS server.
            </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.JACIInfo.getHits">
            
             <returns> The number of JACI results retrieved from the cache 
             since the last statistics reset.
             </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.JACIInfo.getMisses">
            
             <returns> The number of JACI requests that were not fulfilled 
             by the cache since the last statistics reset.
             </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.JACIInfo.getSize">
            
             <returns> The number of entries in the JACI cache.
             </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.JACIInfo.getStaleHits">
            
             <returns>return The number of times an entry in the JACI cache 
             </returns> was found to be out of date.
        </member>
        <member name="M:TIBCO.EMS.ADMIN.JACIInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.LDAPParams">
            <summary> This class represents LDAP parameters.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_URL">
            <summary> String parameter for LDAP server URL.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_principal">
            <summary> String parameter for LDAP admin username.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_USER_CLASS">
            <summary> String parameter for LDAP object class that stores users.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_USER_ATTRIBUTE">
            <summary> String parameter for the attribute on the user object class that holds
            the name of the user.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_USER_BASE_DN">
            <summary> String parameter for base DN of the LDAP tree that contains the users.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_USER_SCOPE">
            <summary> String parameter for the search scope of user objects.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_USER_NAME_FILTER">
            <summary> String parameter for LDAP search filter for finding a given user name.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_ALL_USERS_FILTER">
            <summary> String parameter for LDAP search filter for finding all users.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_GROUP_BASE_DN">
            <summary> String parameter for LDAP base DN of groups.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_GROUP_SCOPE">
            <summary> String parameter for LDAP search scope of groups.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_GROUP_NAME_FILTER">
            <summary> String parameter for LDAP search filter for finding a group with a
            given group name.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_ALL_GROUPS_FILTER">
            <summary> String parameter for LDAP search filter for finding all groups.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_STATIC_GROUP_CLASS">
            <summary> String paramter for LDAP object class that stores static groups.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_STATIC_GROUP_ATTRIBUTE">
            <summary> String parameter for the name of the attribute on the static group
            object class that holds the name of the group.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_STATIC_MEMBER_ATTRIBUTE">
            <summary> String parameter for attribute of an LDAP static group object that
            specifies the DN fo the members of the group.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_STATIC_MEMBER_FILTER">
            <summary> String parameter for LDAP search filter for finding static group
            members.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_DYNAMIC_GROUP_CLASS">
            <summary> String parameter for LDAP object class that stores dynamic groups.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_DYNAMIC_GROUP_ATTRIBUTE">
            <summary> String parameter for the name of the attibute on the dynamic group
            object class that holds the name of the group.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_DYNAMIC_MEM_URL_ATTRIBUTE">
            <summary> String parameter for the attribute of the dynamic LDAP group object
            that specifies the URLs of the members of the dynamic group.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_CACHE_ENABLED">
            <summary> Boolean parameter for enabling cahing of LDAP data.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_CACHE_TTL">
            <summary> Integer parameter for specifying the maximum time (in seconds) that
            cached LDAP data is retained before it is refreshed.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_CONNECTION_TYPE">
            <summary> String parameter for specifying the type of connection that the
            server uses to get LDAP data.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_TLS_CACERT_FILE">
            <summary> String parameter for trusted certificate that used to sign LDAP
            server's certificate.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_TLS_CACERT_DIR">
            <summary> String parameter for the path of trusted certificate chain that
            used to sign LDAP server's certificate.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_TLS_CLIENT_CERT">
            <summary> String parameter for specifying TIBCO EMS server's certificate when
            LDAP server requires client authentication.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_TLS_CLIENT_KEY">
            <summary> String parameter for specifying TIBCO EMS server's private key when
            LDAP server requires client authentication.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_TLS_CIPHERS">
            <summary> String parameter for specifying encryption ciphers used between TIBCO
            EMS server and LDAP server.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.LDAPParams.LDAP_TLS_RAND_FILE">
            <summary> String parameter for specifying file(s) containing random data used
            to seed the random number generator.
            </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.LDAPParams.#ctor(System.Collections.Hashtable)">
            <summary>  </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.MessengerUtil._SendRequestNoReply(TIBCO.EMS.ADMIN.RequestCode,TIBCO.EMS.MapMessage)">
            <summary> This is for shutdown.</summary>
            <param name="command">command
            </param>
            <param name="req">req
            @throws EMSException
            @throws AdminException
            </param>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.MStoreInfo">
            <summary> Class representing information about server's mstore-based store.</summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.MStoreInfo.NotInUseSpace">
            <summary> Get the amount of space in the store file that is not in use.</summary>
            <returns> the number of bytes that are free
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.MStoreInfo.InUseSpace">
            <summary> Get the amount of space in the store file that is in use.</summary>
            <returns> the number of bytes that are in use
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.MStoreInfo.Size">
            <summary> Get the total size of the store file.</summary>
            <returns> the size in bytes
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.MStoreInfo.FileName">
            <summary> Get the file name.</summary>
            <returns> file name
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.MStoreInfo.DiscardScanInterval">
            <summary> Get the interval for discard scan.</summary>
            <returns> period in milliseconds
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.MStoreInfo.DiscardScanBytes">
            <summary> Get the number of bytes examined at each discard scan interval.</summary>
            <returns> the amount in bytes
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.MStoreInfo.FirstScanFinished">
            <summary> Determine if the first scan is finished.</summary>
            <returns> true or false
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.MStoreInfo.TimeBoundCompactAvailable">
            <summary> Indicates whether or not this mstore can be compacted in
            a time-bound manner or through the mstore_truncate property.
            </summary>
            <returns> true if time-bound compact is available for this mstore, false otherwise
            </returns>
            <para>Since EMS 8.3.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.MStoreInfo.TruncationEnabled">
            <summary> Indicates whether or not the server will periodically check if there is
            unused space at the end of the file and, if so, truncate the file.
            </summary>
            <returns> true if truncation is enabled, false otherwise
            </returns>
            <para>Since EMS 8.3.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.MStoreInfo.SynchronousWriteEnabled">
            <summary> Indicates whether or not the file is opened in synchronous write mode.</summary>
            <returns> true if synchronous mode is enabled, false otherwise
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.MStoreInfo.WriteRate">
            <summary> Get the number of bytes written per second.</summary>
            <returns> the byte rate.
            </returns>
            since EMS 6.1
        </member>
        <member name="M:TIBCO.EMS.ADMIN.MStoreInfo.#ctor(TIBCO.EMS.MapMessage)">
            <summary> Initializes a new instance of the MStoreInfo
            with the specified map message
            </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.MStoreInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.Permissions">
            <summary> This class represents a set of permissions on destinations.
            </summary>
            <remarks>
            Permissions objects are used with ACLEntries to represent
            the user-level and optionally administrative permissions
            that a principal has on a destination.
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.Permissions.Empty">
            <summary> Indicates whether or not the Permissions object has any permissions set.
            </summary>
            <returns> true if this object has no permissions set, false otherwise.
            </returns>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Permissions.SEND">
            <summary> Send permission for a queue.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Permissions.SEND_PERMISSION">
            <summary> Send permission for a queue, deprecated.
            Use SEND permission.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Permissions.RECEIVE">
            <summary> Receive permission for a queue.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Permissions.RECEIVE_PERMISSION">
            <summary> Receive permission for a queue, deprecated.
            Use RECEIVE permission
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Permissions.BROWSE">
            <summary> Browse permission for a queue.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Permissions.BROWSE_PERMISSION">
            <summary> Browse permission for a queue, deprecated.
            Use BROWSE permission.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Permissions.PUBLISH">
            <summary> Publish permission for a topic.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Permissions.PUBLISH_PERMISSION">
            <summary> Publish permission for a topic, deprecated. Use PUBLISH permission.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Permissions.SUBSCRIBE">
            <summary> Subscribe permission for a topic.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Permissions.SUBSCRIBE_PERMISSION">
            <summary> Subscribe permission for a topic, deprecated.
            Use SUBSCRIBE permission.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Permissions.DURABLE">
            <summary> Permission to create a durable subscriber for a topic.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Permissions.DURABLE_PERMISSION">
            <summary> Permission to create a durable subscriber for a topic, deprecated.
            Use DURABLE permission.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Permissions.USE_DURABLE">
            <summary> Permission to use a durable subscription that already exists on
            the EMS server.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Permissions.VIEW">
            <summary> Administrative permission to view destination.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Permissions.CREATE">
            <summary> Administrative permission to create destination.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Permissions.DELETE">
            <summary> Administrative permission to delete destination.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Permissions.MODIFY">
            <summary> Administrative permission to modify destination.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.Permissions.PURGE">
            <summary> Administrative permission to purge destination.</summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Permissions.#ctor">
            <summary> Default constructor which creates empty set of permissions.</summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Permissions.#ctor(System.Int64)">
            <summary> Creates given set of permissions.
            </summary>
            <param name="perms">the permissions.
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Permissions.#ctor(System.Int64,System.Int64)">
            <summary> internal constructor to include inherited perms </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Permissions.HasPermission(System.Int64)">
            <summary> Determine if the given permission is present in these Permissions.
            </summary>
            <param name="perm">   permissions
            </param>
            <returns>  true    if given permissions are all present
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Permissions.SetPermission(System.Int64,System.Boolean)">
            <summary> Set or unset given permissions in this set of permissions.
            </summary>
            <param name="perm">   permissions
            </param>
            <param name="grant">  true if permissions should be added to the set, false if they should be removed
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Permissions.HasInheritedPermission(System.Int64)">
            <summary>
            Determine if the given permission is present in the Inherited Permissions.
            </summary>
            <param name="perm ">permissions</param>
            <returns>  true    if given permissions are all present in inherited 
            permissions</returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.Permissions.ToString">
            <summary> Generate a string representation of this Permissions.</summary>
            <returns>  a string representation of this Permissions.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.PrincipalInfo">
            <summary> This abstract class represents a user or group and contains methods common to both.</summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.PrincipalInfo.Name">
            <summary> Get the name of this user or group.
            </summary>
            <returns> the name of this user or group.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.PrincipalInfo.Description">
            <summary> Get or set the description of this user or group.
            </summary>
            <returns> the description of this user or group.
            </returns>
            <remarks>If the user or group is external then it is an error to 
            attempt to change its description.
            </remarks>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException">if the user or group is external.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.PrincipalInfo.External">
            <summary> Indicates whether or not this user or group is external.
            </summary>
            <remarks>Users and groups that are defined in an external repository 
            such as an LDAP server are external whereas those defined in users.conf 
            or groups.conf are not.  
            </remarks>
            <returns> true if the user or group is external, false otherwise.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.PrincipalInfo.ToString">
            <summary> Generate a string representation of this PrincipalInfo.
            </summary>
            <returns>  a string representation of this PrincipalInfo.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.ProducerInfo">
            <summary> A ProducerInfo object represents a message producer.</summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ProducerInfo.ID">
            <summary> Returns producer ID.</summary>
            <returns> the producer ID.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ProducerInfo.SessionID">
            <summary> Returns producer's session ID.</summary>
            <returns> the producer's session ID.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ProducerInfo.ConnectionID">
            <summary> Returns producer's connection ID.</summary>
            <returns> the producer's connection ID.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ProducerInfo.CreateTime">
            <summary> Returns producer's creation time in milliseconds.</summary>
            <returns> the producer's creation time in milliseconds.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ProducerInfo.Username">
            <summary> Returns producer's user name.</summary>
            <returns> the producer's user name.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ProducerInfo.DestinationType">
            <summary> Returns producer's destination type.</summary>
            <returns> the producer's destination type.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ProducerInfo.DestinationName">
            <summary> Returns producer's destination name.</summary>
            <returns> the producer's destination name or null if this is an unidentified producer.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ProducerInfo.Statistics">
            <summary> Returns producer's total statistics.</summary>
            <returns> the producer's total statistics.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ProducerInfo.DetailedStatistics">
            <summary> Returns producer's detailed statistics.</summary>
            <returns> the producer's detailed statistics or null
            if detailed statistics for producers is not enabled.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ProducerInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.QueueInfo">
            <summary> This class represents a message queue that is configured on the EMS server.</summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.QueueInfo.Exclusive">
            <summary> Determine if this queue is exclusive.
            </summary>
            <returns> true if this queue has the exclusive property set.
            </returns>
            <summary> Set the exclusive property for this queue.
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.QueueInfo.ExclusiveInherited">
            <summary> Determine if the exclusive property is inherited from a parent queue.
            </summary>
            <returns> true if the exclusive property is inherited from a parent queue.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.QueueInfo.Routed">
            <summary> Determine if this is a routed queue or not.
            </summary>
            <returns> true if the queue is routed.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.QueueInfo.RouteName">
            <summary> Get the name of this routed queue's route.
            </summary>
            <returns> the route name or null if the queue is not routed
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.QueueInfo.RouteConnected">
            <summary> Determine if the route for this queue is connected.
            </summary>
            <returns> true if the route for this queue is connected.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.QueueInfo.ReceiverCount">
            <summary> Get the number of active receivers on this queue.
            </summary>
            <returns> the number of active receivers on this queue.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.QueueInfo.MaxRedelivery">
            <summary> Get or set the maximum number of times the server will redeliver a given
            message from this queue to the queue receivers.
            </summary>
            <returns>  the maximum number of times a message will be redelivered.
            </returns>
            <remarks> A return value of zero indicates that the server will continue to deliver
            a message to the receivers until either the message is consumed or, if
            the message has a finite time to live, the message expires.
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.QueueInfo.MaxRedeliveryInherited">
            <summary> Determine if the maxRedelivery property was inheritied from a
            parent queue or set directly for this queue.
            </summary>
            <returns>  true if the maxRedelivery property was inherited.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.QueueInfo.DeliveredMessageCount">
            <summary> Get the total number of messages that have been delivered to consumer
            applications but have not yet been acknowledged.
            </summary>
            <returns>  the total number of delivered messages for this queue.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.QueueInfo.InTransitMessageCount">
            <summary> Get the total number of messages that have been delivered to
            the queue owner but have not yet been acknowledged.
            </summary>
            <returns>  the total number of in transit messages for this queue.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.QueueInfo.#ctor(System.String)">
            <summary> The public constructor creates a QueueInfo object with the given name.
            </summary>
            <remarks>
            The queue is not created on the server until the object is passed to Admin.CreateQueue().
            </remarks>
            <param name="queueName">  the name for the queue being created.
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.QueueInfo.ToString">
            <summary> Returns a String that represents the current Object.</summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.ZoneType">
            <summary>Enum contains different zone types </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ZoneType.MultiHop">
            <summary> A m-hop (Multi-Hop) zone is one in which topic messages can be
            routed across multiple hops and the routes between
            servers may not form a cycle.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ZoneType.OneHop">
            <summary> A 1-Hop zone is one in which messages can be routed at most 1
            hop away.  A typical 1-Hop zone is one in which every server
            has a route to every other
            server in the zone.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ZoneType.Unknown">
            <summary> A zone of unknown type indicates some kind of error.</summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.RouteInfo">
            <summary> An object of this class represents the configuration and
            optionally statistical data about the routed server.
            </summary>
            <remarks>When this object is received via the call to method Admin.GetRoute(),
            it does not contain statistical information about the route. Only
            objects returned by method Admin.GetRouteStatistics(name) return
            RouteInfo objects including all statistical data.
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteInfo.Configured">
            <summary> Indicates whether or not the route is defined in the server configuration.
            </summary>
            <remarks>
            Note that if the route is not configured, its parameters can not be changed.
            </remarks>
            <returns> true if this route is defined in the server configuration and, false
            if this route is not defined, but is present via a remote server connecting
            to this server.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteInfo.Connected">
            <summary> Indicates whether or not the route is connected.
            </summary>
            <returns> true if this route is connected and false if this route is defined
            in the server configuration but is not connected.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteInfo.Stalled">
            <summary> Indicates whether or not this route has stalled destinations.
            </summary>
            <remarks>
            Notice this flag is set if any number of destinations are stalled.
            It does not indicate if all destinations sent by this route are stalled.
            </remarks>
            <returns> true if this route has any stalled destination, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteInfo.ConnectionID">
            <summary> Returns connection ID of this route or 0 if route is not connected.</summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteInfo.BacklogCount">
            <summary> Get the route's message backlog count.
            </summary>
            <returns> the number of messages in the route's backlog
            </returns>
            since EMS 5.0
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteInfo.BacklogSize">
            <summary> Get the route's message backlog size.
            </summary>
            <returns> the size of all messages in the route's backlog
            </returns>
            since EMS 5.0
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteInfo.URL">
            <summary> Get or set the URL of the remote server in this route.
            </summary>
            <returns>  the URL of the remote server in this route.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteInfo.Name">
            <summary> Get or set the name of the remote server in this route.
            </summary>
            <remarks> The name of existing route can not be changed. This
            method is used to create the new route.
            </remarks>
            <returns>  the name of the remote server in this route.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteInfo.TopicPrefetch">
            <summary> Get or set the prefetch that overrides individual topic prefetches
            </summary>
            <returns>  the topic prefetch of this route
            </returns>
            since EMS 8.1
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteInfo.SSLParams">
            <summary> Get the SSL parameters for the connection to the remote server.
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteInfo.ZoneName">
            <summary> Get the name of the zone this route is in.
            </summary>
            <returns>  the name of the zone this route is in. For pre-3.2 servers this will
            be <see cref="F:TIBCO.EMS.ADMIN.RouteInfo.DEFAULT_DAG_ZONE"></see>.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteInfo.ZoneType">
            <summary> Get the type of zone this route is in.
            </summary>
            <returns>  the type of zone this route is in.
            <see cref="T:TIBCO.EMS.ADMIN.ZoneType"></see>.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteInfo.InboundStatistics">
            <summary> Returns cumulative inbound statistics for all destinations
            on this route.
            </summary>
            <remarks>Inbound statistics refers to all messages this
            route sends to the connected server.
            </remarks>
            <returns> the cumulative inbound statistics for all destinations
            on this route.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteInfo.OutboundStatistics">
            <summary> Returns cumulative outbound statistics for all destinations
            on this route.
            </summary>
            <remarks>Outbound data refers to all messages the server
            sends to this route.
            </remarks>
            <returns> cumulative outbound statistics for all destinations
            on this route.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteInfo.DetailedStatistics">
            <summary> Returns detailed destination statistics for all destinations
            being sent to or received from this route.
            </summary>
            <returns> detailed destination statistics for all destinations
            being sent to or received from this route.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteInfo.IncomingSelectors">
            <summary> Get the selectors that will be run on messages received by this route.
            </summary>
            <remarks>
            Only messages that match at least one of the selectors will be received
            by the route.
            </remarks>
            <returns>  an array of RouteSelector objects.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteInfo.OutgoingSelectors">
            <summary> Get the selectors that will be run on messages before they are sent to
            this route.
            </summary>
            <remarks>Only messages that match at least one of the selectors will
            be forwarded by the route.
            </remarks>
            <returns>  an array of RouteSelector objects.
            </returns>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.RouteInfo.DEFAULT_DAG_ZONE">
            <summary> The name of the zone that routes are members of if no zone name is
            specified. This zone is a DAG zone.
            </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.RouteInfo.#ctor(System.String,System.String,System.Collections.Hashtable)">
            <summary> The public constructor used to create a RouteInfo object.
            </summary>
            <remarks>
            The route does not exist on the server until this RouteInfo
            is passed to Admin.CreateRoute(). The route created will be a
            member of the default DAG zone (<see cref="F:TIBCO.EMS.ADMIN.RouteInfo.DEFAULT_DAG_ZONE"></see>).
            </remarks>
            <param name="name">   the name of the remote server that this route is to.
            </param>
            <param name="url">    the URL of the remote server.
            </param>
            <param name="sslParams"> the SSL parameters for the connection to the remote server (can be null).
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.RouteInfo.#ctor(System.String,System.String,System.Collections.Hashtable,System.String,TIBCO.EMS.ADMIN.ZoneType)">
            <summary> The public constructor used to create a RouteInfo object that is part of
            a specific zone.
            </summary>
            <remarks>
            The route does not exist on the server until this RouteInfo
            is passed to Admin.CreateRoute().
            </remarks>
            <param name="name">   the name of the remote server that this route is to.
            </param>
            <param name="url">    the URL of the remote server.
            </param>
            <param name="sslParams"> the SSL parameters for the connection to the remote server (can be null).
            </param>
            <param name="zoneName">   the name of the route's zone.
            </param>
            <param name="zoneType">   the type of routing in the zone, either TIBCO.EMS.ADMIN.ZoneType.MultiHop or
            TIBCO.EMS.ADMIN.ZoneType.OneHop.  <see cref="T:TIBCO.EMS.ADMIN.ZoneType"></see>
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.RouteInfo.#ctor(System.String,System.String,System.Collections.Hashtable,System.String,TIBCO.EMS.ADMIN.ZoneType,System.Int32)">
            <summary> The public constructor used to create a RouteInfo object that is part of
            a specific zone.
            </summary>
            <remarks>
            The route does not exist on the server until this RouteInfo
            is passed to Admin.CreateRoute().
            </remarks>
            <param name="name">   the name of the remote server that this route is to.
            </param>
            <param name="url">    the URL of the remote server.
            </param>
            <param name="sslParams"> the SSL parameters for the connection to the remote server (can be null).
            </param>
            <param name="zoneName">   the name of the route's zone.
            </param>
            <param name="zoneType">   the type of routing in the zone, either ZoneType.MultiHop or ZoneType.OneHop.
            <see cref="T:TIBCO.EMS.ADMIN.ZoneType"></see>
            </param>
            <param name="topicPrefetch">   the topic prefetch of this route
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.RouteInfo.AddIncomingSelector(TIBCO.EMS.ADMIN.RouteSelector)">
            <summary> Add a new incoming selector to the route.
            </summary>
            <remarks> If there is already a selector
            on that topic, the old one will be replaced by the new one.
            </remarks>
            <param name="rs"> the new selector.
            </param>
            <exception cref="T:System.ArgumentException"> if rs is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.RouteInfo.RemoveIncomingSelector(System.String)">
            <summary> Remove the incoming selector on a given topic.</summary>
            <param name="topic">  the topic to remove the selector from.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if topic is not a valid topic.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.RouteInfo.UpdateIncomingSelector(TIBCO.EMS.ADMIN.RouteSelector)">
            <summary> Replace the current incoming selector on a given topic with a new one.</summary>
            <param name="rs"> the updated selector.
            </param>
            <exception cref="T:System.ArgumentException">if rs is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.RouteInfo.AddOutgoingSelector(TIBCO.EMS.ADMIN.RouteSelector)">
            <summary> Add a new outgoing selector to the route.
            </summary>
            <remarks> If there is already a selector
            on that topic, the old one will be replaced by the new one.
            </remarks>
            <param name="rs"> the new selector.
            </param>
            <exception cref="T:System.ArgumentException"> if rs is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.RouteInfo.RemoveOutgoingSelector(System.String)">
            <summary> Remove the outgoing selector on a given topic.</summary>
            <param name="topic">  the topic to remove the selector from.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if topic is not a valid topic.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.RouteInfo.UpdateOutgoingSelector(TIBCO.EMS.ADMIN.RouteSelector)">
            <summary> Replace the current outgoing selector on a given topic with a new one.</summary>
            <param name="rs"> the updated selector.
            </param>
            <exception cref="T:System.ArgumentException"> if rs is null.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.RouteInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.RouteInfo.StatString">
            <summary> Helper method to generate the statistical information in string form.
            </summary>
            <returns> a String representation of statistical information.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.RouteSelector">
            <summary> This class represents a selector applied to incoming or outgoing messages
            on a route.
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteSelector.Topic">
            <summary> Get the topic for this selector.</summary>
            <returns>  the topic for the selector.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RouteSelector.Selector">
            <summary> Get or set the selector that messages need to match in order for them to pass
            through the selector.
            </summary>
            <returns>  the selector.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.RouteSelector.#ctor(System.String,System.String)">
            <summary> Create a selector for messages on a given topic.</summary>
            <param name="topic">      the topic on which the selector will be run.
            </param>
            <param name="selector">   the selector that messages need to match in order
            that they be sent to or received from the route.
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.RouteSelector.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.RVCMTransportInfo">
            <summary> This class represents TIBCO Rendezvous Certified Messaging transports that
            are configured on the EMS server.
            </summary>
            <remarks>TIBCO Rendezvous Certified Messaging
            transports are mechanisms for importing and exporting messages between EMS
            and TIBCO Rendezvous Certified Messaging clients.
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RVCMTransportInfo.RVTransportName">
            <summary> Get the name of this transport's TIBCO Rendezvous transport.
            </summary>
            <remarks> All TIBCO Rendezvous Certified Messaging transports must have an
            underlying TIBCO Rendezvous transport and this method returns the name of 
            that transport.
            </remarks>
            <returns>  the name of the transport's Rendezvous transport.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RVCMTransportInfo.CMName">
            <summary> Get the certified messaging name used by this transport for
            TIBCO Rendezvous Certified Messaging.
            </summary>
            <returns>the certified messaging name used by this transport.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RVCMTransportInfo.Ledger">
            <summary> Get the name of the ledger file used by this transport for
            TIBCO Rendezvous Certified Messaging.
            </summary>
            <returns>  the name of the ledger file or null if the ledger file is not
            set and Rendezvous certified messages are only stored in memory.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RVCMTransportInfo.SyncLedger">
            <summary> Indicates whether or not the EMS server is to use a synchronous ledger
            file when participating in TIBCO Rendezvous Certified Messaging on this 
            transport.
            </summary>
            <remarks>
            If the ledger is synchronous the EMS server will perform synchronous
            updates to the TIBCO Rendezvous Certified Messaging ledger file. This
            can slow the performance of importing certified messages but reduces
            the risk of duplicate delivery following a server failure.
            </remarks>
            <returns> true if the transport uses synchronous ledger, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RVCMTransportInfo.RequestOld">
            <summary> Indicates whether or not TIBCO Rendezvous Certified Messages that were
            sent by certified senders while the EMS server was not running should be
            requested when the EMS server starts up.
            </summary>
            <returns> true if old messages are to be requested, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RVCMTransportInfo.DefaultTimeLimit">
            <summary> Get the default time-to-live for TIBCO Rendezvous Certified Messages
            sent on this transport by the server to TIBCO Rendezvous clients.
            </summary>
            <returns> the time-to-live in seconds, or 0 if messages don't expire.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RVCMTransportInfo.ExlicitConfigOnly">
            <summary> Indicates whether or not only TIBCO Rendezvous Certified listeners that 
            have been explicitly configured are allowed to receive messages
            exported by the EMS server.
            </summary>
            <remarks>Note that if this property is set to true
            unconfigured listeners will still receive the exported messages but
            message delivery will be reliable not certified.
            </remarks>
            <returns> true if only configured listeners are to receive certified
            messages, false otherwise.
            </returns>
            \deprecated As of release 6.0. Use the correctly spelled method ExplicitConfigOnly.
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RVCMTransportInfo.ExplicitConfigOnly">
            <summary> Indicates whether or not only TIBCO Rendezvous Certified listeners that 
            have been explicitly configured are allowed to receive messages
            exported by the EMS server.
            </summary>
            <remarks>Note that if this property is set to true
            unconfigured listeners will still receive the exported messages but
            message delivery will be reliable not certified.
            </remarks>
            <returns> true if only configured listeners are to receive certified
            messages, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RVCMTransportInfo.Policy">
            <summary> Returns the discard policy of the TIBCO Rendezvous internal queue 
            used by this transport.
            </summary>
            <remarks>
            Since EMS 5.0
            </remarks>       
            <returns>
            the RV Queue policy for this transport
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.RVCMTransportInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.PolicyType">
            <summary> Defines possible values for discard policy</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.PolicyType.TIBRVQUEUE_DISCARD_NONE">
            <summary> Never discard events; use this policy when a queue has no limit on the number of events it can contain.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.PolicyType.TIBRVQUEUE_DISCARD_FIRST">
            <summary> Discard the first event in the queue (that is, the oldest event in the queue, which would otherwise be the next event to dispatch).</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.PolicyType.TIBRVQUEUE_DISCARD_LAST">
            <summary> Discard the last event in the queue (that is, the youngest event in the queue).</summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.RVQueuePolicy">
            <summary> This class represents the discard policy of the TIBCO Rendezvous queues used internally 
            by the TIBCO EMS Server when importing messages from TIBCO Rendezvous. 
            </summary>
            <remarks>
            <para>
            Each transport uses a TIBCO RV queue, and therefore a discard policy can be
            defined per transport. The default policy, if omitted, is <see cref="F:TIBCO.EMS.ADMIN.PolicyType.TIBRVQUEUE_DISCARD_NONE"/>,
            which means that no message is ever discarded.
            </para>
            <para>
            Note that in a fast producer situation, this can lead to a rapid TIBCO EMS process memory growth since the
            internal TIBCO RV queue may hold a lot of RV messages waiting to be processed as EMS messages.
            Specifying a discard policy other than <c>TIBRVQUEUE_DISCARD_NONE</c> causes excess TIBCO RV messages to be
            discarded, and therefore not imported by the TIBCO EMS Server, but help prevents unbound memory growth.
            </para>
            Since EMS 5.0    
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RVQueuePolicy.Policy">
            <summary>
            Returns the policy of this discard policy.
            </summary>
            <returns>
            the policy of this discard policy
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RVQueuePolicy.PolicyName">
            <summary>
            Returns a string representation of the discard policy.
            </summary>
            <returns>
            the name of the discard policy
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RVQueuePolicy.MaxEvents">
            <summary>
            The maximum number of messages that the TIBCO RV queue can hold before starting to discard messages.
            </summary>
            <returns>
            the number of events (messages) that the RV Queue can hold, or 0 if policy is <see cref="F:TIBCO.EMS.ADMIN.PolicyType.TIBRVQUEUE_DISCARD_NONE"/>
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RVQueuePolicy.DiscardAmount">
            <summary>
            When the TIBCO RV queue exceeds its maximum message limit, discard a block of messages. This value is the number of
            messages to discard.
            </summary>
            <returns>
            the number of messages to discard when the RV queue exceeds its maximum event limit, or 0 if policy is
            <see cref="F:TIBCO.EMS.ADMIN.PolicyType.TIBRVQUEUE_DISCARD_NONE"/>
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.RVQueuePolicy.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.RVTransportInfo">
            <summary> This class represents TIBCO Rendezvous transports that are configured on
            the EMS server.
            </summary>
            <remarks>
            Rendezvous transports are mechanisms for importing and
            exporting messages between EMS and TIBCO Rendezvous.
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RVTransportInfo.Service">
            <summary> Get the name of the transport's TIBCO Rendezvous service parameter.
            </summary>
            <returns>  the transport's service.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RVTransportInfo.Network">
            <summary> Get the name of the transport's TIBCO Rendezvous network parameter.
            </summary>
            <returns>  the transport's network.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RVTransportInfo.Daemon">
            <summary> Get the name of the transport's TIBCO Rendezvous daemon parameter.
            </summary>
            <returns>  the transport's daemon.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.RVTransportInfo.Policy">
            <summary> Returns the discard policy of the TIBCO Rendezvous internal queue 
            used by this transport.
            </summary>
            <remarks>
            Since EMS 5.0
            </remarks>       
            <returns>
            the RV Queue policy for this transport
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.RVTransportInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.ClientTraceTarget">
            <summary> Defines possible values for client tracing
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ClientTraceTarget.None">
            <summary> No tracing.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ClientTraceTarget.Stdout">
            <summary> Tracing directed to stdout.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ClientTraceTarget.Stderr">
            <summary> Tracing directed stderr.</summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.ClientTraceFilter">
            <summary> Defines possible values for client trace filter,
            namely, User, ClientID and ConnID.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ClientTraceFilter.None">
            <summary> No filtering.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ClientTraceFilter.User">
            <summary> Only show traced for a given user name.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ClientTraceFilter.ClientID">
            <summary> Only show traced for a given client id.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ClientTraceFilter.ConnID">
            <summary> Only show traced for a given connection id.</summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.State">
            <summary> Enum that contains values that represent the state of 
            server (i.e standby or active)
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.State.FTStandby">
            <summary> Server is fault tolerant standby</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.State.Active">
            <summary> Server is active</summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.AuthenticationLocation">
            <summary> Enum that contains values of authentication location
            currently used by the server.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AuthenticationLocation.ldap">
            <summary>
            Obtain user authentication information from an LDAP directory
            server. 
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AuthenticationLocation.system">
            <summary>
            Obtain user authentication information from the UNIX system 
            password file (available only when server is running on a UNIX 
            system).
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AuthenticationLocation.local">
            <summary>
            Obtain user authentication information from the local TIBCO
            Enterprise Message Service server's user configuration.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.AuthenticationLocation.jaas">
            <summary>
            Obtain user authentication information from a JAAS module 
            </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.ConfigurationMode">
            <summary> Enum that contains values of configuration modes
            the server may be running.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ConfigurationMode.Conf">
            <summary>
            Server is using *.conf format configuration files. 
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ConfigurationMode.XML">
            <summary>
            Server is using a json or an xml based configuration file (deprecated).
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ConfigurationMode.JSON">
            <summary>
            Server is using a json based configuration file. 
            </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.ServerInfo">
            <summary> This class represents configuration parameters for a TIBCO Enterprise
            Message Service server.
            </summary>
            <remarks>
            Changes made to this object will not take effect on the server until the changes
            are saved with a call to Admin.UpdateServer().
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ConfigFile">
            <summary> Get the name and location of the main configuration file.</summary>
            <returns> the name (including full path) of the main configuration file.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.UsersFile">
            <summary> Get the name and location of the configuration file containing
            the definitions of users.
            </summary>
            <returns> the name (including full path) of the users file.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.GroupsFile">
            <summary> Get the name and location of the configuration file containing
            the definitions of groups.
            </summary>
            <returns> the name (including full path) of the groups file.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.TopicsFile">
            <summary> Get the name and location of the configuration file containing
            the definitions of topics.
            </summary>
            <returns> the name (including full path) of the topics file.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.QueuesFile">
            <summary> Get the name and location of the configuration file containing
            the definitions of queues.
            </summary>
            <returns> the name (including full path) of the queues file.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ACLsFile">
            <summary> Get the name and location of the configuration file containing
            the definitions of acls.
            </summary>
            <returns> the name (including full path) of the acls file.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.FactoriesFile">
            <summary> Get the name and location of the configuration file containing
            the definitions of connection factories.
            </summary>
            <returns> the name (including full path) of the factories file.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.RoutesFile">
            <summary> Get the name and location of the configuration file containing
            the definitions of routes.
            </summary>
            <returns> the name (including full path) of the routes file.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.BridgesFile">
            <summary> Get the name and location of the configuration file containing
            the definitions of bridges.
            </summary>
            <returns> the name (including full path) of the bridges file.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.TransportsFile">
            <summary> Get the name and location of the configuration file containing
            the definitions of external transports.
            </summary>
            <returns> the name (including full path) of the transports file.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.TibrvcmFile">
            <summary> Get the name and location of the configuration file containing
            the definitions of pre-configured TIBCO Rendezvous Certified Messaging
            listeners.
            </summary>
            <returns> the name (including full path) of the tibrvcm file.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.DurablesFile">
            <summary> Get the name and location of the configuration file containing
            the definitions of pre-configured durable subscribers.
            </summary>
            <returns> the name (including full path) of the durables file.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ChannelsFile">
            <summary> Get the name and location of the configuration file containing
            the definitions of pre-configured multicast channels.
            </summary>
            <returns> the name (including full path) of the channels file.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.StoresFile">
            <summary> Get the name and location of the configuration file containing
            the definitions of pre-configured stores.
            </summary>
            <returns> the name (including full path) of the stores file.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.RouteRecoverInterval">
            <summary>  Get route recover interval in milliseconds.</summary>
            <returns> the route recover interval in milliseconds.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.RouteRecoverCount">
            <summary>  Get route recover message count.</summary>
            <returns> the route recover message count.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ServerRateInterval">
            <summary>  Get or set the server statistics rate interval in milliseconds.</summary>
            <returns> the server statistics rate interval in milliseconds.
            </returns>
            <remarks>The value is rounded to nearest second. Serverwide statistics are always collected.
            </remarks>
            <exception cref="T:System.ArgumentException">if value is less than 1 second.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.RateInterval">
            <summary>  Get or set the statistics rate interval in milliseconds.</summary>
            <returns> the statistics rate interval in milliseconds.
            </returns>
            <remarks> The value is rounded to nearest second.
            If the value is set to 0, this disables collecting the message rate for
            producers, consumers and destinations.
            </remarks>
            <exception cref="T:System.ArgumentException"> if value is negative.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.StatisticsCleanupInterval">
            <summary>  Get or set the statistics cleanup interval in milliseconds.</summary>
            <returns> the statistics cleanup interval in milliseconds.
            </returns>
            <remarks> Value is rounded to nearest second.
            If the interval is set to 0, it disables removing inactive destinations
            from the detailed statistics collected for producers, consumers and
            destinations.
            </remarks>
            <exception cref="T:System.ArgumentException">if value is negative.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.StatisticsEnabled">
            <summary> Get or set whether or not statistics are enabled.
            </summary>
            <returns> true if statistics are enabled, false otherwise.
            </returns>
            <remarks>Statistics are gathered for each producer, consumer,
            routed server and other. This parameter has no effect on the serverwide
            rates gathering, which is performed regardless of this parameter.
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.DetailedStatistics">
            <summary>  Get or set the detailed statistics flags.</summary>
            <returns> the detailed statistics flags.
            </returns>
            <remarks>any combination of DETAIL_PRODUCERS, DETAIL_CONSUMERS,
            DETAIL_ROUTES and DETAIL_CHANNELS flags combined by the bitwise 
            OR operator (|). If value is 0, gathering of all detailed 
            statistics are disabled.
            </remarks>
            <exception cref="T:System.ArgumentException"> if value contains invalid flags.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.MaxStatisticsMemory">
            <summary> Get or set the maximum amount of memory that will be allocated to collecting
            statistics.
            </summary>
            <returns> the maximum statistics memory in bytes.
            </returns>
            <remarks>The maximum must at least 64KB.
            The maximum number of bytes of memory that will be allocated
            to gathering detailed statistics. If bytes is 0 then this indicates no
            limit.
            </remarks>
            <exception cref="T:System.ArgumentException">if bytes is less than 64KB.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.MulticastStatisticsInterval">
            <summary>  Get or set the multicast statistics interval in milliseconds.</summary>
            <returns> the multicast statistics interval in milliseconds.
            </returns>
            <remarks> Value is rounded to nearest second.
            If the interval is set to 0, it disables collecting multicast 
            statistics.
            </remarks>
            <exception cref="T:System.ArgumentException">if value is negative.
            </exception>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.XADefaultTimeout">
            <summary> Get the default timeout for XA transactions in seconds.</summary>
            <returns> the default timeout for XA transactions in seconds.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ServerName">
            <summary> Get the name of the server.</summary>
            <returns> the name of the server.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.Appliance">
            <summary> Gets whether or not this server instance is running in
            an appliance.
            </summary>
            <returns> true if this server instance is running in an appliance,
            false otherwise.
            </returns>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.LogFileName">
            <summary> Get the log file name.</summary>
            <returns> the log file name or null if log file not set.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.SecondaryLogFileName">
            <summary> Get the secondary log file name.</summary>
            <returns> the secondary log file name or null if log file not set.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.LogFileMaxSize">
            <summary> Get the maximum allowed size of the log file.</summary>
            <returns> the maximum allowed size of the log file in bytes.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.LogFileMaxCount">
            <summary> Get the maximum allowed number of log files.</summary>
            <returns> the maximum allowed number of log files.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ListenPorts">
            <summary> Get the server's listener ports.</summary>
            <returns> an array of server listen ports.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.Hostname">
            <summary> Get the hostname of the connected server.
            </summary>
            <returns> the hostname of the connected server.
            </returns>
            <para>Since EMS 8.4.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.BackupName">
            <summary> Get the server name and host name of the backup server connected to this
            server.
            </summary>
            <returns> the server name and host name of the backup server in the form
            <b>server-name@host-name</b>. Returns null if this is not an active
            server or there is no backup server connected to this server.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ProcessId">
            <summary> Get the current process id of the server.</summary>
            <returns> the server process id.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.State">
            <summary> Get the current state of the server.
            </summary>
            <returns> the server state as an enum.
            </returns>
            <remarks> Obsolete as of EMS 8.1.0 as it will not return state
            values that pertain to the EMS Appliance fault tolerance mode
            introduced with this release.
            </remarks>
            \deprecated As of 8.1.0. Use either StateInfo.StateObj.StateVal or ServerInfo.StateObj.StateVal instead.
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.StateObj">
            <summary> Get the current state of the server.
            </summary>
            <returns> the State object representing the server's state.
            </returns>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.RuntimeModulePath">
            <summary> Get the module path's runtime value, which may be different from the 
            value configured.</summary>
            <returns> the runtime value of the server's module path.
            </returns>
            <para>Since EMS 8.3.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.VersionInfo">
            <summary> Get the version of TIBCO Enterprise Message Service that the server binary is from.</summary>
            <returns> the VersionInfo object representing the server's version.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.Evaluation">
            <summary> Indicates whether the server binary is an evaluation copy or a fully
            licensed one.
            </summary>
            <returns> true if software is evaluation release, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.OverallSyncProgress">
            <summary> Get the current overall progress of the synchronization
            of store files for this server when it is running in the EMS Appliance.
            </summary>
            <returns> the synchronization progress percentage as an integer
            between 0 and 100 or -1 either if no synchronization is ongoing or
            if requested from a server that is running outside the EMS Appliance
            </returns>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.FaultTolerantURL">
            <summary> Get the URL of the fault-tolerant server for this server.
            </summary>
            <remarks> This is same as set by the ft_active parameter in the server configuration file.
            </remarks>
            <returns> the URL in String form or null if fault-tolerant server is not specified.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.FaultTolerantHeartbeat">
            <summary> Get the period (in seconds) of the heartbeat messages sent by the active
            server.
            </summary>
            <returns> the heartbeat period in seconds.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.FaultTolerantActivation">
            <summary> Get the length of time a backup server will wait for a heartbeat
            message before concluding that the active server has failed.
            </summary>
            <returns> the activation interval in seconds.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.FaultTolerantReconnectTimeout">
            <summary> Get the length of time a server which has just become the active server
            following a failover will wait for clients to reconnect before their
            state is removed from the shared state.
            </summary>
            <returns> the reconnect timeout interval in seconds.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.FaultTolerantFailoverReread">
            <summary> Deprecated as of 6.0
            </summary>
            <returns> true if the configuration will be reread following failover, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.StartTime">
            <summary> Get the server start time.</summary>
            <returns> the server start time in milliseconds
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.UpTime">
            <summary> Get the server uptime.
            </summary>
            <remarks>Uptime is how long this invocation of the server
            has been running.
            </remarks>
            <returns> the server uptime in milliseconds.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.TibrvTransportsEnabled">
            <summary> Indicates whether or not bridging to and from transports of type tibrv
            and tibrvcm is enabled.
            </summary>
            <remarks> If this is not enabled then, even though transports
            of this type may be defined in the transports.conf file, messages will
            not be exported to or imported from those transports.
            </remarks>
            <returns> true if TIBCO Rendezvous bridge is enabled, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.TibssTransportsEnabled">
            <summary> Indicates whether or not bridging to and from SmartSockets transports
            is enabled.
            </summary>
            <remarks> If this is not enabled then, even though transports
            of this type may be defined in the transports.conf file, messages will
            not be exported to or imported from those transports.
            </remarks>
            <returns> true if TIBCO SmartSockets bridge is enabled, false otherwise.
            </returns>
            \deprecated As of release 8.6
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.AuthorizationEnabled">
            <summary> Gets or sets whether or not authorization of user credentials and permissions
            is enabled.
            </summary>
            <returns> true if authorization is enabled, false otherwise.
            </returns>
            <value>true if authorization is to be enabled, false if it
            is to be disabled.
            </value>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.UserAuthLocations">
             <summary> Gets an array indicating where users will be authenticated.
             </summary>
             <remarks>
             The order of the array is the order in which the server uses them for authentication.
            </remarks>
             <returns> the array or null if no locations have been configured.
             </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.RoutingEnabled">
            <summary> Indicates whether or not routing of messages between servers is enabled.</summary>
            <returns> true if routing is enabled, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.MulticastEnabled">
            <summary> Indicates whether or not multicast is enabled.</summary>
            <returns> true if multicast is enabled, false otherwise.
            </returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.FlowControlEnabled">
            <summary> Indicates whether or not flow control is enabled.
            </summary>
            <remarks> Flow control involves limiting the rate of publication of messages 
            when receivers are unable to keep up with the publisher(s). For a destination
            to be flow controlled, lowControlEnabled must be true and a FlowControlMaxBytes
            must return a non-zero value.
            </remarks>
            <returns> true if flow control is enabled, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.NPSendCheckMode">
            <summary> Returns global send check mode for NON_PERSISTENT 
            messages.
            </summary>
            <remarks>
            If property not defined in the server this method returns
            <see cref="F:TIBCO.EMS.Tibems.NPSEND_CHECK_DEFAULT"></see>
            return send check mode for NON_PERSISTENT messages. Values
            are constants beginning with <c>NPSEND_...</c> documented
            in <see cref="T:TIBCO.EMS.Tibems"></see> class, 
            such as <see cref="F:TIBCO.EMS.Tibems.NPSEND_CHECK_DEFAULT"></see>.
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ClockSyncInterval">
            <summary> Returns interval between clock synchronization commands
            sent by this server to its clients. These commands ensure that
            clients expire messages consistently with the server when one or
            other machines' clocks are changed or drift apart.
            </summary>
            <returns> interval in seconds. 0 indicates that the clocks are
            only synchronized when the client connects to the server. A value
            of -1 indicates that no clock synchronization is done at all and
            it is assumed that the client and server clocks are always in
            sync.
            </returns>
            Since EMS 6.1
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ServerHeartbeatServerInterval">
            <summary> Returns interval between heartbeats this server 
            requests other servers to send to this server.
            </summary>
            <returns> interval in seconds or 0 if not specified and 
            heartbeats are not sent.
            </returns>
            <see cref="P:TIBCO.EMS.ADMIN.ServerInfo.ServerTimeoutServerConnection"></see>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ServerTimeoutServerConnection">
            <summary> Returns timeout after which this server destroys 
            connection fromanother server if heartbeats were not being received.
            </summary>
            <returns>timeout interval in seconds or 0 if not specified and this
            server does not check heartbeats from other servers.</returns>
            <see cref="P:TIBCO.EMS.ADMIN.ServerInfo.ServerHeartbeatServerInterval"></see>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ClientHeartbeatServerInterval">
            <summary>Returns interval between heartbeats this server requests 
            client connections to send to this server.
            </summary>
            <returns> interval in seconds or 0 if not specified and heartbeats 
            are not sent.</returns>
            <see cref="P:TIBCO.EMS.ADMIN.ServerInfo.ServerTimeoutClientConnection"></see>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ServerTimeoutClientConnection">
            <summary> Returns timeout after which this server destroys 
            connection from client application if heartbeats were not being 
            received.
            </summary>
            <returns>timeout interval in seconds or 0 if not specified and this
            server does not check heartbeats from client connections.
            </returns>
            <see cref="P:TIBCO.EMS.ADMIN.ServerInfo.ClientHeartbeatServerInterval"></see>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ServerHeartbeatClientInterval">
            <summary> Returns interval between heartbeats this server sends to 
            client connections.
            </summary>
            <returns>interval in seconds or 0 if not specified and heartbeats 
            are not sent. </returns>
            <see cref="P:TIBCO.EMS.ADMIN.ServerInfo.ClientTimeoutServerConnection"></see>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ClientTimeoutServerConnection">
            <summary>Returns timeout after which clients terminate connection 
            to this server if they do not receive heartbeats from this server.
            </summary>
            <returns>timeout interval in seconds or 0 if not specified and 
            clients do not check heartbeats from this server.
            </returns>
            <remarks><see cref="P:TIBCO.EMS.ADMIN.ServerInfo.ServerHeartbeatClientInterval"></see></remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.StoreDirectory">
            <summary> Get the directory in which the server is storing its store files.</summary>
            <returns> the server store files directory.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.StoreMinimum">
            <summary> Get the minimum size of the server store files.</summary>
            <returns> the minimum size in bytes or 0 if no minimum is set.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.StoreSyncMinimum">
            <summary> Get the minimum size of the server's synchronous store file.</summary>
            <returns> the minimum size in bytes or 0 if no minimum is set.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.StoreAsyncMinimum">
            <summary> Get the minimum size of the server's asynchronous store file.</summary>
            <returns> the minimum size in bytes or 0 if no minimum is set.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.StoreTruncateEnabled">
            <summary> Indicates whether or no the server will attempt to truncate the store files
            when possible.
            </summary>
            <returns> true if the server will truncate the store files, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.StoreCRCEnabled">
            <summary> Indicates whether or not the server uses CRC verification when reading
            data from the store files.
            </summary>
            <returns> true if the server does use CRC verification, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.MaxConnections">
            <summary> Get the maximum number of connections this server will allow.</summary>
            <returns> the maximum number of connections or zero if not set.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.LogTraceInfo">
            <summary> Get or set the trace settings that determine what will be logged in the server's log file.
            </summary>
            <remarks>
            This method does not copy the TraceInfo object.  Therefore, to modify the trace settings,
            one needs to modify the TraceInfo object returned by this method and save the
            ServerInfo object.
            </remarks>
            <returns> a TraceInfo object representing the current log trace settings.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ConsoleTraceInfo">
            <summary> Get or set the trace settings that determine what will be logged to the server's console window.
            </summary>
            <remarks>
            This method does not copy the TraceInfo object.  Therefore, to modify the trace settings,
            one needs to modify the TraceInfo object returned by this method and save the
            ServerInfo object.
            </remarks>
            <returns> a TraceInfo object representing the current console trace settings.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.TraceBufferTraceInfo">
            <summary>Reserved for internal provider use only. Do not use this property.
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.TraceBufferSize">
            <summary>Reserved for internal provider use only. Do not use this property.
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ClientTraceEnabled">
            <summary> Indicates whether or not client tracing has been enabled.</summary>
            <returns> true if client tracing is enabled, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ClientTraceTarget">
            <summary> Get the current target for client tracing.</summary>
            <returns> ClientTraceTarget.None if client tracing is not enabled,
            ClientTraceTarget.Stdout if client tracing is enabled and is directed
            to stdout and ClientTraceTarget.Stderr if client tracing is enabled
            and is directed to stderr.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ClientTraceFilterType">
            <summary> Get the current filter type for client tracing.
            </summary>
            <remarks> If a filter is set then only clients that match the value for 
            the filter will be traced.
            </remarks>
            <returns> ClientTraceFilter.None if client tracing is not enabled or no
            filter is set, ClientTraceFilter.User if only clients with a matching
            user are to be traced, ClientTraceFilter.ClientID if only clients
            with a matching client id are to be traced and
            ClientTraceFilter.ConnID if only clients with a matching client id
            are to be traced.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ClientTraceFilterValue">
            <summary> Get the value that clients must match in order to be traced.
            </summary>
            <remarks> If the filtering is by user or client id then the object returned is a
            string. If the filtering is by connection id then the object returned
            is an Int64. If there is no filtering or client tracing is not enabled
            then null is returned.
            </remarks>
            <returns> the value a client must match in order to be traced.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.QueueCount">
            <summary> Get the number of queues in the server.</summary>
            <returns> the number of queues.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.TopicCount">
            <summary> Get the number of topics in the server.</summary>
            <returns> the number of topics.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ConnectionCount">
            <summary> Get the number of connections to the server.</summary>
            <returns> the number of connections.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ClientConnectionCount">
            <summary> Get the number of client connections to the server.</summary>
            <returns> the number of client connections.
            </returns>
            <para>Since EMS 8.4.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.AdminConnectionCount">
            <summary> Get the number of admin connections to the server.</summary>
            <returns> the number of admin connections.
            </returns>
            <para>Since EMS 8.4.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.SessionCount">
            <summary> Get the number of sessions created by client applications.
            </summary>
            <returns>the number of sessions. </returns>
            since EMS 4.4
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ProducerCount">
            <summary> Get the total number of producers.
            </summary>
            <returns>total number of producers.</returns>
            <remarks>since EMS 4.4</remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ConsumerCount">
            <summary>Get the total number of consumers.</summary>
            <returns>total number of consumers.</returns>
            since EMS 4.4
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.DurableCount">
            <summary> Get the number of durable subscribers in the server.</summary>
            <returns> the number of durable subscribers.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.PendingMessageCount">
            <summary> Get the total number of pending messages for this server.</summary>
            <returns> the number of pending messages.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.PendingMessageSize">
            <summary> Get the total size of pending messages for this server.</summary>
            <returns> the size of pending messages.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.InboundMessageCount">
            <summary> Get the number of inbound messages for the server.</summary>
            <returns> the number of inbound messages.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.OutboundMessageCount">
            <summary> Get the number of outbound messages for the server.</summary>
            <returns> the number of outbound messages
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.InboundMessageRate">
            <summary> Get the number of inbound messages per second for the server as a whole.</summary>
            <returns> the inbound message rate.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.OutboundMessageRate">
            <summary> Get the number of outbound messages per second for the server as a whole.</summary>
            <returns> the outbound message rate.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.InboundBytesRate">
            <summary> Get the volume of inbound messages per second for the server as a whole.</summary>
            <returns> the inbound rate in bytes per second rate.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.OutboundBytesRate">
            <summary> Get the volume of outbound messages per second for the server as a whole.</summary>
            <returns> the outbound rate in bytes per second rate.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.LogFileSize">
            <summary> Get the total size of the log file.</summary>
            <returns> the size of the log file or 0 if log file is not set.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.SyncDBSize">
            <summary> Get the current size of the synchronous message store.</summary>
            <returns> the size in bytes.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.AsyncDBSize">
            <summary> Get the current size of the asynchronous message store.</summary>
            <returns> the size in bytes.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.MsgMem">
            <summary> Get the amount of memory in use to store messages.</summary>
            <returns> the size in bytes.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.MsgMemPooled">
            <summary> Get the amount of memory in use by the message pools.</summary>
            <returns> the size in bytes.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.DiskReadRate">
            <summary> Get the rate at which messages are being read from storage.
            Does not apply to database stores.</summary>
            <returns> the bytes per second.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.DiskWriteRate">
            <summary> Get the rate at which messages are being written to storage.
            Does not apply to database stores.</summary>
            <returns> the bytes per second.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.DiskReadOperationsRate">
            <summary> Get the rate at which messages are being read from storage.</summary>
            <returns> the operations per second.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.DiskWriteOperationsRate">
            <summary> Get the rate at which messages are being written to storage.</summary>
            <returns> the operations per second.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.LDAPParams">
            <summary> Get the LDAP parameters used by the server when authenticating through
            LDAP server.
            </summary>
            <returns> the LDAP parameters if set, null otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.SSLParams">
            <summary> Get the SSL parameters used by the server when communicating with SSL
            clients.
            </summary>
            <returns> the SSL parameters if set, null otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.FTLParams">
            <summary> Get the FTL parameters used by the server for FTL transports.
            </summary>
            <returns> the FTL parameters if set, null otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.SSLDHSize">
            <summary> Get the size of the Diffie-Hellman key used by the server for client
            communications.
            </summary>
            <returns> the size in bits.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.SSLRequireClientCert">
            <summary> Indicates whether or not the server will only accept SSL clients that
            have certificates.
            </summary>
            <returns> true if clients are required to have certificates, false
            otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.SSLRequireRouteCertOnly">
            <summary> Indicates whether or not the server requires a certificate 
            only for incoming route SSL connections, while leaving the 
            other types of connections unaffected (clients and FT peer).
            </summary>
            <returns> true if only routes are required to have certificates, false otherwise.
            </returns>
            <para>Since EMS 8.4.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.SSLUserCertUsername">
            <summary> Indicates whether or not the client's username is always extracted from
            the CN field of the client's digital certificate.
            </summary>
            <returns> true if the client's username is to be extracted, false
            otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.SSLCertUserSpecname">
            <summary> Get the username clients will use to connect to the server when their
            username is to be extracted from the CN field of their digital
            certificate.
            </summary>
            <returns> the username  if set, null otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.FaultTolerantSSLParams">
            <summary> Get the server's Fault Tolerant SSL parameters. These are the
            parameters that the server uses to connect to its Fault Tolerant
            partner.
            </summary>
            <returns> the FT SSL parameters if set, null otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.TrackCorrelationIds">
            <summary> Gets or sets whether or not tracking messages by correlation ID is enabled.</summary>
            <returns> true if tracking messages by correlation ID is enabled, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.TrackMsgIds">
            <summary> Gets or sets whether or not tracking messages by message ID is enabled.</summary>
            <returns> true if tracking messages by message ID is enabled, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.Password">
            <summary> Set the new server password.</summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.SSLPassword">
            <summary> Set the new server's private key or PKCS12 file password.</summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.FTSSLPassword">
            <summary> Set the new private key or PKCS12 file password for fault-tolerant SSL connection.</summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.MaxMsgMemory">
            <summary> Get or set the maximum allowed message memory.</summary>
            <returns> the maximum allowed message memory in bytes, or 0 if no limit is
            set.
            </returns>
            <remarks> Lowering this value will not immediately free memory occupied by messages.
            </remarks>
            <exception cref="T:System.ArgumentException"> if maxMsgMemory is less than 64KB.
            </exception>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ReserveMemory">
            <summary> Get the amount of reserve memory in bytes.</summary>
            <returns> the amount of reserve in bytes or 0 if not enabled.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.MaxClientMsgSize">
            <summary> Get the maximum allowed size of an incoming client message.</summary>
            <returns> the maximum allowed size of incoming client message in bytes, or zero if not enabled.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.DestinationBacklogSwapout">
            <summary> Get the per destination limit of backlogged messages which are not automatically swapped out.</summary>
            <returns> limit of unswapped backlogged messages per destination.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.MessagePoolBlockSize">
            <summary> Get the value of the msg_pool_block_size setting.</summary>
            <returns> the value of the setting or 0 if not enabled.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.MessagePoolSize">
            <summary> Get the value of the msg_pool_size setting.</summary>
            <returns> the value of the setting or 0 if not enabled.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.MessageSwappingEnabled">
            <summary> Get or set whether or not server message swapping is enabled.</summary>
            <returns> true if server message swapping is enabled, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.LargeDestMemory">
            <summary> Get or set the amount of message memory in bytes that an unbounded destination
            can hold before the server starts logging warnings about the destination's size.
            </summary>
            <returns> the amount of message memory in bytes that an unbounded destination can
            hold before the server starts logging warnings about the destination's size, or
            0 if this logging is disabled.
            </returns>
            <para>Since EMS 8.4.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.LargeDestCount">
            <summary> Get or set the number of messages that an unbounded destination can hold before
            the server starts logging warnings about the destination's message count.
            </summary>
            <returns> the number of messages that an unbounded destination can hold before the
            server starts logging warnings about the destination's message count, or 0 if this 
            logging is disabled.
            </returns>
            <para>Since EMS 8.4.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.AlwaysExitOnDiskErrorEnabled">
            <summary> Get or set whether or not the server will exit on any disk error.</summary>
            <returns> true if the server will exit on any disk error, false otherwise.
            </returns>
            <para>Since EMS 8.4.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.HealthCheckListen">
            <summary> Get the configured listen URL for an EMS HTTP health check service.</summary>
            <returns> a string with the listen URL for health service if configured, null otherwise
            </returns>
            <para>Since EMS 8.5.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.SecondaryHealthCheckListen">
            <summary> Get the configured secondary listen URL for an EMS HTTP health check service.</summary>
            <returns> a string with the secondary listen URL for health check service if
            configured, null otherwise
            </returns>
            <para>Since EMS 8.5.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.FSyncEnabled">
            <summary> Indicates whether or not the fsync mode is used by the server when
            writing data to its store file.
            </summary>
            <remarks>On most platforms this is not the most efficient way to write to the store file.
            </remarks>
            <returns> true if fsync is enabled, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.ServerConfigurationMode">
            <summary> Gets the configuration mode of the server.
            </summary>
            <returns> a ConfigurationMode value representing the server
            configuration type.  ConfigurationMode.Conf represents the
            *.conf file format and ConfigurationMode.JSON represents the
            JSON based server configuration format.
            </returns>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ServerInfo.DETAIL_PRODUCERS">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ServerInfo.DETAIL_CONSUMERS">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ServerInfo.DETAIL_ROUTES">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ServerInfo.DETAIL_CHANNELS">
            <summary>  </summary>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.URL">
            <summary> Get the URL that should be used to contact this server.</summary>
            <returns> the URL in String form.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ServerInfo.DisableClientTracing">
            <summary> Turn off client tracing, clearing all filtering settings.</summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ServerInfo.EnableClientTracing">
            <summary> Enable client tracing with default settings.
            </summary>
            <remarks> Default settings are that
            the target is stderr and there is no filtering.
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ServerInfo.EnableClientTracing(TIBCO.EMS.ADMIN.ClientTraceTarget,TIBCO.EMS.ADMIN.ClientTraceFilter,System.Object)">
            <summary> Enable client tracing with specific settings.</summary>
            <param name="target">target for client tracing, must be either
            ClientTraceTarget.Stdout or ClientTraceTarget.Stderr.
            </param>
            <param name="filterType">type of filter to be applied, either
            ClientTraceFilter.None for no filtering or one of
            ClientTraceFilter.User, ClientTraceFilter.ClientID or
            ClientTraceFilter.ConnID.
            </param>
            <param name="filterValue">value a client needs to match for client tracing to
            be enabled. For ClientTraceFilter.User and
            ClientTraceFilter.ClientID this must be a string, for
            ClientTraceFilter.ConnID must be an Int64.
            </param>
            <exception cref="T:System.ArgumentException"> if target or filterType are not valid
            or the type of filterValue does not match the type required for the
            given filterType.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ServerInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.DbStoreClasspath">
            <summary>
             Get the classpath set for the database store.
            </summary>
            <returns>
             The value of the setting.  Null will be returned
             if this server is using a database store.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.DbStoreJDBCDriverName">
            <summary>
             Get the JDBC driver name for the database store.
            </summary>
            <returns>
             The value of the setting.  Null will be returned
             if this server is using a database store.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.DbStoreJDBCDialect">
            <summary>
             Get the JDBC dialect set for the database store.
            </summary>
            <returns>
             the value of the setting.  Null will be returned
             if this server is using a database store.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.JRELibrary">
            <summary>
             Get the JVM library being used by the server.
            </summary>
            <returns>
             The value of the setting.  Null will be returned
             if this server does not have the jvm enabled.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.ServerInfo.JREOptions">
            <summary>
             Get the options being used by the server's jvm.
            </summary>
            <returns>
             The value of the setting.  Null will be returned
             if this server does not have the jvm enabled.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.SSLParams">
            <summary> This class represents all the possible SSL paramters.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLParams.SSL_VENDOR_PARAM">
            <summary> String parameter for the SSL implementation vendor (factories only).</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLParams.SSL_TRUSTED_PARAM">
            <summary> List parameter for the List of trusted certificates.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLParams.SSL_VERIFY_HOST_PARAM">
            <summary> Boolean parameter indicating whether or not hosts should be verified.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLParams.SSL_VERIFY_HOSTNAME_PARAM">
            <summary> Boolean parameter indicating whether or not hostnames should be verified.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLParams.SSL_EXPECTED_HOSTNAME_PARAM">
            <summary> String parameter for the expeted hostname of the server.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLParams.SSL_AUTH_ONLY_PARAM">
            <summary> Boolean parameter indicating whether or not SSL is used only for authentication.</summary>
            <para>Since Version 4.2
            </para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLParams.SSL_IDENTITY_PARAM">
            <summary> String parameter for the filename of the identity file.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLParams.SSL_ISSUERS_PARAM">
            <summary> List parameter for the list of SSL certificate filenames used to issue client certificates.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLParams.SSL_PRIVATE_KEY_PARAM">
            <summary> String parameter for the filename of the private key file.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLParams.SSL_RENEG_SIZE_PARAM">
            <summary> Long parameter for the SSL renogotion size, in bytes.</summary>
            \deprecated As of release 4.3.0
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLParams.SSL_RENEG_INTERVAL_PARAM">
            <summary> Long parameter for the SSL renogotion interval, in seconds.</summary>
            \deprecated As of release 4.3.0
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLParams.SSL_CRL_PATH_PARAM">
            <summary> String parmeter for the SSL CRL path.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLParams.SSL_CRL_UPDATE_IVL_PARAM">
            <summary> Long parameter for the SSL CRL update interval, in hours.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLParams.SSL_CIPHERS_PARAM">
            <summary> String parmeter for the SSL ciphers.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLParams.SSL_PASSWORD_PARAM">
            <summary> String parmeter for the SSL password (routes only).</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLParams.SSL_EGD_PARAM">
            <summary> String parmeter for the path to the installed Enthropy Gathering Daemon.</summary>
            \deprecated As of release 8.5.1
        </member>
        <member name="M:TIBCO.EMS.ADMIN.SSLParams.#ctor(System.Collections.Hashtable)">
            <summary>  </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.SSLParams._FixParams">
            <summary>  </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.SSLParams._Pack(TIBCO.EMS.MapMessage)">
            <summary>  </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.SSDeliveryMode">
            <summary> Enum contains the delivery modes that can be used with
            SmartSockets transport
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSDeliveryMode.BestEffort">
            <summary> SmartSockets BEST_EFFORT delivery mode.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSDeliveryMode.Some">
            <summary> SmartSockets SOME delivery mode.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSDeliveryMode.All">
            <summary> SmartSockets ALL delivery mode.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSDeliveryMode.Ordered">
            <summary> SmartSockets ORDERED delivery mode.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSDeliveryMode.Persistent">
            <summary> SmartSockets PERSISTENT delivery mode.</summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.SSLoadBalanceMode">
            <summary> Enum contains the load balance modes that can be used with
            SmartSockets transport
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLoadBalanceMode.None">
            <summary> SmartSockets NONE load balance mode.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLoadBalanceMode.RoundRobin">
            <summary> SmartSockets ROUND_ROBIN load balance mode.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLoadBalanceMode.Weighted">
            <summary> SmartSockets WEIGHTED load balance mode.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSLoadBalanceMode.Sorted">
            <summary> SmartSockets SORTED load balance mode.</summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.SSSubscribeMode">
            <summary> Enum contains the subscribe modes that can be used with
            SmartSockets transport
            </summary>
            \deprecated As of release 5.0 subscribe mode is not configurable.
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSSubscribeMode.Exact">
            <summary> SmartSockets EXACT subscribe mode.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSSubscribeMode.All">
            <summary> SmartSockets ALL subscribe mode.</summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.SSImportSSHeaders">
            <summary> Enum contains the import SmartSockets header values for
            SmartSockets transport
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSImportSSHeaders.None">
            <summary>
            The SmartSockets sender is the only header that will be imported.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSImportSSHeaders.type_num">
            <summary>
            The SmartSockets sender and the SmartSockets message type are 
            the only  headers that will be imported.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSImportSSHeaders.All">
            <summary> All SmartSockets headers will be imported. </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.SSPreserveGMD">
            <summary> Enum contains the values for preserving failed SmartSockets
            GMD messages when using SmartSockets Transport
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSPreserveGMD.Never">
            <summary>
            Never preserve failed SmartSockets GMD messages in the EMS 
            undelivered queue.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSPreserveGMD.Always">
            <summary>
            Always preserve failed SmartSockets GMD messages in the EMS 
            undelivered queue.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSPreserveGMD.Receivers">
            <summary>
            Only preserve failed SmartSockets GMD messages in the EMS 
            undelivered queue if that GMD message had one or more receivers.
            </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.SSTransportInfo">
            <summary> This class represents TIBCO SmartSockets transports that are configured on
            the EMS server.
            </summary>
            <remarks> SmartSockets transports are mechanisms for importing and
            exporting messages between EMS and TIBCO SmartSockets.
            </remarks>
            \deprecated As of release 8.6
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SSTransportInfo.ServerNames">
            <summary> Get the names of the RTservers this transport connects to.</summary>
            <returns> the server names
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SSTransportInfo.Username">
            <summary> Get the username used by the EMS server to authenticate itself to
            the SmartSockets server.
            </summary>
            <returns> the username
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SSTransportInfo.Project">
            <summary> Get the SmartSockets project name.</summary>
            <returns> the project name
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SSTransportInfo.DeliveryMode">
            <summary> Get the quality of service which delivers messages to the SmartSockets
            server over this transport.
            </summary>
            <returns> the delivery mode
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SSTransportInfo.LoadBalanceMode">
            <summary> Get the load balancing regimen for messages that this transport exports
            to the SmartSockets server.
            </summary>
            <returns> the load balancing regimen
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SSTransportInfo.OverrideLoadBalanceMode">
            <summary> Indicates whether or not the RTserver should deliver all messages on this
            client connection, even if other clients participate in load balancing.
            </summary>
            <returns> true if load balancing is to be disabled, false otherwise
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SSTransportInfo.GmdFileDelete">
            <summary> Indicates whether or not the EMS server should delete the GMD store file
            and create a new one when creating this transport.
            </summary>
            <returns> true if the EMS server should delete the GMD store file, false
            otherwise
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SSTransportInfo.SubscribeMode">
            <summary> Get the subscribe mode for the transport.
            Deprecated, As of release 5.0 subscribe mode is not configurable.
            </summary>
            <returns> the subscribe mode
            </returns>
            \deprecated As of release 5.0 subscribe mode is not configurable.
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SSTransportInfo.ImportSSHeaders">
            <summary>
            Indicates which SmartSockets headers will be imported.
            </summary>
            <returns> the headers imported
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SSTransportInfo.PreserveGMD">
            <summary>
            Indicates what happens to messages when a failure occurs 
            when they are being exported via SmartSockets GMD.
            </summary>
            <returns> situations when failed messages will be preserved
             in the EMS undelivered queue.
            </returns>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.SSTransportInfo.subscribeMode">
            \deprecated As of release 5.0 subscribe mode is not configurable.
        </member>
        <member name="M:TIBCO.EMS.ADMIN.SSTransportInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.StatData">
            <summary> This class represents statistical data about another object (Topic, Queue etc).
            </summary>
            <remarks> Statistical data contains the total number of messages and their cumulative size.
            Optionally it provides message rates as number of messages per second
            and number of bytes per second. Whether or not rate information is available is controlled
            by the server configuration. If rate collection is turned off, all rate numbers
            are set to 0. However in those cases the application can calculate the rates
            based on the absolute numbers taken at periodic intervals.
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StatData.TotalMessages">
            <summary> Get the value for the total number of messages.</summary>
            <returns> the total number of messages.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StatData.TotalBytes">
            <summary> Get the value for the total size of messages.</summary>
            <returns> the total size of messages.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StatData.MessageRate">
            <summary> Get the value for the number of messages per second.</summary>
            <returns> the number of messages per second.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StatData.ByteRate">
            <summary> Get the value for the rate of bytes per second.</summary>
            <returns> the rate of bytes per second.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.StateInfo">
            <summary> This class represents the FT state for a TIBCO Enterprise
            Message Service server, along with other information.
            </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StateInfo.ServerName">
            <summary> Get the name of the server.</summary>
            <returns> the name of the server.
            </returns>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StateInfo.Appliance">
            <summary> Gets whether or not this server instance is running in
            an appliance.
            </summary>
            <returns> true if this server instance is running in an appliance,
            false otherwise.
            </returns>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StateInfo.ProcessId">
            <summary> Get the current process id of the server.</summary>
            <returns> the server process id.
            </returns>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StateInfo.StateObj">
            <summary> Get the current state of the server.
            </summary>
            <returns> the State object representing the server's state.
            </returns>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StateInfo.VersionInfo">
            <summary> Get the version of TIBCO Enterprise Message Service that the server binary is from.</summary>
            <returns> the VersionInfo object representing the server's version.
            </returns>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StateInfo.OverallSyncProgress">
            <summary> Get the current overall progress of the synchronization
            of store files for this server when it is running in the EMS Appliance.
            </summary>
            <returns> the synchronization progress percentage as an integer
            between 0 and 100 or -1 either if no synchronization is ongoing or
            if requested from a server that is running outside the EMS Appliance
            </returns>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.StateInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.CompState">
            <summary> Flags that complement the state of the server. </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.CompState.WAIT_FOR_PEER">
            <summary> This flag indicates that the server is currently waiting for
            its peer to come up (applies to the EMS Appliance only).
            </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.CompState.SYNCHRONIZING">
            <summary> This flag indicates that the server is currently
            synchronizing data with its peer (applies to a server either in
            active or standby state, in the EMS Appliance only). </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.CompState.REPLICATING">
            <summary> This flag indicates that the server is currently replicating
            incoming data with its peer (applies to a server either in active or
            standby state, in the EMS Appliance only). </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.CompState.PAUSED">
            <summary> This flag indicates that the server is currently paused, waiting
            to determine the correct action after the failure of its peer. </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.CompState.STANDALONE">
            <summary> This flag indicates that the server is currently running
            standalone (applies to a server in active state, in the EMS Appliance
            only). </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.StateVal">
            <summary> Enum that contains values that represent the state of the
            server, to be used in combination with the
            <see cref="T:TIBCO.EMS.ADMIN.CompState">complementary state flags</see>. Values other
            than STANDBY and ACTIVE are provided as a convenience that can be 
            used instead of checking against individual flags. </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.StateVal.STANDBY">
            <summary> This value indicates that the server is currently in
            standby state. </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.StateVal.ACTIVE">
            <summary> This value indicates that the server is currently in active
            state. </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.StateVal.WAIT_FOR_PEER">
            <summary> This value indicates that the server is currently waiting
             for its peer to come up. </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.StateVal.STANDBY_SYNCHRONIZING">
            <summary> This value indicates that the server is currently in
            standby state and is presently synchronizing data from
            the active server. </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.StateVal.STANDBY_REPLICATING">
            <summary> This value indicates that the server is currently in
            standby state and is presently replicating incoming data from the
            active server. </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.StateVal.STANDBY_PAUSED">
            <summary> This value indicates that the server is currently in
            standby state and is presently determining the correct action in
            reaction to failure of the active server. </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.StateVal.ACTIVE_SYNCHRONIZING">
            <summary> This value indicates that the server is currently in
            active state and is presently synchronizing data to
            the standby server. </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.StateVal.ACTIVE_REPLICATING">
            <summary> This value indicates that the server is currently in
            active state and is presently replicating incoming data to the
            standby server. </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.StateVal.ACTIVE_PAUSED">
            <summary> This value indicates that the server is currently in
            active state and is presently determining the correct action in
            reaction to failure of the standby server. </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.StateVal.ACTIVE_STANDALONE">
            <summary> This value indicates that the server is currently in
            standalone active state. </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.StateObj">
            <summary> This class represents the FT state for a TIBCO Enterprise Message Service server.
            </summary>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StateObj.StateVal">
            <summary> Get the current state of the server.
            </summary>
            <returns> the server state.
            </returns>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.StateObj.ToString">
            <summary> Generate a string version of StateObj.
            </summary>
            <returns> a string version of this StateObj.
            </returns>
            <para>Since EMS 8.1.0</para>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.StoreInfo">
            <summary> Class representing information about a server's store.</summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StoreInfo.MsgCount">
            <summary> Get the number of data messages stored in the store.</summary>
            <returns> the number of messages
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StoreInfo.MsgBytes">
            <summary> Get the total size of the data messages stored in the store.</summary>
            <returns> the size in bytes
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StoreInfo.SwappedCount">
            <summary> Get the number of data messages stored in the store as a result of
            swapping out non-persistent messages.
            </summary>
            <remarks>This only has meaning for the asynchronous store.
            </remarks> 
            <returns> the number of messages
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StoreInfo.SwappedBytes">
            <summary> Get the total size of the data messages stored in the store 
            as a result of swapping out non-persistent messages.
            </summary>
            <remarks>This only has meaning for the asynchronous store.
            </remarks>
            <returns> the size in bytes
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StoreInfo.FreeSpace">
             <summary> Get the amount of space in the store that is not in use, deprecated.</summary>
             <remarks>Instead, if applicable, use <see cref="P:TIBCO.EMS.ADMIN.FileStoreInfo.NotInUseSpace"></see>
             </remarks>
             <returns> the number of bytes that are free
            
             </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StoreInfo.UsedSpace">
            <summary> Get the amount of space in the store that is in use, deprecated.</summary>
            <remarks>Instead, if applicable, use <see cref="P:TIBCO.EMS.ADMIN.FileStoreInfo.InUseSpace"></see>
            </remarks>
            <returns> the number of bytes that are in use
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StoreInfo.FileSize">
            <summary> Get the total size of the store, deprecated.</summary>
            <remarks>Instead, if applicable, use <see cref="P:TIBCO.EMS.ADMIN.FileStoreInfo.Size"></see>
            </remarks>
            <returns> the size in bytes
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StoreInfo.AverageWriteTime">
            <summary> Get the average time (in seconds) a write call takes. This measurement is
            not available when the store is asynchronous.</summary>
            <returns> average time (in seconds) per write call. Always 0 when 
            store is in asynchronous mode.
            </returns>
            since EMS 6.1
        </member>
        <member name="P:TIBCO.EMS.ADMIN.StoreInfo.WriteUsage">
            <summary> Get the Ratio between time spent within write and total time
            (server_rate_interval). This measurement is not available when the store
            is asynchronous.</summary>
            <returns> value between [0-1], representing the ratio between time spent 
            writing and total time. Always 0 when store is in asynchronous mode.
            </returns>
            since EMS 6.1
        </member>
        <member name="F:TIBCO.EMS.ADMIN.StoreInfo.freeSpace">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.StoreInfo.usedSpace">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.StoreInfo.fileSize">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.StoreInfo.fragmentation">
            <summary>  </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.StoreInfo.#ctor(TIBCO.EMS.MapMessage)">
            <summary> Initializes a new instance of the StoreInfo
            with the specified map message
            </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.StoreInfo.#ctor(TIBCO.EMS.MapMessage,TIBCO.EMS.ADMIN.Store)">
            <summary> Initializes a new instance of the StoreInfo
            with the specified map message and store type
            </summary>
            \deprecated Use StoreInfo(MapMessage msg) instead
        </member>
        <member name="T:TIBCO.EMS.ADMIN.SubscriptionInfo">
            <summary>
            This class represents a topic subscription in EMS Server.
            </summary>
            <seealso cref="M:TIBCO.EMS.ADMIN.Admin.GetSubscriptions"/>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SubscriptionInfo.ID">
            <summary>
            Returns this subscription's ID.
            </summary>
            <remarks>
            All subscriptions have unique positive ID.
            </remarks>
            <returns>
            Subscription ID
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SubscriptionInfo.Name">
            <summary>
            Returns this subscription name.
            </summary>
            <remarks>
            It will be <c>null</c> for an unshared non-durable subscription. 
            </remarks>
            <returns>
            Subscription's name or <c>null</c> if this is an unshared
            non-durable subscription.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SubscriptionInfo.CreateTime">
            <summary> 
            Returns this subscription's creation time in milliseconds.
            </summary>
            <returns>
            Subscription's creation time in milliseconds.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SubscriptionInfo.TopicName">
            <summary>
            Returns the topic name this subscription is for.
            </summary>
            <returns>
            This subscription's topic name.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SubscriptionInfo.PendingMessageCount">
            <summary>
            Returns the number of pending messages on this subscription.
            </summary>
            <returns>
            Number of pending messages, possibly 0.
            </returns>
            <seealso cref="P:TIBCO.EMS.ADMIN.SubscriptionInfo.PendingMessageSize"/>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SubscriptionInfo.PendingMessageSize">
            <summary>
            Returns combined size of pending messages for this subscription.
            </summary>
            <returns>
            Cumulative size of pending messages, possibly 0.
            </returns>
            <seealso cref="P:TIBCO.EMS.ADMIN.SubscriptionInfo.PendingMessageCount"/>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SubscriptionInfo.ConsumerCount">
            <summary>
            Returns the number of consumers for this subscription.
            </summary>
            <remarks ref="true()">
            <para>
            If the subscription is unshared, the count cannot exceed 1. 
            If the subscription is shared, the count can exceed 1, 
            since a shared subscription can have many shared consumers. 
            </para>
            <para>
            For durable subscriptions (shared and unshared), this count 
            can be 0 if there is no active durable consumer.
            </para> 
            </remarks>
            <returns>
            Number of consumers on this subscription, possibly 0.
            </returns>
            <seealso cref="P:TIBCO.EMS.ADMIN.SubscriptionInfo.IsDurable"/>
            <seealso cref="P:TIBCO.EMS.ADMIN.SubscriptionInfo.IsShared"/>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SubscriptionInfo.HasSelector">
            <summary>
            Indicates if this subscription has a selector.
            </summary>
            <returns>
            <c>true</c> if this subscription has a selector, 
            <c>false</c> otherwise.
            </returns>
            <seealso cref="P:TIBCO.EMS.ADMIN.SubscriptionInfo.Selector"/>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SubscriptionInfo.Selector">
            <summary>
            Returns this subscription's selector.
            </summary>
            <returns>
            Subscription's selector or <c>null</c> if this subscription 
            has no selector.
            </returns>
            <seealso cref="P:TIBCO.EMS.ADMIN.SubscriptionInfo.HasSelector"/>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SubscriptionInfo.IsShared">
            <summary>
            Indicates if this subscription is shared.
            </summary>
            <returns>
            <c>true</c> if this subscription is shared, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.SubscriptionInfo.IsDurable">
            <summary>
            Indicates if this subscription is durable.
            </summary>
            <returns>
            <c>true</c> if this subscription is durable, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.SubscriptionInfo.ToString">
            <summary>
            String representation of this subscription.
            </summary>
            <returns>
            A string representing this subscription.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.ThirdPartyParams">
            <summary> This class represents parameters from third party components 
            such as SSL and LDAP.
            </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.ThirdPartyParams.tpParams">
            <summary>  </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ThirdPartyParams.#ctor(System.Collections.Hashtable,System.String)">
            <summary>  </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ThirdPartyParams.setList(TIBCO.EMS.MapMessage,System.String)">
            <summary>  </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ThirdPartyParams.setObject(TIBCO.EMS.MapMessage,System.String)">
            <summary>  </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ThirdPartyParams._ListToString(System.Collections.IList)">
            <summary>  </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.ThirdPartyParams.ToString">
            <summary> Generate a string representation of parameters.
            
            </summary>
            <returns>  a string representation of parameters.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.TopicInfo">
            <summary> This class represents a topic that is configured on the EMS server.</summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TopicInfo.ExportTransports">
            <summary> Get the names of the transports that this topic exports messages
            on.
            </summary>
            <returns> array of transport names.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TopicInfo.SubscriptionCount">
            <summary> Get the current number of subscriptions for this topic.
            </summary>
            <remarks>This value is correct when this TopicInfo was retrieved from the server 
            through Admin methods.  It is never updated.  To get an updated value, a new TopicInfo
            must be retrieved from the server.
            </remarks>
            <returns>  the number of subscriptions for this topic when the TopicInfo was retrieved 
            from the server.
            </returns>
            <para>Since EMS 8.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TopicInfo.DurableSubscriptionCount">
            <summary> Get the current number of durable subscriptions for this topic.
            </summary>
            <remarks>This value is correct when this TopicInfo was retrieved from the server 
            through Admin methods.  It is never updated.  To get an updated value, a new TopicInfo
            must be retrieved from the server.
            </remarks>
            <returns>  the number of durable subscriptions for this topic when the TopicInfo was retrieved 
            from the server.
            </returns>
            <para>Since EMS 8.0</para>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TopicInfo.SubscriberCount">
            <summary> Get the current number of active subscribers for this topic.
            </summary>
            <remarks>This value is correct when this TopicInfo was retrieved from the server 
            through Admin methods.  It is never updated.  To get an updated value, a new TopicInfo
            must be retrieved from the server.
            </remarks>
            <returns>  the number of active subscibers for this queue when the TopicInfo was retrieved
            from the server.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TopicInfo.DurableCount">
            <summary> Use TopicInfo.DurableSubscriptionCount instead
            </summary>
            <returns>  the number of durable subscribers for this queue when the TopicInfo was 
            retrieved from the server.
            </returns>
            \deprecated Use TopicInfo.DurableSubscriptionCount instead
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TopicInfo.ActiveDurableCount">
            <summary> Get the current number of active durable subscribers for this topic.
            </summary>
            <remarks>This value is correct when this TopicInfo was retrieved from the server through 
            Admin methods.  It is never updated.  To get an updated value, a new TopicInfo must be 
            retrieved from the server.
            </remarks>
            <returns>  the number of active durable subscribers for this queue when the TopicInfo 
            was retrieved from the server.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TopicInfo.Channel">
            <summary> Get or set the multicast channel for this topic.
            </summary>
            <returns> the multicast channel for this topic.</returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TopicInfo.ChannelInherited">
            <summary> Determine if the channel property was inherited from a
            parent topic or set directly for this topic.
            </summary>
            <returns> true if the channel property was inherited.</returns>
            \deprecated As of release 8.3
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TopicInfo.MulticastEnabled">
            <summary> Determine if this topic is multicast-enabled.
            </summary>
            <remarks> A topic is multicast-enabled when its channel
            property is set or inherited and the server is multicast-enabled.
            </remarks>
            <returns> true if this topic is multicast-enabled.</returns>
            \deprecated As of release 8.3
        </member>
        <member name="M:TIBCO.EMS.ADMIN.TopicInfo.#ctor(System.String)">
            <summary> The public constructor creates a TopicInfo object with the given name.
            </summary>
            <remarks>
            The topic is not created on the server until the object is passed to Admin.CreateTopic().
            </remarks>
            <param name="topicName">  The name for the topic being created.
            </param>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TopicInfo.ExportTransportsInherited">
            <summary> Determines if the list of transports this topic exports messages on was 
            inherited from a parent topic or whether it was set on the topic
            directly.
            </summary>
            <returns> true if transport list is inherited from parent, false otherwise.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.TopicInfo.AddExportTransport(System.String)">
            <summary> Add a new export transport to the list of transports this destination
            exports messages to.
            </summary>
            <remarks> If the current list of transports has been
            inherited from a parent topic then adding a transport will stop the
            inheritance and the inherited transports will all be removed 
            from the list and replaced with the new one. From then on
            ExportTransportsInherited will indicate that the transports are no
            longer inherited and future calls to addExportTransport will simply add 
            new transports to the list.
            </remarks>
            <param name="transportName">the name of the transport.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if transportName is not a legal
            transport name
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.TopicInfo.RemoveExportTransport(System.String)">
            <summary> Remove an export transport from the list of transports this destination
            exports messages to.
            </summary>
            <remarks>The removal of a transport from the list if the
            transports are inherited from a parent topic is not permitted and
            results in an exception.
            </remarks>
            <param name="transportName">the name of the transport.
            </param>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminInvalidNameException"> if transportName is not a legal
            transport name
            </exception>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if export transports is inherited
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.TopicInfo.ToString">
            <summary> Returns a String that represents the current Object </summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.TraceInfo">
            <summary> This class represents the set of trace message types that will be output to a particular output destination
            (console or log file).
            </summary>
            <remarks>The trace parameters consist of three sets of TRACE_* items that are evaluated as follows:
            1) Absolute items (SetTraceItems) are the starting point for the set of trace items that will be logged.
            2) Add items (AddTraceItems) are then added to the list of absolute items (duplicates are ignored).
            3) Remove items (RemoveTraceItems) are then removed from the list above to get the final list of items.
            
            SetTraceItems() always overwrites the list of absolute items.  AddTraceItems() and RemoveTraceItems() append to their
            respective lists of trace items.  To reset all or part of the trace parameters, use the Clear*() methods.
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TraceInfo.TraceItems">
            <summary> Set the absolute trace items for this TraceInfo.
            </summary>
            <remarks>This method overwrites any absolute trace items that
            were previously set in this object.  The current add and remove trace items will not be effected by this call.
            To directly specify exactly what will be traced, first call ClearAllTraceItems() and then set the desired
            items with this method.
            The set of absolute trace items for this TraceInfo.  Can be a single TRACE_* constant 
            or a set of TRACE_* constants combined with the binary OR operator (|).
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TraceInfo.TraceSetItems">
            <summary> Get the set of absolute trace items.
            </summary>
            <remarks>  To determine if particular TRACE_* item is in the set
            use bitwise AND.
            </remarks>
            <returns> the set of absolute trace items as a long.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TraceInfo.TraceAddItems">
            <summary> Get the set of add trace items.
            </summary>
            <remarks>To determine if particular TRACE_* item is in the set
            use bitwise AND.
            </remarks>
            <returns> the set of add trace items as a long.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TraceInfo.TraceRemoveItems">
            <summary> Get the set of remove trace items.
            </summary>
            <remarks>To determine if particular TRACE_* item is in the set
            use bitwise AND.
            </remarks>
            <returns> the set of remove trace items as a long.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TraceInfo.AllTraceItems">
            <summary> Get the calculated set of trace items.
            </summary>
            <remarks>This is calculated by taking the absolute set of trace items,
            adding the set of add trace items, and then removing the set of remove trace items.
            </remarks>
            <returns> the calculated set of trace items.
            </returns>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_INFO">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_WARN">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_ACL">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_LIMITS">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_SSL">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_SSL_DEBUG">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_ROUTE">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_ROUTE_DEBUG">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_ADMIN">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_CONFIG">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_RV_ADV">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_CONNECT">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_CONNECT_ERROR">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_PRODCONS">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_DEST">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_TX">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_SS">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_MEMORY">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_MEMORY_DEBUG">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_LDAP_DEBUG">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_AUTH">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_MSG">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_FLOW">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_JVM">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_JAAS">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_MULTICAST">
            <summary>  </summary>
            \deprecated As of release 8.3
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_DBSTORE">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_JVMERR">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_MSTORE">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_LOADER">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_CONFIG_DETAIL">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_DEBUG">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_ALL">
            <summary>  </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TraceInfo.TRACE_DEFAULT">
            <summary>  </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.TraceInfo.Equals(System.Object)">
            <summary>  </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.TraceInfo.GetHashCode">
            <summary>  </summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.TraceInfo.#ctor">
            <summary> Public constuctor that creates a TraveInfo with TRACE_DEFAULT set.
            </summary>
            <remarks>
            This is the same as using the constructor TraceInfo(TRACE_DEFAULT,0,0);
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.TraceInfo.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary> Public constructor used to create a new TraceInfo object.
            </summary>
            <remarks>The values passed to this constructor can be
            a single TRACE_* constant or a set of TRACE_* constants combined with the binary OR operator (|).
            </remarks>
            <param name="setItems">   The set of absolute trace items for this TraceInfo.
            </param>
            <param name="add">   The set of add trace items for this TraceInfo.
            </param>
            <param name="remove">The set of remove trace items for this TraceInfo.
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.TraceInfo.AddTraceItems(System.Int64)">
            <summary> Add the specified trace items to the current list of add trace items.
            </summary>
            <remarks>  Any duplicate items
            will be ignored.  To reset the list of add trace items, call ClearAddTraceItems() first.
            </remarks>
            <param name="add">The set of trace items to append to the list of add trace items.  
            Can be a single TRACE_* constant or a set of TRACE_* constants combined with the binary OR operator (|).
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.TraceInfo.RemoveTraceItems(System.Int64)">
            <summary> Add the specified trace items to the current list of remove trace items.  Any duplicate items
            will be ignored.
            </summary>
            <remarks>To reset the list of remove trace items, call ClearRemoveTraceItems() first.
            </remarks>
            <param name="remove">The set of trace items to append to the list of remove trace items.  Can be a 
            single TRACE_* constant or a set of TRACE_* constants combined with the binary OR operator (|).
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.TraceInfo.ClearSetTraceItems">
            <summary> Clear the set of absolute trace items so that it is empty.</summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.TraceInfo.ClearAddTraceItems">
            <summary> Clear the set of add trace items so that it is empty.</summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.TraceInfo.ClearRemoveTraceItems">
            <summary> Clear the set of remove trace items so that it is empty.</summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.TraceInfo.ClearAllTraceItems">
            <summary> Clear the set of absolute, add, and remove trace items so the object is essentially empty.</summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.TraceInfo.hasItems(System.Int64)">
            <summary> Determine if a set of trace items will be logged based on the setting in
            this TraceInfo.
            </summary>
            <param name="traceItems">The trace items to test for.  Can be a single TRACE_*
            constant or a set of TRACE_* constants combined with the binary OR operator (|).
            </param>
            <returns> true if the TraceInfo object has all of the items set, false otherwise.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.TraceInfo.ToString">
            <summary> Generate a string representation of this TraceInfo.
            </summary>
            <returns>  a string representation of this TraceInfo.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.TransactionInfo">
            <summary> This class represents an XA transaction.</summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TransactionInfo.State">
            <summary> Returns the state of the transaction.</summary>
            <returns> the state of the transaction.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TransactionInfo.FormatId">
            <summary> Returns the format id of the transaction.</summary>
            <returns> the format id of the transaction.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TransactionInfo.BranchQualifier">
            <summary> Returns the branch qualifier of the transaction.</summary>
            <returns> the branch qualifier of the transaction.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TransactionInfo.GlobalTransactionId">
            <summary> Returns the global transaction id  of the transaction.</summary>
            <returns> the global transaction id  of the transaction.
            </returns>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TransactionInfo.TRANSACTION_ACTIVE">
            <summary> State of transaction is active.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TransactionInfo.TRANSACTION_ENDSUCCESS">
            <summary> State of transaction is endsuccess.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TransactionInfo.TRANSACTION_ROLLBACKONLY">
            <summary> State of transaction is rollbackonly.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TransactionInfo.TRANSACTION_PREPARED">
            <summary> State of transaction is prepared.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TransactionInfo.TRANSACTION_SUSPENDED">
            <summary> State of transaction is Suspended.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TransactionInfo.TRANSACTION_UNKNOWN">
            <summary> State of transaction is unknown.</summary>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.TransactionInfo.ToString">
            <summary> Generate a string representation of this TransactionInfo.
            </summary>
            <returns> a string representation of the transaction.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.TransportType">
            <summary> Defines possible values for tranport types </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TransportType.All">
            <summary> Type indicating all types of transport.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TransportType.RV">
            <summary> Type indicating a TIBCO Rendezvous transport.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TransportType.RVCM">
            <summary> Type indicating a TIBCO Rendezvous Certified Messaging transport.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TransportType.SS">
            <summary> Type indicating a TIBCO SmartSockets transport.</summary>
            \deprecated As of release 8.6
        </member>
        <member name="F:TIBCO.EMS.ADMIN.TransportType.FTL">
            <summary> Type indicating a TIBCO FTL transport.</summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.DeliveryMode">
            <summary> Defines possible values of delivery modes </summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.DeliveryMode.NonPersistent">
            <summary> NON_PERSISTENT delivery mode.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.DeliveryMode.Persistent">
            <summary> PERSISTENT delivery mode.</summary>
        </member>
        <member name="F:TIBCO.EMS.ADMIN.DeliveryMode.Reliable">
            <summary> RELIABLE delivery mode. This is a TIBCO extension.</summary>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.TransportInfo">
            <summary> This abstract class represents the data and behavior common to transports
            of all types that are configured on the EMS server
            </summary>
            <remarks>Transports are mechanisms for importing and exporting messages between EMS
            and other messaging systems. Currently the only types of transports supported are
            TIBCO Rendezvous and Rendezvous Certified Messaging.
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TransportInfo.Name">
            <summary> Get the name of the transport.
            </summary>
            <returns>  the transport's name.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TransportInfo.Type">
            <summary> Get the type of the transport.
            </summary>
            <returns>  the transport's type.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TransportInfo.TopicImportDeliveryMode">
            <summary> Get the delivery mode for messages imported from this transport to a
            topic.
            </summary>
            <returns> the delivery mode.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TransportInfo.QueueImportDeliveryMode">
            <summary> Get the delivery mode for messages imported from this transport to a
            queue.
            </summary>
            <returns> the delivery mode.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TransportInfo.ExportHeaders">
            <summary> Indicates whether or not EMS header information is included in messages 
            exported on this transport.
            </summary>
            <returns> true if headers are exported, false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.TransportInfo.ExportProperties">
            <summary> Indicates whether or not the EMS message properties are included in
            messages exported on this transport.
            </summary>
            <returns> true if the properties are exported, false otherwise.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.UserInfo">
            <summary> This class represents a user on the TIBCO EMS server.
            </summary>
            <remarks> A user can be a principal in access control.</remarks>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.UserInfo.#ctor(System.String,System.String)">
            <summary> Public constructor to create a UserInfo.
            </summary>
            <remarks>The user will not be created on the server until
            the UserInfo is passed to Admin.CreateUser().
            </remarks>
            <param name="userName">  The name of the new user.
            </param>
            <param name="description">The description for the new user.
            </param>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.UserInfo.#ctor(System.String)">
            <summary> Public constructor to create a UserInfo with no description.
            </summary>
            <remarks>The user will not be created on the server until the UserInfo is passed
            to Admin.CreateUser().
            </remarks>
            <param name="userName">  The name of the new user.
            </param>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.UserInfo.Password">
            <summary> Set the password for this user.
            </summary>
            <remarks>The user must be saved with a call to
            Admin.UpdateUser() before the change will take effect on the
            server. It is an error to attempt to set the password of an external
            user.
            </remarks>
            <exception cref="T:TIBCO.EMS.ADMIN.AdminException"> if the user is external.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.UserInfo.ToString">
            <summary> Generate a string representation of this UserInfo.
            </summary>
            <returns> a string representation of this UserInfo.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.ADMIN.VersionInfo">
            <summary> This class represents the parsed version information for the TIBCO Enterprise
            Message Service components.
            </summary>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.VersionInfo.VersionMajor">
            <summary> Get the major version of the component.
            </summary>
            <returns>  the major version of the component.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.VersionInfo.VersionMinor">
            <summary> Get the minor version of the component.
            </summary>
            <returns>  the minor version of the component.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.VersionInfo.VersionUpdate">
            <summary> Get the update version of the component.
            </summary>
            <returns>  the update version of the component.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.ADMIN.VersionInfo.VersionBuild">
            <summary> Get the build version of the component.
            </summary>
            <returns>  the build version of the component.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.ADMIN.VersionInfo.ToString">
            <summary> Generate a string version of the VersionInfo object in the form
            "majorVersion.minorVersion.updateVersion.buildVersion"
            </summary>
            <returns>  a string represtation of this VersionInfo.
            </returns>
        </member>
    </members>
</doc>
