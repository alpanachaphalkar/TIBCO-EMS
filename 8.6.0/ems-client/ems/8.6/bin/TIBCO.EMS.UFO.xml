<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TIBCO.EMS.UFO</name>
    </assembly>
    <members>
        <member name="T:TIBCO.EMS.UFO.BytesMessage">
            <summary>A BytesMessage object is used to send a message containing a 
            stream of uninterpreted bytes. It inherits from the Message interface and 
            adds a bytes message body. The receiver of the message supplies the 
            interpretation of the bytes. </summary>
            <remarks>
            <para>
            This message type is for client encoding of existing message formats. 
            If possible, one of the other self-defining message types should be used instead. 
            </para>
            <para> The primitive types can be written explicitly using methods for each type. 
            They may also be written generically as objects. For instance, 
            a call to BytesMessage.writeInt(6) is equivalent to 
            BytesMessage.writeObject((object)6). Both forms are provided, 
            because the explicit form is convenient for static programming, and the object form is 
            needed when types are not known at compile time. 
            </para>
            <para>
            When the message is first created, and when clearBody is called, the body of 
            the message is in write-only mode. After the first call to reset has been made, 
            the message body is in read-only mode. After a message has been sent, 
            the client that sent it can retain and modify it without affecting the message 
            that has been sent. The same message object can be sent multiple times. 
            When a message has been received, the provider has called reset so that the 
            message body is in read-only mode for the client. 
            </para>
            <para> If clearBody is called on a message in read-only mode, the message body is 
            cleared and the message is in write-only mode. 
            </para>
            <para> If a client attempts to read a message in write-only mode, 
            a MessageNotReadableException is thrown. 
            </para>
            <para> If a client attempts to write a message in read-only mode, 
            a MessageNotWriteableException is thrown. 
            </para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.BytesMessage.BodyLength">
            <summary> Gets the number of bytes of the message body when the 
            message is in read-only mode. The value returned can be used to
            allocate a byte array. The value returned is the entire length of 
            the message body, regardless of where the pointer for reading the 
            message is currently located
            </summary>
            <returns> number of bytes in the message </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.Clone">
            <summary>Create a copy of the BytesMessage object. </summary>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.ClearBody">
            <summary> Clears out the message body. Clearing a message's body does 
            not clear its header values or property entries. 
            </summary>
            <remarks>
            <para> If this message body was read-only, calling this method leaves
            the message body in the same state as an empty body in a newly created
            message. 
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.ReadBoolean">
            <summary> Reads a boolean from the bytes message stream. </summary>
            <remarks>Reads one byte from the byte stream of a BytesMessage and advances the read 
            position so that the next read call gets the next datum.</remarks>
            <returns>the boolean value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.ReadByte">
            <summary> Reads a byte from the bytes message stream. </summary>
            <remarks>Reads one byte from the byte stream of a BytesMessage and advances the read 
            position so that the next read call gets the next datum.</remarks>
            <returns>the byte value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.ReadUnsignedByte">
            <summary> Reads a unsigned byte from the bytes message stream. </summary>
            <remarks>Reads one byte from the byte stream of a BytesMessage and advances the read 
            position so that the next read call gets the next datum.</remarks>
            <returns>the unsigned byte value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.ReadShort">
            <summary> Reads a short from the bytes message stream. </summary>
            <remarks>Reads two bytes from the byte stream of a BytesMessage and advances the read 
            position so that the next read call gets the next datum.</remarks>
            <returns>the short value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.ReadUnsignedShort">
            <summary> Reads a unsigned short from the bytes message stream. </summary>
            <remarks>Reads two bytes from the byte stream of a BytesMessage and advances the read 
            position so that the next read call gets the next datum.</remarks>
            <returns>the unsigned short value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.ReadChar">
            <summary> Reads a char from the bytes message stream. </summary>
            <remarks>Reads two bytes from the byte stream of a BytesMessage and advances the read 
            position so that the next read call gets the next datum.</remarks>
            <returns>the char value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.ReadInt">
            <summary> Reads a int from the bytes message stream. </summary>
            <remarks>Reads four bytes from the byte stream of a BytesMessage and advances the read 
            position so that the next read call gets the next datum.</remarks>
            <returns>the int value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.ReadLong">
            <summary> Reads a long from the bytes message stream. </summary>
            <remarks>Reads eight bytes from the byte stream of a BytesMessage and advances the read 
            position so that the next read call gets the next datum.</remarks>
            <returns>the long value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.ReadFloat">
            <summary> Reads a float from the bytes message stream. </summary>
            <remarks>Reads four bytes from the byte stream of a BytesMessage and advances the read 
            position so that the next read call gets the next datum.</remarks>
            <returns>the float value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.ReadDouble">
            <summary> Reads a double from the bytes message stream. </summary>
            <remarks>Reads eight bytes from the byte stream of a BytesMessage and advances the read 
            position so that the next read call gets the next datum.</remarks>
            <returns>the double value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.ReadUTF">
            <summary> Reads a UTF string from the bytes message stream. </summary>
            <remarks>Reads a UTF-8 string. Since the length of the string cannot 
            be determined in advance, the method stores the actual length of the string.
            </remarks>
            <returns>the utf string value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.ReadBytes(System.Byte[])">
            <summary> Reads a byte array from the bytes message stream. </summary>
            <remarks>This method reads bytes from the stream into the byte array and advances the 
            read position.</remarks>
            <returns>The actual number of bytes read. When the call cannot read even one byte, 
            it returns -1.</returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.ReadBytes(System.Byte[],System.Int32)">
            <summary> Reads a byte array from the bytes message stream. </summary>
            <remarks>This method reads bytes from the stream into the byte array and advances the 
            read position. This method attempts to read 
            length bytes; otherwise it attempts to read value.length bytes.</remarks>
            <returns>The actual number of bytes read. When the method cannot read even one byte, 
            it returns -1.</returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.WriteBoolean(System.Boolean)">
            <summary> Writes a boolean to the bytes message stream as a
            1-byte value. The value true is written as the value (byte)1;
            the value false is written as the value (byte)0. 
            </summary>
            <remarks>Writes one byte of data to the stream and advances the write position 
            so that the next write call appends to the new end of the stream.</remarks>
            <param name="value"> the boolean value to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.WriteByte(System.Byte)">
            <summary> Writes a byte to the bytes message stream as a 1-byte value. </summary>
            <remarks>Writes one byte of data to the stream and advances the write position 
            so that the next write call appends to the new end of the stream.</remarks>
            <param name="value">the byte value to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.WriteShort(System.Int16)">
            <summary>Writes a short to the bytes message stream as two bytes,
            high byte first. </summary>
            <remarks>Writes two bytes of data to the stream and advances the write position 
            so that the next write call appends to the new end of the stream.</remarks>
            <param name="value">the short to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.WriteChar(System.Char)">
            <summary>Writes a char to the bytes message stream </summary>
            <remarks>Writes two bytes of data to the stream and advances the write position 
            so that the next write call appends to the new end of the stream.</remarks>
            <param name="value">the char value to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.WriteInt(System.Int32)">
            <summary>Writes a int to the bytes message stream </summary>
            <remarks>Writes four bytes of data to the stream and advances the write position 
            so that the next write call appends to the new end of the stream.</remarks>
            <param name="value">the int value to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.WriteLong(System.Int64)">
            <summary>Writes a long to the bytes message stream </summary>
            <remarks>Writes eight bytes of data to the stream and advances the write position 
            so that the next write call appends to the new end of the stream.</remarks>
            <param name="value">the long value to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.WriteFloat(System.Single)">
            <summary>Writes a float to the bytes message stream </summary>
            <remarks>Writes four bytes of data to the stream and advances the write position 
            so that the next write call appends to the new end of the stream.</remarks>
            <param name="value">the float value to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.WriteDouble(System.Double)">
            <summary>Writes a double to the bytes message stream </summary>
            <remarks>Writes eight bytes of data to the stream and advances the write position 
            so that the next write call appends to the new end of the stream.</remarks>
            <param name="value">the double value to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.WriteUTF(System.String)">
            <summary>Writes a utf string to the bytes message stream </summary>
            <remarks>Writes variable-length encoded UTF-8 data to the stream and advances the write position 
            so that the next write call appends to the new end of the stream.</remarks>
            <param name="value">the utf string value to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.WriteBytes(System.Byte[])">
            <summary>Writes a byte array to the bytes message stream </summary>
            <remarks>Each call writes bytes from the byte array into the stream, 
            and advances the write position.</remarks>
            <param name="value">the byte array value to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes a portion of the byte array to the bytes message stream </summary>
            <param name="value">Write bytes from this byte array to the message.</param>
            <param name="offset">Begin with the byte at this offset within the byte array.</param>
            <param name="length">Write this number of bytes from the byte array.</param>
            <remarks>The offset and length arguments must conform to these restrictions:
            <list type="bullet">
            <item><description>offset must be in the range [0, value.length-1]</description></item>
            <item><description>length must be in the range [0, value.length]</description></item>
            <item><description>offset+length must be in the range [0, value.length]</description></item>
            </list>
            That is, these two arguments must specify a span of bytes within the value argument. 
            Otherwise the call throws a System.IndexOutOfRangeException (and does not write any bytes).
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.WriteObject(System.Object)">
            <summary> Writes an object to the bytes message stream. </summary>
            <remarks>
            <para>
            Converts an object to a primitive value (if possible), and writes that value 
            to the byte stream.
            </para> <para>
            This method works only for the objectified primitive object types 
            (Integer, Double, Long ...), String objects, and byte arrays
            </para>
            </remarks>
            <param name="value">the object to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.Reset">
            <summary> Puts the message body in read-only mode and 
            repositions the stream of bytes to the beginning. </summary>
            <remarks>Reset prepares a message body for reading, as if the message 
            were newly received. This is in contrast to Message.ClearBody, which clears 
            a message body in preparation for writing, as if it were newly created.</remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.BytesMessage.ToString">
            <summary> returns a string representation of the map message </summary>
            <returns> a string representation of the map message </returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.CFImpl">
            <summary>Internal connection factory implementation </summary>
            [EditorBrowsable(EditorBrowsableState.Never)] 
        </member>
        <member name="M:TIBCO.EMS.UFO.CFImpl.RecoverConnection(TIBCO.EMS.UFO.Connection)">
            <summary> Recover the broken connection on another available 
            server. The session, message producer, message consumer, temporary
            destinations created by this broken connection are transparently 
            recreated once the connection is recovered.
            
            </summary>
            <param name="connection">Refers to the connection to be recovered.
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.CFImpl.ToString">
            Returns String representation of this factory 
        </member>
        <member name="M:TIBCO.EMS.UFO.CFImpl.Clone">
            <summary>  </summary>
        </member>
        <member name="P:TIBCO.EMS.UFO.CFImpl.Metric">
            <summary> Get or set the load balancing metric used by the connection
            factory </summary>
            <remarks>
            Valid metrics are:
            <list type="bullet">
            <item>FactoryLoadBalanceMetric.None: not load balanced</item>
            <item>FactoryLoadBalanceMetric.Connections: number of connections on server</item>
            <item>FactoryLoadBalanceMetric.ByteRate: total byte rate (input and output) on server</item>
            </list>
            If the factory is not a load balancing factory then the value returned
            will be FactoryLoadBalanceMetric.None. If the factory is a load
            balancing factory but no metric has been set explicitly then the
            metric returned will be the default metric  
            (FactoryLoadBalanceMetric.Connections) will be returned.
            </remarks>
            <exception cref="T:TIBCO.EMS.EMSException">If the value of metric to set is invalid</exception>
        </member>
        <member name="P:TIBCO.EMS.UFO.CFImpl.CurrentUrl">
            Returns the server url where the created connections are connected.
        </member>
        <member name="T:TIBCO.EMS.UFO.Connection">
            <summary> A Connection object is a client's active connection to TIBCO EMS Server.
            </summary>
            <remarks ref="true()">
            <para> Connections support concurrent use. 
            </para>
            <para>A connection serves several purposes: 
            <list type="bullet">
            <item>It encapsulates an open connection with a TIBCO EMS Server. 
            It typically represents an open TCP/IP socket between a client 
            and the TIBCO EMS Server. </item>
            <item> Its creation is where client authentication takes place. </item>
            <item> It can specify a unique client identifier. </item>
            <item> It provides a <see cref="T:TIBCO.EMS.ConnectionMetaData">TIBCO.EMS.ConnectionMetaData</see> object. </item>
            <item> It supports an optional <see cref="P:TIBCO.EMS.Connection.ExceptionListener">TIBCO.EMS.IExceptionListener</see> 
            object. </item>
            </list>
            </para>
            <para> Because the creation of a connection involves setting up 
            authentication and communication, a connection is a relatively 
            heavyweight object. Most clients will do all their messaging with 
            a single connection. Other more advanced applications may use 
            several connections. 
            </para>
            <para>A client typically creates a connection, one or more sessions,
            and a number of message producers and consumers. When a connection 
            is created, it is in stopped mode. That means that no messages are being delivered. 
            </para>
            <para> It is typical to leave the connection in stopped mode until setup
            is complete and all message consumers have been created. 
            At that point, the client calls the connection's 
            <see cref="M:TIBCO.EMS.UFO.Connection.Start">Start</see> method, 
            and messages begin arriving at the connection's consumers. 
            (Outbound messages flow even before calling Start.)
            This setup convention minimizes any client confusion that may result 
            from asynchronous message delivery while the client is still in the 
            process of setting itself up. 
            </para>
            <para> A connection can be started immediately and the setup can be 
            done afterwards. Clients that do this must be prepared to handle 
            asynchronous message delivery while they are still in the process of setting up. 
            </para>
            <para> A message producer can send messages while a connection is stopped </para>
            
            <para><b>Asynchronous Exceptions</b></para>
            <para>
            When a program uses a connection to send messages, the send calls can detect problems 
            with the connection, and notify the client program (synchronously) by throwing exceptions.</para>
            <para>However, when a program uses a connection only to receive messages, the client 
            cannot catch such exceptions. Instead, programs can handle such exceptions asynchronously 
            in one of two idioms. Programmers may select either idiom, but not both (which would cause 
            duplicate exception processing, with undefined behavior).</para>
            <list type="bullet">
            <item><see cref="T:TIBCO.EMS.EMSExceptionHandler">TIBCO.EMS.EMSExceptionHandler</see> events detect this type of problem in a .NET programming idiom.</item>
            <item>In contrast, the <see cref="T:TIBCO.EMS.IExceptionListener">TIBCO.EMS.IExceptionListener</see>  
            property mimics the way in which JMS provides similar functionality in a Java programming idiom.</item>
            </list>
            <b>Note: </b> 
            The EMS .NET API does not support the optional methods createConnectionConsumer 
            and createDurableConnectionConsumer.
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.Connection.ActiveURL">
            <summary> Get URL of the server this connection is currently connected 
            to</summary>
            <remarks>This property holds the URL of the server at the other endpoint 
            of the connection. When the connection interacts with several servers in a 
            fault-tolerant arrangement, this property indicates the current active server.</remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.Connection.IsClosed">
            <summary>
            Return true if connection is closed; otherwise false.
            </summary>
        </member>
        <member name="P:TIBCO.EMS.UFO.Connection.ClientID">
            <summary> Gets and Set the Client Id </summary>
            <remarks>
            <para>This property holds the unique client ID of the connection.
            </para>
            <para>Client IDs partition the namespace of durable subscribers (see 
            <see cref="M:TIBCO.EMS.UFO.Session.CreateDurableSubscriber(TIBCO.EMS.UFO.Topic,System.String)">Session.CreateDurableSubscriber</see>).
            </para>
            <para>Administrators can configure 
            <see cref="T:TIBCO.EMS.UFO.ConnectionFactory">ConnectionFactory</see> objects to assign 
            client IDs to new connections. Alternatively, administrators can allow 
            client programs to assign their own IDs. If the factory does not assign 
            an ID, the program may dynamically set this property by calling the 
            <see cref="M:TIBCO.EMS.UFO.ConnectionFactory.SetClientID(System.String)">setClientID</see> method. 
            However, it is illegal to overwrite an existing client ID value, and or to set this property 
            after using the connection in any way (for example, after creating a 
            session, or starting the connection); attempting to set this property 
            in these situations results in IllegalStateException.
            </para>
            </remarks>
            <returns> the unique client identifier </returns>
            <exception cref="T:TIBCO.EMS.IllegalStateException">Attempt to overwrite existing ClientID 
             or to set the ClientID after using the connection. </exception>
        </member>
        <member name="P:TIBCO.EMS.UFO.Connection.MetaData">
            <summary> Gets the metadata for this connection. </summary>
            <returns> the connection metadata </returns>
        </member>
        <member name="P:TIBCO.EMS.UFO.Connection.ExceptionListener">
            <summary> Get and set the exception event listener</summary>
            <remarks ref="true()">
            <para>
            This is an alternate pathway for alerting a client program of connection problems. 
            The program implements the exception listener interface, and registers an exception 
            listener object by setting this property. When the client library detects a 
            connection problem, it calls the listener's onException method with an exception 
            argument that details the problem.
            </para>
            <b>Note: </b>
            Use either <see cref="T:TIBCO.EMS.EMSExceptionHandler">TIBCO.EMS.EMSExceptionHandler</see> or TIBCO.EMS.IExceptionListener
            to handle exceptions, but <b>not</b> both.  Setting up both will cause
            the exception to be handled more than once which can result in undefined
            behavior.
            </remarks>
            <exception cref="T:TIBCO.EMS.IllegalStateException">If the connection is closed</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Connection.CreateSession(System.Boolean,System.Int32)">
            <summary> Creates a Session object. </summary>
            <remarks ref="true()">
            The new session uses the connection for all server communications.
            It will be recreated during connection recovery.
            </remarks>
            <param name="transacted">Indicates whether the session is transacted.
            <para>When true, the new session has transaction semantics.</para>
            <para>When false, it has non-transaction semantics.</para>
            </param>
            <param name="acknowledgeMode"><para>Indicates whether and how the consumer 
            is to acknowledge received messages. </para>
            <para>This version of CreateSession accepts an integer value associated with
            the acknowledge mode described by a <see cref="T:TIBCO.EMS.UFO.Session">Session</see> member
            and should only be used for backward compatibility.</para>
            <para>This parameter is ignored if the session is transacted. </para>
            </param>
            <returns>A newly created session. </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Connection.CreateSession(System.Boolean,TIBCO.EMS.SessionMode)">
            <summary> Creates a Session object. </summary>
            <remarks ref="true()">
            The new session uses the connection for all server communications.
            It will be recreated during connection recovery.
            </remarks>
            <param name="transacted">Indicates whether the session is transacted.
            <para>When true, the new session has transaction semantics.</para>
            <para>When false, it has non-transaction semantics.</para>
            </param>
            <param name="acknowledgeMode"><para>Indicates whether and how the consumer  
            is to acknowledge received messages. </para>
            <para>Legal values are listed under <see cref="T:TIBCO.EMS.SessionMode">TIBCO.EMS.SessionMode</see>.
            </para>
            <para>This parameter is ignored if the session is transacted. </para>
            </param>
            <returns>A newly created session. </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Connection.Start">
            <summary> Starts (or restarts) a connection's delivery of incoming messages.
            </summary>
            <remarks ref="true()">
            <para>When a connection is created, it is stopped. It does not deliver inbound messages 
            until the program calls this method to explicitly start it.
            </para>
            <para>If the connection has already been started and is not stopped, this call has no effect.
            </para>
            <para>Outbound messages flow even before calling Start.
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.Connection.Stop">
            <summary> Temporarily stops a connection's delivery of incoming messages. 
            </summary>
            <remarks ref="true()">
            <para>
            This call temporarily stops the connection from delivering inbound messages. 
            A program can restart delivery by calling <see cref="M:TIBCO.EMS.UFO.Connection.Start"/>.
            </para>
            <para>When a connection is created, it is stopped. It does not deliver inbound 
            messages until the program calls this method to explicitly start it.
            </para>
            <para>If the connection is already stopped, this call has no effect.
            </para>
            <para><b>Effect</b></para>
            <para>When this call returns, the connection has stopped delivery to all consumers 
            associated with the connection:
            </para>
            <list type="bullet">
            <item>Messages do not arrive to trigger asynchronous message handler events, nor message listeners.</item>
            <item>Synchronous receive methods block. If their timeout intervals expire, they return null. </item>
            </list>
            <para><b>Blocking</b></para>
            <para>If any message listener or receive call associated with the connection is processing 
            a message when the program calls this method, all facilities of the connection and 
            its sessions remain available to those listeners until they return. In the meantime, 
            this method blocks until that processing completes, that is, until all message listeners 
            and receive calls have returned.
            </para>
            <para>However, the stopped connection prevents the client program from processing any new messages.
            </para>
            <para><b>Sending</b></para>
            <para>A stopped connection can still send outbound messages.
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.Connection.Close">
            <summary> Closes the connection and reclaims resources. </summary>
            <remarks ref="true()">
            <para>Closing the connection causes all temporary destinations to be deleted; you need not 
            separately close the sessions, producers, and consumers associated with the connection.
            </para>
            <para>Closing a connection deletes all temporary destinations associated with the connection.
            </para>
            <para><b>Blocking</b></para>
            <para>If any message listener or receive call associated with the connection is processing 
            a message when the program calls this method, all facilities of the connection and 
            its sessions remain available to those listeners until they return. In the meantime, 
            this method blocks until that processing completes, that is, until all message listeners 
            and receive calls have returned.
            </para>
            <para><b>Acknowledge</b></para>
            <para>Closing a connection does not force acknowledgment in client-acknowledged sessions. 
            When the program still has a message that it received from a connection that has 
            since closed, its Message.Acknowledge method throws IllegalStateException.
            </para>
            <para><b>Transactions</b></para>
            <para>Closing a connection rolls back all open transactions in all sessions associated 
            with the connection. When an external transaction manager coordinates transactions, 
            it determines the final disposition of its open transactions.
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.Connection.ToString">
            <summary> A String representation of the conneciton object </summary>
            <returns> The String representation </returns>
        </member>
        <member name="E:TIBCO.EMS.UFO.Connection.ExceptionHandler">
            <summary> The exception event handler</summary>
            <remarks> 
            <para>The client library raises an event if it detects a problem with the 
            connection. The program implements a handler delegate to processes it asynchronously 
            and registers the delegate here.</para>
            
            Delegate declaration for exception handler is as follows: 
            <code>
            public delegate void EMSExceptionHandler(object sender, EMSExceptionEventArgs args);
            sender: The source of the event, the connection in this case.
            args: The event argument, <see cref="T:TIBCO.EMS.EMSExceptionEventArgs"/>
            </code>
            <example>Example of using the exception event handler:
            <code>
            ...
            connection.ExceptionHandler += new EMSExceptionHandler(handleEx);
            ...
            private void handleEx(object sender, EMSExceptionEventArgs arg)
            {
               EMSException e = arg.Exception;
               Console.WriteLine("Exception: " + e.Message);
            }
            ...
            </code> 
            </example>
            <b>Note: </b>
            Use either ExceptionHandler or <see cref="T:TIBCO.EMS.IExceptionListener"/>
            to handle exceptions, but <b>not</b> both.  Setting up both will cause
            the exception to be handled more than once which can result in undefined
            behavior 
            </remarks>
            <exception cref="T:TIBCO.EMS.IllegalStateException">If the connection is closed</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Connection.RecoverConnection">
            <summary> Recover the broken connection on another available 
            server. The session, message producer, message consumer, temporary
            destinations created by this broken connection are transparently 
            recreated once the connection is recovered.
            
            </summary>
        </member>
        <member name="T:TIBCO.EMS.UFO.ConnectionFactory">
            <summary>Administered object for creating server connections.</summary>
            <remarks ref="true()">
            <para>Connection factories are administered objects. They support concurrent use.
            </para>
            <para>Administrators define connection factories in a repository. Each connection 
            factory has administrative parameters that guide the creation of server connections. 
            Usage follows either of two models:
            </para>
            <para><b>EMS Server</b></para>
            <para>You can use the EMS server as a name service provider, one tibemsd process 
            provides both the name repository and the message service. Administrators 
            define factories in the name repository. Client programs create connection 
            factory objects with the URL of the repository, and call the <see cref="M:TIBCO.EMS.UFO.ConnectionFactory.CreateConnection"/>
            method. This method automatically accesses the corresponding factory in the 
            repository, and uses it to create a connection to the message service.
            </para>
            <para><b>Separate JNDI Repository</b></para>
            <para>Administrators define factories in a JNDI repository. Client programs call 
            <see cref="M:TIBCO.EMS.LookupContext.Lookup(System.String)">TIBCO.EMS.LookupContext.Lookup</see> to retrieve 
            factories and use them to create connections to the server.
            </para>
            <para><b>Administered Objects</b></para>
            <para>Administered objects let administrators configure EMS behavior at the 
            enterprise level. Administrators define these objects, and client programs use 
            them. This arrangement relieves program developers and end users of the 
            responsibility for correct configuration.
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.#ctor">
            <summary>Construct an empty ConnectionFactory</summary>
            <remarks ref="true()"> 
            When administrators define factories in the EMS server, these constructors 
            automatically access the corresponding objects in the repository.
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.#ctor(System.String)">
            <summary>Construct a ConnectionFactory given server url</summary>
            <remarks ref="true()"> 
            When administrators define factories in the EMS server, these constructors 
            automatically access the corresponding objects in the repository.
            <para>
            <b> Reconnect and Fault Tolerance </b>
            </para>
            <para> To enable reconnection behavior and fault tolerance, the 
            connection factory's server URL parameter must be a comma-separated 
            list of two or more URLs. To enable client reconnection in a situation 
            with only one server, you may supply two copies of that server's 
            URL (for example, tcp://localhost:7222,tcp://localhost:7222)
            </para>
            </remarks>
            <param name="serverUrls">The constructor contacts the EMS server at this URLs, to
            access a factory. If connecting a fault-tolerant client, specify two or more
            comma-separated URLs, as described below inReconnect and Fault Tolerance.</param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.#ctor(System.String,System.String)">
            <summary> Construct a ConnectionFactory given the server url, 
            and client id </summary>
            <remarks ref="true()"> 
            When administrators define factories in the EMS server, these constructors 
            automatically access the corresponding objects in the repository.
            <para>
            <b> Reconnect and Fault Tolerance </b>
            </para>
            <para> To enable reconnection behavior and fault tolerance, the 
            connection factory's server URL parameter must be a comma-separated 
            list of two or more URLs. To enable client reconnection in a situation 
            with only one server, you may supply two copies of that server's 
            URL (for example, tcp://localhost:7222,tcp://localhost:7222)
            </para>
            </remarks>
            <param name="serverUrls">The constructor contacts the EMS server at this URLs, to
            access a factory. If connecting a fault-tolerant client, specify two or more
            comma-separated URLs, as described below inReconnect and Fault Tolerance.</param>
            <param name="clientId">The id of the client.
            <para>A client ID string lets the server associate a client-specific factory 
            with each client program. When present, the server supplies that factory 
            to the client. If a factory does not yet exist for the client, the server 
            creates one, and stores it for future use by that specific client.
            </para>
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.#ctor(System.String,System.String,System.Collections.Hashtable)">
            <summary>Construct a ConnectionFactory given server url, client id 
            and properties</summary>
            <remarks ref="true()">  
            When administrators define factories in the EMS server, these constructors 
            automatically access the corresponding objects in the repository.
            <para>
            <b> Reconnect and Fault Tolerance </b>
            </para>
            <para> To enable reconnection behavior and fault tolerance, the 
            connection factory's server URL parameter must be a comma-separated 
            list of two or more URLs. To enable client reconnection in a situation 
            with only one server, you may supply two copies of that server's 
            URL (for example, tcp://localhost:7222,tcp://localhost:7222)
            </para>
            </remarks>
            <param name="serverUrls">The constructor contacts the EMS server at this URLs, to
            access a factory. If connecting a fault-tolerant client, specify two or more
            comma-separated URLs, as described below inReconnect and Fault Tolerance.</param>
            <param name="clientId">The id of the client.
            <para>A client ID string lets the server associate a client-specific factory 
            with each client program. When present, the server supplies that factory 
            to the client. If a factory does not yet exist for the client, the server 
            creates one, and stores it for future use by that specific client.
            </para>
            </param>
            <param name="properties">The properties of the client such as user 
            name and password.
            <para>When present, these properties govern the behavior of the connection 
            objects that a client-specific factory creates. For a list of properties, 
            see the Connection-Related Fields in the <see cref="T:TIBCO.EMS.Tibems">TIBCO.EMS.Tibems</see> members.
            </para></param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.#ctor(TIBCO.EMS.ConnectionFactory)">
            <summary> Constructs a TIBCO.EMS.UFO ConnectionFactory object
            with the given TIBCO.EMS.ConnectionFactory object.
            
            </summary>
            <param name="factory">object of TIBCO.EMS.ConnectionFactory
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.Clone">
            <summary>Overrides the cloning process </summary>
            <returns>An object that is a clone of this <c>ConnectionFactory</c> object</returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetServerUrl(System.String)">
            <summary> set the server url.</summary>
            <remarks ref="true()">
            <para>The server URL is of the form:</para>
            <code>protocol://hostName:portNumber</code>
            <para>For example: </para>
            <code>tcp://localhost:7222</code>
            <para>The server URL for a fault-tolerant configuration is a string 
            with multiple URL's that are comma separated. </para>
            <para>For example: </para>
            <code>tcp://localhost:7222,tcp://localhost:7224</code>
            </remarks>
            <param name="serverUrl">The constructor contacts the EMS server at this URL, to
            access a factory. If connecting a fault-tolerant client, specify two or more
            comma-separated URLs, as described below inReconnect and Fault Tolerance.</param>
            <exception cref="T:TIBCO.EMS.EMSException">Url is already set or some other 
            error. </exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetClientID(System.String)">
            <summary> Set the client id </summary>
            <param name="clientID">The client id </param>
            <exception cref="T:TIBCO.EMS.EMSException"> The specified client id already exists</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetMetric(System.Int32)">
            <summary> Set the load balance metric.
            </summary>
            <param name="metric"> The load balance metric </param>
            <exception cref="T:TIBCO.EMS.EMSException"> Invalid metric </exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetConnAttemptCount(System.Int32)">
            <summary>Set the number of connection attempts.</summary>
            <remarks ref="true()"></remarks>
            <param name="attempts"> The number of connection attempts </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetConnAttemptDelay(System.Int32)">
            <summary>Set the delay between connection attempts.
            </summary>
            <remarks ref="true()"></remarks>
            <param name="delay"> Time (in milliseconds) of the delay between connection attempts. </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetReconnAttemptCount(System.Int32)">
            <summary>Set the number of reconnect attempts.
            </summary>
            <remarks ref="true()"></remarks>
            <param name="attempts"> The number of connection attempts </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetReconnAttemptDelay(System.Int32)">
            <summary>Set the delay between reconnect attempts.
            </summary>
            <remarks ref="true()"></remarks>
            <param name="delay"> Time (in milliseconds) of the delay between reconnect attempts </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetUserName(System.String)">
            <summary>Set the user name.
            </summary>
            <param name="username"> User name </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetUserPassword(System.String)">
            <summary>Set the user password.
            </summary>
            <param name="password"> User password </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetSSLTrace(System.Boolean)">
            <summary> Enable or disable tracing on the client side.</summary>
            <remarks>Tracing will show information during the SSL handshake 
            and on messages received and sent by the SSL link.</remarks>
            <param name="trace"> Flag to indicate whether tracing should be
            enabled for all connection created via this connection factory.
            <list type="bullet">
            <item>When true, tracing is enabled.</item>
            <item>When false, (the default) tracing is disabled.</item>
            </list>
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetSSLAuthOnly(System.Boolean)">
            <summary> Enable or disable encryption/decryption of the message data over 
            the SSL connection. </summary>
            <remarks ref="true()">
            For the client and server to require an SSL connection only to perform 
            authentication, the ssl_auth_only parameter needs to be set on the server 
            and AUTH_ONLY needs to be set by the client. Setting these flags on both 
            the server and client side indicates that the SSL connection is only used 
            to only perform authentication. Once authentication is complete, the client 
            switches to a regular TCP connection to communicate with the server.
            </remarks>
            <param name="authOnly"> Flag to indicate whether the connection
            should only authenticate. 
            <list type="bullet">
            <item>When true, only the authentication to connect is performed and data 
            sent over the connection is not encrypted or decrypted.</item>
            <item> When false (the default), authentication to is performed and data 
            sent over the connection is encrypted and decrypted.</item>
            </list>
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetSSLProxy(System.String,System.Int32)">
            <summary>
            Set the connection factory's parameters for connecting through an SSL
            proxy.
            </summary>
            <remarks>
            An SSL proxy lets an EMS application create an SSL connection to an EMS
            server, even though a firewall separates the application from the server.
            The proxy usually runs within the firewall's DMZ. A connection factory
            contacts the SSL proxy, requesting an SSL connection to the server. The
            proxy authenticates the application program, and mediates the initial
            SSL negotiation between application and server. After the SSL connection
            is established, the application and server use it to communicate
            directly with one another.
            </remarks>
            <param name="host"> The connection factory establishes SSL communication
            through a web proxy at this host. Supply a simple hostname, a 
            fully qualified hostname with domain name, or an IP address 
            (dot notation). 
            </param>
            <param name="port"> The connection factory establishes SSL communication
            through a web proxy on this port. </param>
            <exception cref="T:TIBCO.EMS.EMSException"> if the proxy host is null or empty,
            the port is zero or the protocol of the connection factory's URL is
            not SSL.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetSSLProxyAuth(System.String,System.String)">
            <summary>
            Set a connection factory's username and password for connecting through
            an SSL proxy.
            </summary>
            <remarks>
            <para>When a connection factory establishes an EMS server connection through 
            an SSL proxy host, the proxy might first require authentication before
            facilitating a connection. When required, use this call to set that
            authentication data on the connection factory. 
            </para>
            <b>Note: </b>
            This proxy authentication data is distinct from the server authentication data 
            and from the SSL private key encryption password.
            </remarks>
            <param name="username"> The connection factory authenticates itself 
            to the SSL proxy using this username. </param>
            <param name="password"> The connection factory authenticates itself 
            to the SSL proxy using this password. </param>
            <exception cref="T:TIBCO.EMS.EMSException"> if the protocol of the connection 
            factory's URL is not SSL.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.GetSSLProxyHost">
            <summary>
            Get the SSL proxy host from this connection factory.
            </summary>
            <returns>return the host</returns>
            <exception cref="T:TIBCO.EMS.EMSException"> if the protocol of the connection 
            factory's URL is not SSL.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.GetSSLProxyPort">
            <summary>
            Get the SSL proxy port from this connection factory.
            </summary>
            <returns> the port. </returns>
            <exception cref="T:TIBCO.EMS.EMSException"> if the protocol of the connection 
            factory's URL is not SSL.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.GetSSLProxyUser">
            <summary>
            Get the SSL proxy username from a connection factory.
            </summary>
            <returns> the username. </returns>
            <exception cref="T:TIBCO.EMS.EMSException"> if the protocol of the connection 
            factory's URL is not SSL.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.GetSSLProxyPassword">
            <summary>
            Get the SSL proxy password from a connection factory.
            </summary>
            <returns> the password. </returns>
            <exception cref="T:TIBCO.EMS.EMSException"> if the protocol of the connection 
            factory's URL is not SSL.
            </exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetConnAttemptTimeout(System.Int32)">
            <summary>Set the Connect Attempt timeout for a given connection.</summary>
            <remarks ref="true()"> 
            <para>This timeout is per url and per connect_attempt.
            For example, to specify two connect attempts for a given url, then 
            for each attempt the client will wait for the period specified by the 
            connect attempt timeout for the connection to be established. If no 
            connection is established within that the specified timeframe, the client 
            connection attempt is terminated. </para>
            </remarks>
            <param name="timeout">The timeout, in milliseconds.  The
            minimum value is 100 milliseconds. If a value of less than 100 
            milliseconds is specified, then the minimum value of 100 milliseconds 
            is used. </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetReconnAttemptTimeout(System.Int32)">
            <summary>
            Set the Reconnect Attempt timeout for a given connection.</summary>
            <remarks ref="true()">
            This timeout is per url and per reconnect_attempt. For example, to specify two 
            reconnect attempts for a given url, then for each attempt the client will 
            wait for the period specified by the reconnect attempt timeout for the 
            connection to be established. If no reconnection is established within 
            that the specified timeframe, the reconnection attempt is terminated. 
            </remarks>
            <param name="timeout">The timeout, in milliseconds.  The
            minimum value is 100 milliseconds. If a value of less than 100 
            milliseconds is specified, then the minimum value of 100 milliseconds 
            is used. </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetMulticastEnabled(System.Boolean)">
            <summary>
            Set whether MessageConsumers subscribed to a multicast-enabled topic
            will receive messages over multicast.</summary>
            <remarks ref="true()">
            When enabled, MessageConsumers subscribed to a multicast-enabled topic
            will receive messages over multicast. The default is enabled.
            </remarks>
            <param name="enabled">true to enable multicast, false to disable 
            multicast.</param>
            \deprecated As of release 8.3.
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetMulticastDaemon(System.String)">
            <summary>
            Set the port on which the client will connect to the multicast
            daemon.</summary>
            <remarks ref="true()">
            A connection to the multicast daemon is required when multicast is
            enabled and a MessageConsumer is subscribed to a multicast-enabled
            topic. Setting the port with this method will override the default
            port supplied by the server.
            </remarks>
            <param name="port">the port on which the client will connect to the
            multicast daemon.</param>
            \deprecated As of release 8.3.
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.CreateConnection">
            <summary> Create a connection </summary>
            <remarks ref="true()">
            The connection object presents 
            a default user identity. If the server configuration permits that user, 
            then the call succeeds.
            </remarks>
            <returns> The newly created <see cref="T:TIBCO.EMS.UFO.Connection">Connection</see>. 
            </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.CreateConnection(System.String,System.String)">
            <summary> Create a connection object with the given user name and password.</summary>
            <remarks ref="true()"></remarks>
            <param name="userName">The connection object presents this user identity to the
            server. This parameter can be omitted if the server isn't authenticating or authorizing
            users.</param>
            <param name="password">The connection object authenticates the user identity with this
            password. This parameter can be omitted if the server isn't authenticating or
            authorizing users.</param>
            <returns> The newly created <see cref="T:TIBCO.EMS.UFO.Connection">Connection</see>. 
            </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.GetCertificateStore">
            <summary> Get the certificate store info object associated with this 
            connection factory.
            </summary>
            <remarks> can be null or of type EMSSSLFileStoreInfo or 
            EMSSSLSystemStoreInfo. 
            NOTE: SSL Connection factory objects that are
            looked up in JNDI have a certificate store info already created.
            This allows a user to get access to the certificate store object
            and set properties not present in the JNDI object. e.g. ssl password.
            </remarks>
            <example>
            <code>
              EMSSSLFileStoreInfo info = (EMSSSLFileStoreInfo)cf.GetCertificateStore();
              String _password        = "password";
              info.SetSSLPassword(_password.ToCharArray());
            </code>
            </example>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetCertificateStoreType(TIBCO.EMS.EMSSSLStoreType,System.Object)">
            <summary> Set the certificate store type and info. </summary>
            <param name="type">The type of certificate store. Can be either 
            EMSSSL_STORE_TYPE_SYSTEM or EMSSSL_STORE_TYPE_FILE.  See
            <see cref="T:TIBCO.EMS.EMSSSLStoreType">TIBCO.EMS.EMSSSLStoreType</see> for details. </param>
            <param name="storeInfo">If the store type is EMSSSL_STORE_TYPE_SYSTEM, 
            then storeInfo must be an EMSSSLSystemStoreInfo object. If the store 
            type is EMSSSL_STORE_TYPE_FILE, then storeInfo must be an 
            <see cref="T:TIBCO.EMS.EMSSSLFileStoreInfo">TIBCO.EMS.EMSSSLFileStoreInfo</see> 
            object.</param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetHostNameVerifier(TIBCO.EMS.EMSSSLHostNameVerifier)">
            <summary> Set the custom host name verifier. Set to null to 
            remove custom host name verifier.
            </summary>
            <param name="verifier">Host name verifier. Set to null to remove custom 
            host name verifier. See <see cref="T:TIBCO.EMS.EMSSSLHostNameVerifier">TIBCO.EMS.EMSSSLHostNameVerifier</see> 
            for details.
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetClientTracer(System.IO.StreamWriter)">
            <summary> Set client tracer to given output stream. </summary>
            <remarks>Client tracing prints loaded certificates and information 
            about the SSL handshake errors and results.
            </remarks>
            <param name="tracer">The output stream to send the tracing information. 
            Specify null as parameter to disable client tracing. </param>
            
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetTargetHostName(System.String)">
            <summary> Set the name of the target EMS server.</summary>
            <remarks>
            This is a required parameter for all .NET SSL connections.
            Because System.Net.Security.SslStream requires a targetHost, 
            this value is required and cannot be NULL.
            </remarks>
            <param name="targetHostName"> The name of the server as defined in the
            server's certificate. Usually the server's HostName is specified as the
            CN in the server's certificate.
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.SetBlockingOnRecovery(System.Boolean)">
            <summary> Enable or Disable blocking on JMS API call when the connection 
            is diconnected or in recovery. 
            </summary>
            <param name= "blocking"> true enables blocking and false disables blocking
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ConnectionFactory.ToString">
            <summary>Returns a string representation of this <c>ConnectionFactory</c> 
            object.</summary>
            <returns>A string representation </returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.ConnectionFailureException">
            <summary> This exception is thrown when an invocation of JMS 
            method is failed due to connection failure in callback.
            </summary>
        </member>
        <member name="T:TIBCO.EMS.UFO.Destination">
            <summary>A Destination object encapsulates a TIBCO EMS specific address.</summary>
            <remarks ref="true()">
            <para>
            Administrators define destinations in the server. Client programs access them 
            using methods of LookupContext.</para>
            <para>The Destination class defines the root behavior of all destinations.
            Programs do not create instances of this class; instead, they 
            create instances of its subclasses.</para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.Destination.EMSDestination">
            <summary> Gets the TIBCO.EMS destination object of this UFO destination.
            
            </summary>
            <returns> the UFO destination's TIBCO.EMS destination.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Destination.#ctor(TIBCO.EMS.Destination)">
            <summary> Constructs a TIBCO.EMS.UFO Destination object with
            the given TIBCO.EMS.Destination object.
            
            </summary>
            <param name="destination">object of TIBCO.EMS.Destination
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.Destination.Clone">
            <summary>Creates a copy of the Destination object. </summary>
        </member>
        <member name="M:TIBCO.EMS.UFO.Destination.ToString">
            <summary> Returns a string representation of the destination. </summary>
            <returns> A string representation of the destination. </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Destination.Equals(System.Object)">
            <summary>Compare with another object for equality. </summary>
            <remarks> The current instance is said to be equals to another
            object when the latter is also a <c>Destination</c> instance and
            both have the same address. </remarks>
            <param name="obj">The object to compare with </param>
            <returns>true if the object passed is also of type Queue and
            has the same address as the current instance, false otherwise.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Destination.GetHashCode">
            <summary>
            Returns a hashcode representing the current object
            </summary>
            <returns>A hashcode based on the Destination's address.
            </returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.ICompletionListener">
            <summary>
            Notifies the application an asynchronous send has completed.
            </summary>
            <remarks ref="true()"> 
            <para> A CompletionListener is implemented by the application and may be 
            specified when a message is sent asynchronously. 
            </para>
            <para> When the sending of the message is complete, the application
            is notified through the OnCompletion(Message) method of the specified
            completion listener.  Only when that callback has been invoked can
            the application be sure that the message has been successfully sent
            with the same degree of confidence as if a normal synchronous send
            had been performed. An application which requires this degree of 
            confidence must therefore wait for the callback to be invoked before
            continuing. If the sending of the message fails for any reason, and
            an exception cannot be thrown by the send method, then the
            OnException(Exception) method of the specified completion listener
            is called.
            </para>
            <para>
            The following information is intended to give an indication of how an
            asynchronous send would typically be implemented. 
            </para>
            <para>
            A normal synchronous send involves sending the message to a remote
            EMS server and then waiting for an acknowledgement to be received
            before returning. EMS implements an asynchronous send by sending
            the message to the remote EMS server and then returning without
            waiting for an acknowledgement. When the acknowledgement is received,
            EMS will notify the application by invoking the OnCompletion method
            on the application-specified ICompletionListener object.
            If for some reason the acknowledgement is not received, then EMS will
            notify the application by invoking the ICompletionListener's
            OnException method. 
            </para>
            <para>
            It is highly recommended that a synchronous send is used when
            using reliable or non-persistent delivery.  An asynchronous send
            will always schedule an ICompletionListener event; with lower levels
            of reliability, synchronous sends will perform better compared
            to asynchronous sends.
            </para>
            <para><b>Quality of service:</b> After the send operation has
            completed successfully, which means that the message has been
            successfully sent with the same degree of confidence as if a
            normal synchronous send had been performed, EMS will invoke the
            ICompletionListener's OnCompletion method. The ICompletionListener
            will not be invoked earlier than this.
            </para>
            <para>
            <b>Exceptions:</b>  If an exception is encountered during the call
            to the send method, then an appropriate exception will be thrown in
            the thread that is calling the send method. EMS will not invoke the
            ICompletionListener's OnCompletion or OnException method. If an
            exception is encountered which cannot be thrown in the thread that
            is calling the send method then EMS will call the ICompletionListener's
            OnException method.  In both cases if an exception occurs it is
            undefined  whether or not the message was successfully sent. </para>
            <para>
            <b>Message order:</b> If the same MessageProducer is used to send
            multiple messages then EMS message ordering will be maintained.
            This applies even if a combination of synchronous and asynchronous
            sends has been performed. The application is not required to wait for
            an asynchronous send to complete before sending the next message.
            </para>
            <para>
            <b>Close, commit or rollback:</b> If the close method is called on the
            MessageProducer or its Session or Connection then EMS will block until
            any incomplete send operations have been completed and all
            ICompletionListener callbacks have returned before closing the object
            and returning. If the session is transacted (uses a local transaction)
            then when the Session's commit or rollback method is called EMS will block
            until any incomplete send operations have been completed and all
            ICompletionListener callbacks have returned before performing the commit
            or rollback. Incomplete sends will be allowed to complete normally
            unless an error occurs. 
            </para>
            <para>
            A ICompletionListener callback method must not call close on its own
            Connection, Session or MessageProducer or call commit or rollback on
            its own Session. Doing so will cause the close, commit or rollback to
            throw an IllegalStateException.
            </para>
            <para>
            <b>Message headers:</b> EMS defines a number of message header fields
            and message properties which are set upon a send.  If the send is
            asynchronous these fields and properties may be accessed on the
            sending client only after the ICompletionListener has been invoked.
            If the ICompletionListener's OnException method is called then the
            state of these message header fields and properties is undefined. 
            </para>
            <para>
            <b>Restrictions on threading:</b> Applications that perform an
            asynchronous send must conform to EMS threading restrictions.  This
            means that the session may be used by only one thread at a time.
            </para>
            <para>
            Setting a CompletionListener does not cause the session to be
            dedicated to the thread of control which calls the CompletionListener.
            The application thread may therefore continue to use the session after 
            performing an asynchronous send. However the CompletionListener's 
            callback methods must not use the session if an application thread
            might be using the session at the same time. 
            </para>
            <para>
            <b>Use of the CompletionListener:</b> A session will only
            invoke one CompletionListener callback method at a time. For a given
            MessageProducer, callbacks (both OnCompletion and OnException) will
            be performed in the same order as the corresponding calls to the
            asynchronous send method. An EMS provider must not invoke the 
            CompletionListener from the thread that is calling the asynchronous
            send method. 
            </para>
            <para>
            <b>Restrictions on the use of the Message object:</b>  Applications
            which perform an asynchronous send must take account of the
            restriction that a Message object is designed to be accessed by one
            logical thread of control at a time and does not support concurrent
            use. 
            </para>
            <para>After the send method has returned, the application must not
            attempt to read the headers, properties or body of the Message
            object until the CompletionListener's OnCompletion or OnException
            method has been called. This is because the EMS may be modifying 
            the Message object in another thread during this time.
            </para>
            <para>ICompletionListener mimics the way in which JMS receives notification of message 
            completion in a Java programming idiom.
            </para>
            </remarks>
            <seealso cref="T:TIBCO.EMS.MessageProducer">MessageProducer class</seealso>
            <seealso cref="T:TIBCO.EMS.TopicPublisher">TopicPublisher class</seealso>
            <seealso cref="T:TIBCO.EMS.QueueSender">QueueSender class</seealso>
        </member>
        <member name="M:TIBCO.EMS.UFO.ICompletionListener.OnCompletion(TIBCO.EMS.UFO.Message)">
            <summary>   Notifies the application that the message has been successfully sent </summary>
            <remarks ref="true()">
            </remarks>
            <param name="msg"> The message that was sent </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.ICompletionListener.OnException(TIBCO.EMS.UFO.Message,System.Exception)">
            <summary>  Notifies the application that the specified exception was thrown while
            attempting to send the specified message </summary>
            <remarks ref="true()">
            </remarks>
            <param name="msg"> The message that was sent </param>
            <param name="ex"> The exception </param>
        </member>
        <member name="T:TIBCO.EMS.UFO.IMessageListener">
            <summary>Asynchronously process an arriving message. </summary>
            <remarks ref="true()"> 
            <para>This interface provides an asynchronous pathway for receiving messages. 
            In order to receive messages asynchronously, a client implements this interface 
            and calls setMessageListener to register the message listener with 
            a MessageConsumer. When a message arrives, the client library calls the 
            listener's onMessage method with the message as its argument.
            </para>
            <para>Each session insures that it passes messages serially to the listener. This means that a 
            listener assigned to one or more consumers of the same session can assume that the onMessage method is 
            not called with the next message until the session has completed the last call
            </para>
            <para>IMessageListener mimics the way in which JMS receives messages in a Java 
            programming idiom. In contrast, EMSMessageHandler provides similar functionality 
            in a .NET idiom. Programmers may select either idiom but not both (which would 
            cause duplicate message processing, with undefined behavior).
            </para>
            <para><b>Deprecated</b></para>
            <para>In earlier releases, clients could register listeners with sessions as well as 
            consumers. This practice is now deprecated - we recommend migrating existing code 
            to one of these two practices:</para>
            <list type="bullet">
            <item><description>Java Idiom  Register listeners with consumers.</description></item>
            <item><description>.NET Idiom  Register EMSMessageHandler delegates with consumers.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.IMessageListener.OnMessage(TIBCO.EMS.UFO.Message)">
            <summary>  Passes a message to the message listener </summary>
            <remarks ref="true()">
            </remarks>
            <param name="message"> The message to be passed to the message listener </param>
        </member>
        <member name="T:TIBCO.EMS.UFO.LookupContext">
            <summary>Search for and perform queries on administered objects in the EMS server </summary>
            <remarks>
            <para>The LookupContext class provides an interface for users to 
            search and perform queries against the naming/directory server built into EMS. 
            </para>
            <para>User can create an instance of the LookupContext and invoke the 
            <c>Lookup(string name)</c> method which returns the queried object 
            or throw a NamingException in case of failure.  The information 
            required to perform a search includes the url of the directory service 
            provider (e.g. the Tibco Enterprise Message Service Server) and user name and 
            password, if necessary.
            </para>
            <para>The following is an example of its usage:
            </para>
            <example><code>
                Hashtable env = new Hashtable();
                env.Add(TIBOC.EMS.LookupContext.PROVIDER_URL, "tibjmsnaming://localhost:7222");
                env.Add(TIBOC.EMS.LookupContext.SECURITY_PRINCIPAL", "myUserName");
                env.Add(TIBOC.EMS.LookupContext.SECURITY_CREDENTIALS", "myPassword");
                try { 
                    LookupContext searcher = new LookupContext(env);
                    TIBCO.EMS.UFO.Queue queue = (TIBCO.EMS.UFO.Queue)searcher.Lookup("theQueueName");
                    ...
                } catch (NamingException) {
                    ...
                }
            </code></example>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.LookupContext.#ctor">
            <summary> Create a new LookupContext object</summary>
            <remarks>This method creates a new lookup context without property settings.</remarks>
            <exception cref="T:TIBCO.EMS.NamingException">If error occurred in constructing a 
            Namesearcher object </exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.LookupContext.#ctor(System.Collections.Hashtable)">
            <summary> Create a new LookupContext object with specific properties
            </summary>
            <remarks>This method creates a new lookup context with the given property 
            settings. The properties that are being referred to here are lookup 
            context properties required to connect naming server.</remarks>
            <param name="prop">The hashtable of property settings </param>
            <exception cref="T:TIBCO.EMS.NamingException">If error occurred in constructing a 
            Namesearcher object </exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.LookupContext.Lookup(System.String)">
             <summary>Lookup an object in the naming server </summary>
             <remarks>
             This method provides the naming service to
             query an object by its name. 
             
             <example> 
             <para>For example:
             <code>
             
                 Hashtable env = new Hashtable();
                 env.Add(TIBCO.EMS.LookupContext.PROVIDER_URL, "tibjmsnaming://localhost:7222");
                 env.Add(TIBCO.EMS.LookupContext.SECURITY_PRINCIPAL", "myUserName");
                 env.Add(TIBCO.EMS.LookupContext.SECURITY_CREDENTIALS", "myPassword");
                 try {
                       TIBCO.EMS.LookupContext searcher = new TIBCO.EMS.LookupContext(env);
                       TIBCO.EMS.UFO.Queue queue = (TIBCO.EMS.UFO.Queue)searcher.Lookup("theQueueName");
                       ...
                 } catch (NamingException) {
                       ...
                 }
             </code>
             </para>
             </example>
             </remarks>
             <param name="name">The name of the object to look up from the naming server.</param>
             <returns>The named object.</returns>
             <exception cref="T:TIBCO.EMS.AuthenticationException">If authentication to the naming server has failed. </exception>
             <exception cref="T:TIBCO.EMS.ServiceUnavailableException">If the naming service is unavailable. </exception>
             <exception cref="T:TIBCO.EMS.NamingException">If the named object is not found or the 
             query to the naming service failed. </exception>
            
        </member>
        <member name="T:TIBCO.EMS.UFO.LookupContextFactory">
            <summary>Create ILookupContext objects</summary>
            
            <remarks>
            <para>To lookup administered objects (ConnectionFactories, Topics
            and Queues) in either a third-party LDAP naming 
            server or the TIBCO EMS Naming server, clients create an instance 
            of the LookupContextFactory and invoke the 
            <see cref="M:TIBCO.EMS.UFO.LookupContextFactory.CreateContext(System.String,System.Collections.Hashtable)"/> method to get an 
            <see cref="T:TIBCO.EMS.ILookupContext">ILookupContext</see> object.
            </para>
            <para>Users can create an instance of the LookupContextFactory and the
            invoke the CreateContext method to get a LDAP_CONTEXT or TIBJMS_NAMING_CONTEXT object.
            </para>
            <para> Example for creating a context for looking up objects in the
            built in naming/directory server
            <example><code>
                Hashtable env = new Hashtable();
                env.Add(TIBCO.EMS.LookupContext.PROVIDER_URL, "tibjmsnaming://localhost:7222");
                env.Add(TIBCO.EMS.LookupContext.SECURITY_PRINCIPAL", "myUserName");
                env.Add(TIBCO.EMS.LookupContext.SECURITY_CREDENTIALS", "myPassword");
                try { 
                    LookupContextFactory factory = new LookupContextFactory();
                    TIBOCO.EMS.ILookupContext searcher = factory.CreateContext(LookupContextFactory.TIBJMS_NAMING_CONTEXT, env);
                    TIBCO.EMS.UFO.Queue queue = (TIBCO.EMS.UFO.Queue)searcher.Lookup("theQueueName");
                    ...
                } catch (NamingException) {
                    ...
                }
            </code></example>
            </para>
            <para> This example shows how to lookup an object in the 
            LDAP server by getting an LdapLookupContext from the LookupConextFactory. 
            By passing a Hashtable filled with keys from <see cref="T:TIBCO.EMS.LdapLookupConsts">LdapLookupConsts</see>
            and corresponding values, the LookupContext is configured.
            <example><code>
                 Hashtable table = new Hashtable();
                 table.Add(LdapLookupConsts.LDAP_SERVER_URL, "10.105.185.30:10389");
                 table.Add(LdapLookupConsts.LDAP_BASE_DN, "ou=People,dc=emsproject");
                 table.Add(LdapLookupConsts.LDAP_PRINCIPAL, "cn=Manager");
                 table.Add(LdapLookupConsts.LDAP_CREDENTIAL, "password");
                 table.Add(LdapLookupConsts.LDAP_CONN_TYPE, "ldap");
                try { 
                    LookupContextFactory factory = new LookupContextFactory();
                    ILookupContext searcher = factory.CreateContext(LookupContextFactory.LDAP_CONTEXT, env);
                    TIBCO.EMS.UFO.Queue queue = (TIBCO.EMS.UFO.Queue)searcher.Lookup("theQueueName");
                    ...
                } catch (NamingException) {
                    ...
                }
            </code></example>
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.LookupContextFactory.#ctor">
            <summary> Default constructor to create a context factory
            </summary>
        </member>
        <member name="M:TIBCO.EMS.UFO.LookupContextFactory.CreateContext(System.String,System.Collections.Hashtable)">
            <summary>Returns the initial context used to search for administered 
            objects</summary>
            <remarks ref="true()">
            <para>This method returns an <see cref="T:TIBCO.EMS.ILookupContext">ILookupContext</see>
            object that is the initial 
            context used to look up administered object in the EMS server or 
            an LDAP server. The currently supported contexts are tibjmsnaming 
            and ldap.
            </para>
            
            <para>Before calling CreateContext, first create a hash table of properties 
            (defined in <see cref="T:TIBCO.EMS.LdapLookupConsts">LdapLookupConsts</see> and 
            <see cref="T:TIBCO.EMS.LookupContext">LookupContext</see>) 
            and their values. </para>
            <example>
            <para>This example demonstrates how to create an initial context for looking 
            up a queue object in the EMS naming server:</para>
            <code>
            Hashtable env = new Hashtable();
              env.Add(LookupContext.PROVIDER_URL, "tibjmsnaming://localhost:7222");
              env.Add(LookupContext.SECURITY_PRINCIPAL", "myUserName");
              env.Add(LookupContext.SECURITY_CREDENTIALS", "myPassword");
            
            LookupContextFactory factory = new LookupContextFactory();
            ILookupContext searcher = factory.CreateContext(
                                     LookupContextFactory.TIBJMS_NAMING_CONTEXT, env);
            TIBCO.EMS.UFO.Queue queue = (TIBCO.EMS.UFO.Queue)searcher.Lookup("theQueueName");
            </code>
            This example shows how to look up a connection factory, named 
            <c>testConnFact</c>, in a third-party LDAP server located at the 
            URL: 10.105.185.30:10389:
            <code>
            Hashtable env = new Hashtable();
              table.Add(LdapLookupConsts.LDAP_SERVER_URL, "10.105.185.30:10389");
              table.Add(LdapLookupConsts.LDAP_BASE_DN,"ou=People,dc=nmunjal1");
              table.Add(LdapLookupConsts.LDAP_PRINCIPAL, "cn=Manager");
              table.Add(LdapLookupConsts.LDAP_CREDENTIAL, "password");
              table.Add(LdapLookupConsts.LDAP_CONN_TYPE, "ldap");
            
            LookupContextFactory contextFactory = new LookupContextFactory();
            ILookupContext searcher = contextFactory.CreateContext(
                                      LookupContextFactory.LDAP_CONTEXT, env); 
            
            ConnectionFactory cf = (ConnectionFactory)searcher.Lookup("cn=testConnFact");
            </code>
            This example shows how to look up a connection factory object in the LDAP server via SSL.
            <code>
            Hashtable props = new Hashtable(); 
            props.Add(LdapLookupConsts.LDAP_SERVER_URL", "adc1.na.tibco.com:10636");
            props.Add(LdapLookupConsts.LDAP_BASE_DN", "ou=People,dc=test-user");
            props.Add(LdapLookupConsts.LDAP_PRINCIPAL", "cn=Manager");
            props.Add(LdapLookupConsts.LDAP_CREDENTIAL", "password");
            props.Add(LdapLookupConsts.LDAP_SEARCH_SCOPE, "subtree");
            props.Add(LdapLookupConsts.LDAP_CONN_TYPE, "ldaps");
            props.Add(LdapLookupConsts.LDAP_CERT_NAME, "certName");
            props.Add(LdapLookupConsts.LDAP_CERT_STORE_NAME, "My");
            props.Add(LdapLookupConsts.LDAP_CERT_STORE_LOCATION, "currentuser");
              
            LdapLookupSSLParams sslparams = new LdapLookupSSLParams();
            sslparams.SetSSLQueryClientCertificateCallback(QueryClientCertificateCallback);
            sslparams.SetSSLVerifyServerCertificateCallback(VerifyServerCertificateCallback);
            props.Add(LdapLookupConsts.LDAP_SSL_PARAMS, sslparams);
            
            LookupContextFactory contextFactory = new LookupContextFactory();
            ILookupContext searcher = contextFactory.CreateContext(
                                      LookupContextFactory.LDAP_CONTEXT,
                                      props);    
            ConnectionFactory cf =  searcher.Lookup("cn=testConnFact");
            Console.WriteLine("cf = " + cf.ToString());
            </code></example>
            </remarks>
            <param name="name">Can be either:
            <list type="bullet">
            <item><see cref="F:TIBCO.EMS.LookupContextFactory.TIBJMS_NAMING_CONTEXT"/> to create an initial context 
            in the EMS server.</item>
            <item><see cref="F:TIBCO.EMS.LookupContextFactory.LDAP_CONTEXT"/> to create an initial context in an 
            LDAP server.</item>
            </list></param>
            <param name="props">Hash table of properties.</param>
            <returns> An object that implements ILookupContext interface 
            </returns>
            <exception cref="T:System.ArgumentException"> If name is <c>null</c> or
            invalid name (anything other than tibjmsnaming or ldap) 
            is specified
            </exception>
        </member>
        <member name="T:TIBCO.EMS.UFO.MapMessage">
            <summary> A MapMessage object is used to send a set of name-value pairs. 
            The names are String objects, and the values are primitive data types
            in the .NET programming language. The names must have a value that is
            not null, and not an empty string. The entries can be accessed sequentially
            or randomly by name. The order of the entries is undefined. MapMessage 
            inherits from the Message interface and adds a message body that contains a Map. 
            </summary>
            <remarks ref="true()">
            <para>The primitive types can be read or written explicitly using methods
            for each type. They may also be read or written generically as objects. 
            For instance, a call to MapMessage.setInt("foo", 6) is equivalent 
            to MapMessage.setObject("foo", new Integer(6)). Both forms are provided, 
            because the explicit form is convenient for static programming, and 
            the object form is needed when types are not known at compile time. 
            </para>
            <para> When a client receives a MapMessage, it is in read-only mode.
            If a client attempts to write to the message at this point, 
            a MessageNotWriteableException is thrown. If clearBody is called,
            the message can now be both read from and written to. 
            </para>
            <para><b>Extentions</b></para>
            <para>TIBCO Enterprise Message Service extends the JMS MapMessage and 
            StreamMessage body types in two ways. These extensions allow TIBCO 
            Enterprise Message Service to exchange messages with TIBCO Rendezvous 
            programs, which have certain features not 
            available within the JMS specification. </para>
            <list type="bullet">
            <item><description> You can insert another MapMessage or StreamMessage 
            instance as a submessage into a MapMessage or StreamMessage, generating 
            a series of nested messages, instead of a flat message. </description></item>
            <item><description> You can use arrays as well as primitive types for the values.
            </description></item>
            </list>
            <para> These extensions add considerable flexibility to the two body types. 
            However, they are extensions and therefore not compliant with JMS specifications. 
            Extended messages are tagged as extensions with the vendor property tag JMS_TIBCO_MSG_EXT. </para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.MapMessage.FieldCount">
            <summary>
            Returns number of fields that this message holds.
            </summary>
            <remarks>Programs cannot set this property.</remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.MapMessage.MapNames">
            <summary> Returns an Enumeration of all the names in 
            the MapMessage object. </summary>
            <remarks>
            <para>Programs can get an enumerator that produces the names of all the data
            items in the message body.</para>
            </remarks>
            <returns>an enumeration of all the names in this MapMessage </returns>
            \deprecated Use the GetMapNames() instead, which returns a collection of names
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.Clone">
            <summary> Implements the clone method from ICloneable interfacae </summary>
            <remarks> Makes a clone of the message.
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.ClearBody">
            <summary> Clears out the message body. Clearing a message's body does 
            not clear its header values or property entries. 
            </summary>
            <remarks>
            <para> If this message body was read-only, calling this method leaves
            the message body in the same state as an empty body in a newly created
            message. 
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.GetBoolean(System.String)">
            <summary>Returns the boolean value with the specified name. </summary>
            <param name="name">the name of the boolean </param>
            <returns>The boolean value with the specified name.
            Returns null if the message does not have a field set for the name.</returns>
            <exception cref="T:TIBCO.EMS.EMSException">if the message could not be read due to an internal error </exception>
            <exception cref="T:TIBCO.EMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.GetByte(System.String)">
            <summary>Returns the byte value with the specified name. </summary>
            <param name="name">the name of the byte </param>
            <returns>The byte value with the specified name.
            Returns null if the message does not have a field set for the name.</returns>
            <exception cref="T:TIBCO.EMS.EMSException">if the message could not be read due to an internal error </exception>
            <exception cref="T:TIBCO.EMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.GetShort(System.String)">
            <summary>Returns the short value with the specified name. </summary>
            <param name="name">the name of the short </param>
            <returns>The short value with the specified name.
            Returns null if the message does not have a field set for the name.</returns>
            <exception cref="T:TIBCO.EMS.EMSException">if the message could not be read due to an internal error </exception>
            <exception cref="T:TIBCO.EMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.GetChar(System.String)">
            <summary>Returns the char value with the specified name. </summary>
            <param name="name">the name of the char </param>
            <returns>The char value with the specified name.
            Returns null if the message does not have a field set for the name.</returns>
            <exception cref="T:TIBCO.EMS.EMSException">if the message could not be read due to an internal error </exception>
            <exception cref="T:TIBCO.EMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.GetInt(System.String)">
            <summary>Returns the int value with the specified name. </summary>
            <param name="name">the name of the int </param>
            <returns>The int value with the specified name.
            Returns null if the message does not have a field set for the name.</returns>
            <exception cref="T:TIBCO.EMS.EMSException">if the message could not be read due to an internal error </exception>
            <exception cref="T:TIBCO.EMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.GetLong(System.String)">
            <summary>Returns the long value with the specified name. </summary>
            <param name="name">the name of the long </param>
            <returns>The long value with the specified name.
            Returns null if the message does not have a field set for the name.</returns>
            <exception cref="T:TIBCO.EMS.EMSException">if the message could not be read due to an internal error </exception>
            <exception cref="T:TIBCO.EMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.GetFloat(System.String)">
            <summary>Returns the float value with the specified name. </summary>
            <param name="name">the name of the float </param>
            <returns>The float value with the specified name.
            Returns null if the message does not have a field set for the name.</returns>
            <exception cref="T:TIBCO.EMS.EMSException">if the message could not be read due to an internal error </exception>
            <exception cref="T:TIBCO.EMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.GetDouble(System.String)">
            <summary>Returns the double value with the specified name. </summary>
            <param name="name">the name of the double </param>
            <returns>The double value with the specified name.
            Returns null if the message does not have a field set for the name.</returns>
            <exception cref="T:TIBCO.EMS.EMSException">if the message could not be read due to an internal error </exception>
            <exception cref="T:TIBCO.EMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.GetString(System.String)">
            <summary>Returns the string value with the specified name. </summary>
            <param name="name">the name of the string </param>
            <returns>The string value with the specified name.
            Returns null if the message does not have a field set for the name.</returns>
            <exception cref="T:TIBCO.EMS.EMSException">if the message could not be read due to an internal error </exception>
            <exception cref="T:TIBCO.EMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.GetBytes(System.String)">
            <summary>Returns the byte array value with the specified name. </summary>
            <param name="name">the name of the byte array </param>
            <returns>The byte array value with the specified name.
            Returns null if the message does not have a field set for the name.</returns>
            <exception cref="T:TIBCO.EMS.EMSException">if the message could not be read due to an internal error </exception>
            <exception cref="T:TIBCO.EMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.GetObject(System.String)">
            <summary>Returns the object value with the specified name. </summary>
            <param name="name">the name of the object </param>
            <returns>The object value with the specified name.
            Returns null if the message does not have a field set for the name.</returns>
            <exception cref="T:TIBCO.EMS.EMSException">if the message could not be read due to an internal error </exception>
            <exception cref="T:TIBCO.EMS.MessageFormatException">if this type conversion is invalid.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.GetMapNames">
             <summary> Returns a collection of all the names in 
             the MapMessage object. </summary>
             <returns>A collection of all the names in this MapMessage </returns>
             <remarks>
             <para>Programs can get a collection of the names of all the data
             items in the message body.</para>
             <code>
                 MapMessage mapMsg = sess.CreateMapMessage();
                 mapMsg.SetBoolean("bool1", true);
                 mapMsg.SetInt("int1", 42);
            
                 // if the user needs a collection for use in a foreach loop
                 ICollection mapNames = mapMsg.GetMapNames();
                 foreach (String name in mapNames)
                    Console.WriteLine("map name = " + name);
             
                 // if the user needs an enumerator like the old MapNames property
                 IEnumerator enumerator = mapMsg.GetMapNames().GetEnumerator();
                 while(enumerator.MoveNext())
                 {
                     String name = (String)enumerator.Current;
                     Console.WriteLine("map name = " + name);
                  }
             </code>
             </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.SetBoolean(System.String,System.Boolean)">
            <summary>Sets a boolean value with the specified name into the Map. </summary>
            <param name="name">The name of the boolean. Name cannot be null or an empty string. </param>
            <param name="value">The boolean value to set in the Map </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">A TIBCO.EMS.MessageNotWriteableException may be thrown if the message is in read-only mode </exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.SetByte(System.String,System.Byte)">
            <summary>Sets a byte value with the specified name into the Map. </summary>
            <param name="name">The name of the byte. Name cannot be null or an empty string. </param>
            <param name="value">The byte value to set in the Map </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">A TIBCO.EMS.MessageNotWriteableException may be thrown if the message is in read-only mode </exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.SetShort(System.String,System.Int16)">
            <summary>Sets a short value with the specified name into the Map. </summary>
            <param name="name">The name of the short. Name cannot be null or an empty string. </param>
            <param name="value">The short value to set in the Map </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">A TIBCO.EMS.MessageNotWriteableException may be thrown if the message is in read-only mode </exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.SetChar(System.String,System.Char)">
            <summary>Sets a char value with the specified name into the Map. </summary>
            <param name="name">The name of the char. Name cannot be null or an empty string. </param>
            <param name="value">The char value to set in the Map </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">A TIBCO.EMS.MessageNotWriteableException may be thrown if the message is in read-only mode </exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.SetInt(System.String,System.Int32)">
            <summary>Sets an int value with the specified name into the Map. </summary>
            <param name="name">The name of the int. Name cannot be null or an empty string. </param>
            <param name="value">The int value to set in the Map </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">A TIBCO.EMS.MessageNotWriteableException may be thrown if the message is in read-only mode </exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.SetLong(System.String,System.Int64)">
            <summary>Sets a long value with the specified name into the Map. </summary>
            <param name="name">The name of the long. Name cannot be null or an empty string. </param>
            <param name="value">The long value to set in the Map </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">A TIBCO.EMS.MessageNotWriteableException may be thrown if the message is in read-only mode </exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.SetFloat(System.String,System.Single)">
            <summary>Sets a float value with the specified name into the Map. </summary>
            <param name="name">The name of the float. Name cannot be null or an empty string. </param>
            <param name="value">The float value to set in the Map </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">A TIBCO.EMS.MessageNotWriteableException may be thrown if the message is in read-only mode </exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.SetDouble(System.String,System.Double)">
            <summary>Sets a double value with the specified name into the Map. </summary>
            <param name="name">The name of the double. Name cannot be null or an empty string. </param>
            <param name="value">The double value to set in the Map </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">A TIBCO.EMS.MessageNotWriteableException may be thrown if the message is in read-only mode </exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.SetString(System.String,System.String)">
            <summary>Sets a string value with the specified name into the Map. </summary>
            <param name="name">The name of the string </param>
            <param name="value">The string value to set in the Map </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">A TIBCO.EMS.MessageNotWriteableException may be thrown if the message is in read-only mode </exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.SetBytes(System.String,System.Byte[])">
            <summary>Sets a byte array value with the specified name into the Map. </summary>
            <param name="name">The name of the byte array. </param>
            <param name="value">The byte array value to set in the Map </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">A TIBCO.EMS.MessageNotWriteableException may be thrown if the message is in read-only mode </exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.SetBytes(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>Sets a portion of the byte array value with the specified name into the Map. </summary>
            <param name="name">The name of the boolean. </param>
            <param name="value">The byte array value to set in the Map </param>
            <param name="offset">the initial offset within the byte array </param>
            <param name="length"> the number of bytes to use </param>
            <remarks>This method extracts the specified bytes and uses them as the value; otherwise it 
            uses the entire byte array. The offset and length arguments must be between 
            zero and value.length (inclusive) and their sum must also fall within the same range. 
            That is, these two arguments must specify a span of bytes within the value argument. 
            Otherwise, this method throws an System.IndexOutOfRangeException and does not set any value.</remarks>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">A TIBCO.EMS.MessageNotWriteableException may be thrown if 
            the message is in read-only mode </exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if value is null</exception>
            <exception cref="T:System.IndexOutOfRangeException">An IndexOutOfRangeException may be thrown if the 
            offset and length arguments do not specify a span of bytes within the array specified by the
            value argument.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.SetObject(System.String,System.Object)">
            <summary>Sets an object value with the specified name into the Map. </summary>
            <param name="name">The name of the object. Name cannot be null or an empty string. </param>
            <param name="value">The object value to set in the Map </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">A TIBCO.EMS.MessageNotWriteableException may be thrown if the message is in read-only mode </exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.ItemExists(System.String)">
            <summary> Indicates whether an item exists in this MapMessage object. </summary>
            <param name="name">the name of the item to test </param>
            <returns>true if the item exists </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.MapMessage.ToString">
            <summary> returns a string representation of the message </summary>
            <returns> a string representation of the message </returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.Message">
             <summary> Messages carry information among EMS client programs.  
             <para>
             The Message interface is the root interface of all TIBCO Enterprise Message Service 
             .NET messages. 
             It defines the message header and the acknowledge method used for all messages. 
             All other message types extend this root interface.
             </para>
             </summary>
             <remarks ref="true()">
            
             <para>
             The TIBCO Enterprise Message Service .NET Client API messages are composed of the following parts: 
             <list type="bullet">
             <item><description>Header - Headers associate a fixed set of header field names with values.
             Clients and providers use headers to identify and route messages. All messages support the same 
             set of header fields. </description></item>
             <item><description>Properties - Each message contains a built-in facility for supporting 
             application-defined property values. Properties associate an extensible set of property
             names with values. The EMS server uses properties to attach ancillary information to
             messages. Client applications can also use properties - for example, to customize message
             filtering. </description></item>
             <item><description>Body - The body of a message bears the information content of an application. Several types of message body organize that information in different ways. </description></item>
             </list>
             </para>
            
             <para><b>Message Bodies</b></para>
             <para>The TIBCO EMS .NET API defines five types of message body: 
             <list type="bullet">
             <item><description>Stream - A StreamMessage object's message body contains a stream of primitive values in the .NET programming language (".NET primitives"). It is filled and read sequentially. </description></item>
             <item><description>Map - A MapMessage object's message body contains a set of name-value pairs, where names are String objects, and values are .NET primitives. The entries can be accessed sequentially or randomly by name. The order of the entries is undefined. </description></item>
             <item><description>Text - A TextMessage object's message body contains a .NET String object. This message type can be used to transport plain-text messages, and XML messages.</description></item> 
             <item><description>Object - An ObjectMessage object's message body contains a Serializable .NET object. </description></item>
             <item><description>Bytes - A BytesMessage object's message body contains a stream of uninterpreted bytes. This message type is for literally encoding a body to match an existing message format. In many cases, it is possible to use one of the other body types, which are easier to use. Although the TIBCO EMS .NET API allows the use of message properties with byte messages, they are typically not used, since the inclusion of properties may affect the format.</description></item>
             </list>
             </para>
            
             <para><b>JMS Headers as .NET Properties</b></para>
             <para>These JMS headers are available as .NET properties of message objects: 
             <list type="bullet">
             <item><description>CorrelationID</description></item>
             <item><description>CorrelationIDAsBytes </description></item>
             <item><description>DeliveryMode </description></item>
             <item><description>MsgDeliveryMode </description></item>
             <item><description>Destination </description></item>
             <item><description>Expiration </description></item>
             <item><description>MessageID </description></item>
             <item><description>MsgType </description></item>
             <item><description>Priority </description></item>
             <item><description>Redelivered </description></item>
             <item><description>ReplyTo </description></item>
             <item><description>Timestamp </description></item>
             <item><description>DeliveryTime </description></item>
             </list>
             </para>
            
             </remarks>
        </member>
        <member name="F:TIBCO.EMS.UFO.Message.DEFAULT_DELIVERY_MODE">
            <summary> The message producer's default delivery mode is PERSISTENT. </summary>
            <remarks ref="true()">
            When neither the sending call nor the producer supplies a delivery mode, this default applies.
            </remarks>
        </member>
        <member name="F:TIBCO.EMS.UFO.Message.DEFAULT_MSG_DELIVERY_MODE">
            <summary> The message producer's default delivery mode is PERSISTENT. </summary>
            <remarks ref="true()">
            When neither the sending call nor the producer supplies a delivery mode, this default applies.
            </remarks>
        </member>
        <member name="F:TIBCO.EMS.UFO.Message.DEFAULT_PRIORITY">
            <summary> The message producer's default priority is 4. </summary>
            <remarks ref="true()">
            When neither the sending call nor the producer supplies a priority, this default applies.
            </remarks>
        </member>
        <member name="F:TIBCO.EMS.UFO.Message.DEFAULT_TIME_TO_LIVE">
            <summary> The message producer's default time to live is unlimited; the message never expires. </summary>
            <remarks ref="true()">
            When neither the sending call nor the producer supplies a priority, 
            this default applies. The default value, zero, indicates that messages do not expire.
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.Clone">
            <summary>Create a copy of the message object. </summary>
            <remarks>
            <para>Implements ICloneable.Clone.</para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.ClearBody">
            <summary> Clears out the message body. Clearing a message's body does 
            not clear its header values or property entries. 
            </summary>
            <remarks>
            <para> If this message body was read-only, calling this method leaves
            the message body in the same state as an empty body in a newly created
            message. 
            </para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.Message.CorrelationID">
            <summary>Gets and Sets the correlation ID for the message. </summary>
            <remarks ref="true()">
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.Message.CorrelationIDAsBytes">
            <summary> Gets and Sets the correlation ID as an array of bytes
            for the message. </summary>
            <remarks ref="true()">
              <para> The use of a byte[] value for CorrelationID is 
              non-portable 
              </para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.Message.DeliveryMode">
            <summary> Get and set the message's delivery mode as an integer constant as defined
            in the DeliveryMode class. 
            Users are recommended to use the MessageDeliveryMode enum instead.
            </summary>
            <remarks ref="true()">
            </remarks>    
        </member>
        <member name="P:TIBCO.EMS.UFO.Message.MsgDeliveryMode">
            <summary> Get and set the message's delivery mode as enum value of type MessageDeliveryMode </summary>
            <remarks ref="true()">
            Valid values are:
            <list type="bullet">
            <item>MessageDeliveryMode.Persistent: persistent delivery</item>
            <item>MessageDeliveryMode.NonPersistent: non persistent delivery</item>
            <item>MessageDeliveryMode.ReliableDelivery:  proprietary
            extension and when used offers increased performance of the message
            producers using this mode</item>
            </list>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.Message.Destination">
            <summary> Gets and Sets the Destination object for this message. </summary>
            <remarks ref="true()">
              <para>
              The Destination header field contains the destination to which the
              message is being sent. 
              </para>
              <para> When a message is sent, this field is ignored. After completion of 
              the send or publish method, the field holds the destination 
              specified by the method. 
              </para>
              <para>
              When a message is received, its Destination value must be equivalent
              to the value assigned when it was sent. 
              </para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.Message.Expiration">
            <summary>Gets and Sets the message's expiration value. </summary>
            <remarks ref="true()">
              <para> When a message is sent, the Expiration header field is 
              left unassigned. After completion of the send or publish method, 
              it holds the expiration time of the message. This is the sum of 
              the time-to-live value specified by the client and the GMT at the 
              time of the send or publish. 
              </para>
              <para> If the time-to-live is specified as zero, Expiration is 
              set to zero to indicate that the message does not expire. 
              </para>
              <para>When a message's expiration time is reached, the system will 
              the message. The .NET API does not define any form of notification
              of message expiration. 
              </para>
              <para> Clients should not receive messages that have expired; 
              however, the .NET API does not guarantee that this will not happen
              </para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.Message.MessageID">
            <summary>Gets and Sets the message ID for the message. </summary>
            <remarks ref="true()">
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.Message.MsgType">
            <summary>Gets and Sets the message's type value. </summary>
            <remarks ref="true()">
            </remarks>    
        </member>
        <member name="P:TIBCO.EMS.UFO.Message.Priority">
            <summary>Gets and Sets the message's priority value. </summary>
            <remarks ref="true()">
            </remarks>    
        </member>
        <member name="P:TIBCO.EMS.UFO.Message.Redelivered">
            <summary>Gets and Sets the message's redelivered value. </summary>
            <remarks ref="true()">
            </remarks>    
        </member>
        <member name="P:TIBCO.EMS.UFO.Message.ReplyTo">
            <summary>Gets and Sets the message's replyto value. </summary>
            <remarks ref="true()">
            </remarks>    
        </member>
        <member name="P:TIBCO.EMS.UFO.Message.Timestamp">
            <summary>Gets and Sets the timestamp for the message. </summary>
            <remarks ref="true()">
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.Message.DeliveryTime">
            <summary>Gets the message's delivery time value. </summary>
            <remarks ref="true()">
            <para>Gets the message's delivery time value.</para>
            <para>When a message is sent, the JMSDeliveryTime header field is left unassigned.
            After completion of the send or publish method, it holds the delivery time of the message.
            This is the the difference, measured in milliseconds, between the delivery time and
            midnight, January 1, 1970 UTC.</para>
            <para>A message's delivery time is the earliest time when a JMS provider may deliver
            the message to a consumer. The provider must not deliver messages before the delivery
            time has been reached.</para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.ClearProperties">
            <summary> Clears a message's properties. </summary>
            <remarks>
            <para> The message's header fields and body are not cleared.  The message header 
            values and body are unchanged. </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.PropertyExists(System.String)">
            <summary>Test whether a named property has been set on a message. </summary>
            <param name="name"> the name of the property to test </param>
            <returns>true if the property has a value on the message; otherwise returns false.</returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.GetBooleanProperty(System.String)">
            <summary> Returns the value of the boolean property with the 
            specified name. </summary>
            <remarks ref="true()">Property names must obey the JMS rules for a message selector identifier. 
            Property names must not be null, and must not be empty strings. <para></para> </remarks>
            <param name="name"> Get the boolean property with this name. </param>
            <returns>The boolean property value for the specified name. 
            When the message does not have a property set for the name, 
            this method returns false. </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.GetByteProperty(System.String)">
            <summary> Returns the value of the byte property with the 
            specified name. </summary>
            <remarks ref="true()">Property names must obey the JMS rules for a message selector identifier. 
            Property names must not be null, and must not be empty strings. <para></para> </remarks>
            <param name="name"> Get the byte property with this name. </param>
            <returns>The byte property value for the specified name. When the message does not have a property set for the name, this method returns false.</returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.GetDeliveryModeName(TIBCO.EMS.MessageDeliveryMode)">
            <remarks ref="true()">
            Convert a delivery mode constant to a string.
            <para> This method is an extension to the JMS specification.</para>
            </remarks>
            <param name="deliveryMode"> the DeliveryMode header property of the message object. </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.GetDeliveryModeName(System.Int32)">
            <remarks ref="true()">
            Convert a delivery mode constant to a string.
            <para> Programs can obtain the delivery mode of a message by accessing the DeliveryMode header property of the message object.</para>
            <para> This method is an extension to the JMS specification.</para>
            </remarks>
            <param name="deliveryMode"> the DeliveryMode header property of the message object. </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.GetShortProperty(System.String)">
            <summary> Returns the value of the short property with the 
            specified name. </summary>
            <remarks ref="true()">Property names must obey the JMS rules for a message selector identifier. 
            Property names must not be null, and must 
            not be empty strings. <para></para> </remarks>
            <param name="name"> Get the short property with this name. </param>
            <returns>The short property value for the specified name. When the message does not have a property set for the name, this method returns false. </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.GetIntProperty(System.String)">
            <summary> Returns the value of the int property with the 
            specified name. </summary>
            <remarks ref="true()">Property names must obey the JMS rules for a message selector identifier. 
            Property names must not be null, and must 
            not be empty strings. <para></para> </remarks>
            <param name="name"> Get the int property with this name. </param>
            <returns>The int property value for the specified name. When the message does not have a property set for the name, this method returns false. </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.GetLongProperty(System.String)">
            <summary> Returns the value of the long property with the 
            specified name. </summary>
            <remarks ref="true()"> Property names must obey the JMS rules for a message selector identifier. 
            Property names must not be null, and must not be empty strings. <para></para> </remarks>
            <param name="name"> Get the long property with this name. </param>
            <returns>The long property value for the specified name. When the message does not have a property set for the name, this method returns false. </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.GetFloatProperty(System.String)">
            <summary> Returns the value of the float property with the 
            specified name. </summary>
            <remarks ref="true()"> Property names must obey the JMS rules for a message selector identifier. 
            Property names must not be null, and must not be empty strings. <para></para> </remarks>
            <param name="name"> Get the float property with this name. </param>
            <returns>The float property value for the specified name. When the message does not have a property set for the name, this method returns false. </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.GetDoubleProperty(System.String)">
            <summary> Returns the value of the double property with the 
            specified name. </summary>
            <remarks ref="true()"> Property names must obey the JMS rules for a message selector identifier. 
            Property names must not be null, and must not be empty strings. <para></para> </remarks>
            <param name="name"> Get the double property with this name.</param>
            <returns>The double property value for the specified name. When the message does not have a property set for the name, this method returns false.</returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.GetStringProperty(System.String)">
            <summary> Returns the value of the string property with the 
            specified name. </summary>
            <remarks ref="true()"> Property names must obey the JMS rules for a message selector identifier. 
            Property names must not be null, and must 
            not be empty strings. <para></para> </remarks>
            <param name="name"> Get the string property with this name. </param>
            <returns>The string property value for the specified name. 
            When the message does not have a property set for the name, this method returns
            null. </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.GetObjectProperty(System.String)">
            <summary> Returns the value of the object property with the 
            specified name. </summary>
            <remarks ref="true()"> Property names must obey the JMS rules for a message selector identifier. 
            Property names must not be null, and must 
            not be empty strings. <para></para> </remarks>
            <param name="name"> Get the object property with this name. </param>
            <returns>The object property value for the specified name.
            When the message does not have a property set for the name, this method returns
            null. </returns>
        </member>
        <member name="P:TIBCO.EMS.UFO.Message.PropertyNames">
            <summary> Returns an Enumeration of all the property names. </summary>
            <remarks>
            <para>Note that standard header fields are not considered 
            properties and are not returned in this enumeration
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.SetBooleanProperty(System.String,System.Boolean)">
            <summary>Sets a boolean property value with the specified name into the message </summary>
            <remarks ref="true()"> Property names must obey the JMS rules for a message selector identifier. 
            Property names must not be null, and must not be empty strings. <para> </para> </remarks>
            <param name="name">the name of the boolean property </param>
            <param name="value"> the boolean property value to set  </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">An TIBCO.EMS.MessageNotWriteableException may be thrown  if properties are read-only</exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.SetByteProperty(System.String,System.Byte)">
            <summary>Sets a byte property value with the specified name into the message </summary>
            <remarks ref="true()"> Property names must obey the JMS rules for a message selector identifier. 
            Property names must not be null, and must not be empty strings. <para> </para> </remarks>
            <param name="name">the name of the byte property </param>
            <param name="value"> the byte property value to set  </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">An TIBCO.EMS.MessageNotWriteableException may be thrown  if properties are read-only</exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.SetShortProperty(System.String,System.Int16)">
            <summary>Sets a short property value with the specified name into the message </summary>
            <remarks ref="true()"> Property names must obey the JMS rules for a message selector identifier. 
            Property names must not be null, and must not be empty strings. <para> </para> </remarks>
            <param name="name">Set the short property with this name. </param>
            <param name="value"> the short property value to set  </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">An TIBCO.EMS.MessageNotWriteableException may be thrown  if properties are read-only</exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.SetIntProperty(System.String,System.Int32)">
            <summary>Sets a int property value with the specified name into the message </summary>
            <remarks ref="true()"> Property names must obey the JMS rules for a message selector identifier. 
            Property names must not be null, and must not be empty strings. <para> </para> </remarks>
            <param name="name">the name of the int property </param>
            <param name="value"> the int property value to set  </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">An TIBCO.EMS.MessageNotWriteableException may be thrown  if properties are read-only</exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.SetLongProperty(System.String,System.Int64)">
            <summary>Sets a long property value with the specified name into the message </summary>
            <remarks ref="true()"> Property names must obey the JMS rules for a message selector identifier. 
            Property names must not be null, and must not be empty strings. <para> </para> </remarks>
            <param name="name">the name of the long property </param>
            <param name="value"> the long property value to set  </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">An TIBCO.EMS.MessageNotWriteableException may be thrown  if properties are read-only</exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.SetFloatProperty(System.String,System.Single)">
            <summary>Sets a float property value with the specified name into the message </summary>
            <remarks ref="true()"> Property names must obey the JMS rules for a message selector identifier. 
            Property names must not be null, and must not be empty strings. <para> </para> </remarks>
            <param name="name">the name of the float property </param>
            <param name="value"> the float property value to set  </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">An TIBCO.EMS.MessageNotWriteableException may be thrown  if properties are read-only</exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.SetDoubleProperty(System.String,System.Double)">
            <summary>Sets a double property value with the specified name into the message </summary>
            <remarks ref="true()"> Property names must obey the JMS rules for a message selector identifier. 
            Property names must not be null, and must not be empty strings. <para> </para> </remarks>
            <param name="name">the name of the double property </param>
            <param name="value"> the double property value to set  </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">An TIBCO.EMS.MessageNotWriteableException may be thrown  if properties are read-only</exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.SetStringProperty(System.String,System.String)">
            <summary>Sets a string property value with the specified name into the message </summary>
            <remarks ref="true()"> Property names must obey the JMS rules for a message selector identifier. 
            Property names must not be null, and must not be empty strings. <para> </para> </remarks>
            <param name="name">the name of the string property </param>
            <param name="value"> the string property value to set  </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">An TIBCO.EMS.MessageNotWriteableException may be thrown  if properties are read-only</exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.SetObjectProperty(System.String,System.Object)">
            <summary>Sets an object property value with the specified name into the message </summary>
            <remarks ref="true()"> Property names must obey the JMS rules for a message selector identifier. 
            Property names must not be null, and must not be empty strings. <para> </para> </remarks>
            <param name="name">the name of the object property </param>
            <param name="value"> the object property value to set  </param>
            <exception cref="T:TIBCO.EMS.MessageNotWriteableException">An TIBCO.EMS.MessageNotWriteableException may be thrown  if properties are read-only</exception>
            <exception cref="T:System.ArgumentException">An ArgumentException may be thrown if the name is null or if the name is an empty string</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.Acknowledge">
            <summary> Acknowledges all consumed messages of the session of 
            this consumed message. 
            </summary>
            
            <remarks ref="true()">
            <para>
            The behavior of this call depends on the acknowledgement mode of the Session.
            
            <para>All consumed messages support the acknowledge method 
            for use when a client has specified that its session's consumed 
            messages are to be explicitly acknowledged. By invoking acknowledge 
            on a consumed message, a client acknowledges all messages consumed 
            by the session to which the message was delivered. 
            </para>
            <para> Calls to acknowledge are ignored for both transacted sessions 
            and sessions specified to use implicit acknowledgement modes. 
            </para>
            <para> A client may individually acknowledge each message as it is 
            consumed, or it may choose to acknowledge messages as an 
            application-defined group (which is done by calling acknowledge 
            on the last received message of the group, thereby acknowledging all
            messages consumed by the session.) 
            </para>
            Specifically:
            <list type="bullet"> 
            <item><description> In ClientAcknowledge mode, this call acknowledges all messages 
            that the program has consumed within the session. (This behavior complies with the 
            JMS specification.) </description></item>
            <item><description> In ExplicitClientAcknowledge mode, this call acknowledges only the 
            individual message. (This mode and behavior are proprietary extensions, specific to TIBCO EMS.)
            </description></item>
            <item><description> In ExplicitClientDupsOkAcknowledge mode, this call lazily acknowledges 
            only the individual message. Lazy means that the provider client library can delay 
            transferring the acknowledgement to the server until a convenient time; meanwhile 
            the server might redeliver the message. (This mode and behavior are proprietary 
            extensions, specific to TIBCO EMS.)</description></item>
            <item><description> In all other modes, this call has no effect. In particular, modes 
            that specify transactions or implicit acknowledgement do not require the consuming 
            program to call this method. However, calling it does not produce an exception. 
            (This behavior complies with the JMS specification.)</description></item>
            </list> 
            </para>
            <para><b>Consumed</b></para>
            <para>Three events mark a message as consumed - that is, eligible for acknowledgment using this method:
            <list type="bullet"> 
            <item><description> Just before the provider raises an EMSMessageHandler event, it marks 
            the message argument as consumed.
            </description></item>
            <item><description> Just before the provider calls an IMessageListener.OnMessage callback, 
            it marks the message argument as consumed.
            </description></item>
            <item><description> Just before a receive call returns a message, it marks that message as consumed.
            </description></item>
            </list> 
            </para>
            <para><b>Redelivery</b></para>
            <para>Messages that have been received but not acknowledged may be redelivered.
            </para>
            </remarks>
            <exception cref="T:TIBCO.EMS.IllegalStateException">if this method is called on a closed session</exception>
            <seealso cref="M:TIBCO.EMS.UFO.MessageConsumer.Receive(System.Int64)">MessageConsumer.Receive</seealso> methods
            <seealso cref="T:TIBCO.EMS.UFO.Session">Session</seealso> class
            <seealso cref="P:TIBCO.EMS.UFO.Session.AcknowledgeMode">Session.AcknowledgeMode</seealso>
            <seealso cref="P:TIBCO.EMS.UFO.Session.SessionAcknowledgeMode">Session.SessionAcknowledgeMode</seealso>
            <seealso cref="T:TIBCO.EMS.UFO.QueueSession">QueueSession</seealso> class
        </member>
        <member name="M:TIBCO.EMS.UFO.Message.ToString">
            <summary> returns a string representation of the message </summary>
            <remarks>The string includes the body type, headers (name-value pairs), 
            properties (name-value pairs), and body content.</remarks>
            <returns> a string representation of the message </returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.EMSMessageHandler">
            <summary> Delegate declaration for message event handler</summary>
            <remarks>
            <para>This delegate provides an asynchronous pathway for receiving messages. 
            The program implements this delegate, and registers it with a MessageConsumer. 
            When a message arrives, the client library raises an event. This delegate 
            processes the event, which presents the message. </para>
            <para>The EMSMessageHandler receives 
            messages in a .NET programming idiom. In contrast, IMessageListener mimics the 
            way in which JMS provides similar functionality in a Java programming idiom. 
            Programmers may select either idiom - but not both (which would cause duplicate 
            message processing, with undefined behavior).</para>
            <para><b>Example Message Event Handler:</b></para>
            <code>
            ...
            consumer.MessageHandler += new EMSMessageHandler(handleMsg);
            ...
            private void handleMsg(object sender, EMSMessageEventArgs arg)
            {
               Message m = arg.Message;
               Console.WriteLine("Received message: " + m);
               ...
            }
            ...
            </code>
            <para><b>Serialization</b></para>
            <para>In compliance with the JMS specification, sessions distribute messages 
            to listeners and event handler delegates in serial (non-concurrent) fashion.</para> 
            </remarks>
            <param name="sender">The source of the event.
            It can be either the MessageConsumer object or the Session object depending
            on to which object is the message handler registered.</param>
            <param name="args">The event argument, <see cref="T:TIBCO.EMS.UFO.EMSMessageEventArgs"/></param>
        </member>
        <member name="T:TIBCO.EMS.UFO.EMSMessageEventArgs">
            <summary> EMSMessageHandler event argument, used in TIBCO.EMS.MessageConsumer.MessageHandler. </summary>
            <remarks>
            <para>EMSMessageEventArgs presents an arriving message as a .NET event.</para>
            <para>EMSMessageHandler delegates receive this object as an argument.</para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.EMSMessageEventArgs.#ctor(TIBCO.EMS.UFO.Message)">
            <summary> Construct a new EMSMessageEventArgs</summary>
            <param name="msg">The new event encapsulates this message and signals its arrival. </param>
        </member>
        <member name="P:TIBCO.EMS.UFO.EMSMessageEventArgs.Message">
            <summary> Get the Message that tiggered the event </summary>
        </member>
        <member name="T:TIBCO.EMS.UFO.MessageConsumer">
            <summary>
            A client uses a MessageConsumer object to receive messages from a destination.
            </summary>
            <remarks ref="true()">
            <para>MessageConsumer is the parent interface for all message consumers. </para>
            <para> A MessageConsumer object is created by passing a Destination object to a 
            message-consumer creation method supplied by a session.
            A message consumer can be created with a message selector that
            allows the client to restrict the messages delivered to the message 
            consumer to those that match the selector. 
            </para>
            <para> A client may either synchronously receive a message consumer's 
            messages or have the consumer asynchronously deliver them as they arrive. 
            </para>
            <para> For synchronous receipt, a client can request the next message from 
            a message consumer using one of its receive methods. There are several 
            variations of receive that allow a client to poll or wait for the next message. 
            </para>
            
            <para> 
               Consumers can receive messages asynchronously in either of two idioms.
               Programmers may select either idiom - but not both (which would cause
               duplicate message processing, with undefined behavior).
            <list type="bullet">
              <item>
                <description><b>MessageHandler</b> - see <see cref="T:TIBCO.EMS.UFO.EMSMessageHandler"/>
                   for more information.
                   The client library raises an event when a message arrives at the 
                   destination. The program implements a handler delegate to processes it
                   asynchronously, and registers the delegate here.
                </description>
              </item>
              <item>
                <description><b>MessageListener</b> - see <see cref="T:TIBCO.EMS.UFO.IMessageListener"/>
                   for more information.
                   A client can register a MessageListener object with a message consumer.
                   When a message arrives, the client library calls this listener's 
                   onMessage method with the message as its argument. The program
                   implements the message listener interface, and registers a message 
                   listener object by setting this property. The MessageListener mimics 
                   the way in which JMS provides similar functionality in a Java programming
                   idiom
                 </description>
              </item>
            </list>
            </para>
                 <para>A message selector restricts the 
                   set of messages that the consumer receives to those that match the 
                   selector. Programs can set this property only when creating the 
                   consumer object; see <see cref="M:TIBCO.EMS.UFO.Session.CreateConsumer(TIBCO.EMS.UFO.Destination,System.String)">Session.CreateConsumer</see>.
              </para>
            <para> It is a client programming error for a MessageListener to throw an exception. </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageConsumer.Receive">
            <summary>Receives the next message produced for this message consumer. </summary>
            <remarks ref="true()"> 
            <para> This method consumes the next message from the destination (synchronously).
            When the destination does not have any messages ready, this method blocks:</para>
            <list type="bullet">
            <item><description>If a message arrives at the destination, this call immediately 
            returns that message.</description></item>
            <item><description>If another thread closes the consumer, this call returns 
            null.</description></item>
            </list>
            <para>When calling receive within a transaction, the consumer retains the message 
            until transaction commits.</para>
            </remarks>
            <returns>the next message produced for this message consumer, 
            or null if this message consumer is concurrently closed </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageConsumer.Receive(System.Int64)">
            <summary> Receives the next message that arrives within the specified timeout interval. 
            </summary>
            <remarks ref="true()"> 
            <para> This method consumes the next message from the destination (synchronously).
            When the destination does not have any messages ready, this method blocks:</para>
            <list type="bullet">
            <item><description>If a message arrives at the destination, this call immediately 
            returns that message.</description></item>
            <item><description>If the (non-zero) timeout elapses before a message arrives, this 
            call returns null.</description></item>
            <item><description>If another thread closes the consumer, this call returns 
            null.</description></item>
            </list>
            <para>When calling receive within a transaction, the consumer retains the message 
            until transaction commits.</para>
            </remarks>
            <param name="timeout">Wait no longer than this interval 
            (in milliseconds) for a message to arrive. Zero is a special value, 
            which specifies no timeout (block indefinitely).</param>
            <returns>the next message produced for this message consumer, 
            or null if this message consumer is concurrently closed </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageConsumer.ReceiveNoWait">
            <summary> Receives the next message if one is immediately available. </summary>
            <remarks>
            <para>This method receives a message synchronously without blocking.</para>
            <para>When the destination has at least one message ready, this method immediately 
            returns the next message. When the destination does not have any messages ready, 
            this method immediately returns null. When calling receive within a transaction, 
            the consumer retains the message until transaction commits.</para>
            </remarks>
            <returns> the next message produced for this message consumer, 
            or null if one is not available </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageConsumer.Close">
            <summary> Closes the message consumer </summary>
            <remarks>
            <para>The Close method stops the message consumer from receiving messages and 
            reclaims resources.</para>
            <para>If a receive call or a message listener is in progress, then Close waits 
            until that call returns. </para>
            <para>Message consumers rely on resources outside the 
            client program. To reclaim these resources in a timely manner, a
            client should explicitly close message consumer objects (rather than 
            waiting for garbage collection).</para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageConsumer.ToString">
            <summary> return a string representation of the message consumer </summary>
            <returns> a string representation of the message consumer </returns>
        </member>
        <member name="P:TIBCO.EMS.UFO.MessageConsumer.MessageSelector">
            <summary>Gets this message consumer's message selector expression. </summary>
            <remarks ref="true()">
            <para>
            A message selector restricts the set of messages that the consumer receives to 
            those that match the selector.
            </para><para>
            A client sets this property when calling Session.CreateConsumer 
            to create the consumer object.</para>
            </remarks>
            <returns>This message consumer's message selector, or null if no 
            message selector exists for the message consumer (that is, if 
            the message selector was not set or was set to null or the empty string). 
            </returns>
        </member>
        <member name="P:TIBCO.EMS.UFO.MessageConsumer.MessageListener">
            <summary> Get and set the asynchronous message listener</summary>
            <remarks ref="true()">
            <para>
            The client implements the MessageListener 
            interface and registers a MessageListener object by setting this property. 
            When a message arrives, the client library calls this MessageListener's onMessage 
            method with the message as its argument. 
            </para><para>
            A client can use either MessageHandler or MessageListener
            to handle asynchronous message consumptions, but <b>not</b> both.  
            Setting up both will cause the message to be handled more than once 
            which can result in undefined behavior. 
            </para>
            </remarks>
            <exception cref="T:TIBCO.EMS.IllegalStateException">If the consumer is closed</exception>
        </member>
        <member name="E:TIBCO.EMS.UFO.MessageConsumer.MessageHandler">
            <summary> The message event handler for asynchronous message consumption.</summary>
            <remarks>
            <para>
            The client library raises an event when a message arrives at the destination. 
            The program implements a handler delegate to processes it asynchronously.</para>
            The delegate declaration for message event handler is as follows: <br/>
            <code>
            public delegate void EMSMessageHandler(object sender, EMSMessageEventArgs args);
            </code>
            <br/>
            sender: The source of the event. It can be either the MessageConsumer object or 
            the Session object depending on to which object is the message handler registered.<br/>
            args: The event argument, <see cref="T:TIBCO.EMS.UFO.EMSMessageEventArgs"/><br/>
            <example>Example of using the message event handler:
            <code>
            ...
            consumer.MessageHandler += new EMSMessageHandler(handleMsg);
            ...
            private void handleMsg(object sender, EMSMessageEventArgs arg)
            {
               Message m = arg.Message;
               Console.WriteLine("Received message: " + m);
            }
            ...
            </code></example>
            User should either use MessageHandler or MessageListener
            to handle asynchronous message consumptions, but <b>not</b> both.  
            Setting up both will cause the message to be handled more than once 
            which can result in undefined behavior </remarks>
            <exception cref="T:TIBCO.EMS.IllegalStateException">If the consumer is closed</exception>
        </member>
        <member name="T:TIBCO.EMS.UFO.MessageProducer">
            <summary>Defines the root behavior of all message producers. 
            </summary>
            <remarks ref="true()">
            <para>
            A client uses a MessageProducer object to send messages to a destination.
            </para>
            <para>MessageProducer is the parent interface for all message producers. 
            A client also has the option of creating a message producer without supplying a 
            destination. In this case, a destination must be provided with every send operation.
            A typical use for this kind of message producer is to send replies to requests 
            using the request's ReplyTo destination. 
            </para>
            <para>A client can specify a default delivery mode, priority, and time to live 
            for messages sent by a message producer. It can also specify the delivery mode, 
            priority, and time to live for an individual message. 
            </para>
            <para>A client can specify a time-to-live value in milliseconds for each message it 
             sends. This value defines a message expiration time that is the sum of the 
             message's time-to-live and the GMT when it is sent (for transacted sends, this is the
             time the client sends the message, not the time the transaction is committed). 
            </para>
            <para>This class lacks a constructor. Instead, clients create message producers 
            using methods of a Session object; subclasses, such as 
            <see cref="T:TIBCO.EMS.UFO.QueueSession">QueueSession</see> and 
            <see cref="T:TIBCO.EMS.UFO.TopicSession">TopicSession</see>,
            each define methods to create corresponding producer subclasses.
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageProducer.Send(TIBCO.EMS.UFO.Destination,TIBCO.EMS.UFO.Message)">
            <summary> Sends a message to a destination for an unidentified message producer.
            Uses the MessageProducer's default delivery mode, priority, and time to live. 
            </summary>
            <remarks ref="true()">
            <para>
              Typically, a message producer is assigned a destination at creation time; 
              however, the TIBCO EMS .NET API also supports unidentified message producers, 
              which require that the destination be supplied every time a message is sent. 
            </para>
            </remarks>
            <param name="dest">The destination (queue or topic) to send this message.</param>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageProducer.Send(TIBCO.EMS.UFO.Destination,TIBCO.EMS.UFO.Message,TIBCO.EMS.UFO.ICompletionListener)">
            <summary> Asynchronously sends a message to a destination for an unidentified message
            producer. Uses the MessageProducer's default delivery mode, priority, and time to live.
            </summary>
            <remarks ref="true()">
            <para>
            See <see cref="T:TIBCO.EMS.ICompletionListener"/> for more information about asynchronous
            sending.
            </para>
            <para>
              Typically, a message producer is assigned a destination at creation time; 
              however, the TIBCO EMS .NET API also supports unidentified message producers, 
              which require that the destination be supplied every time a message is sent. 
            </para>
            </remarks>
            <param name="dest">The destination (queue or topic) to send this message.</param>
            <param name="message">The message to send.</param>
            <param name="completionListener"> An ICompletionListener to be notified when the send has completed.</param>
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageProducer.Send(TIBCO.EMS.UFO.Destination,TIBCO.EMS.UFO.Message,System.Int32,System.Int32,System.Int64)">
            <summary>Sends a message to a destination for an unidentified message producer,
            specifying delivery mode, priority and time to live. 
            </summary>
            <remarks ref="true()">
            <para>
            Typically, a message producer is assigned a destination at creation time; 
              however, the TIBCO EMS .NET API also supports unidentified message producers, 
              which require that the destination be supplied every time a message is sent. 
            </para>
            </remarks>
            <param name="dest">The destination (queue or topic) to send this message.</param>
            <param name="message">The message to send.</param>
            <param name="deliveryMode">The delivery mode to use.  This argument may be either an 
            enumerated value (see <see cref="T:TIBCO.EMS.MessageDeliveryMode">TIBCO.EMS.MessageDeliveryMode</see>) or an integer 
            (see <see cref="T:TIBCO.EMS.DeliveryMode">TIBCO.EMS.DeliveryMode</see>). We recommend enumerated values, because 
            they enable .NET to do stronger type checking at compile time, which can 
            enhance program reliability.</param>
            <param name="priority"><para>The priority for this message.
            </para>
            <para>Priority affects the order in which the server delivers messages to 
            consumers (higher values first). The JMS specification defines ten levels 
            of priority value, from zero (lowest priority) to 9 (highest priority). 
            The specification suggests that clients consider 0-4 as gradations of normal 
            priority, and priorities 5-9 as gradations of expedited priority.</para></param>
            <param name="timeToLive"><para>The message's lifetime (in milliseconds) before it expires.
            </para>
            <list type="bullet">
            <item><description>If the time-to-live is non-zero, the expiration is the sum of that time-to-live 
            and the sending client's current time (GMT). This rule applies even within 
            sessions with transaction semantics - the timer begins with the send call, 
            not the commit call.
            </description></item>
            <item><description>If the time-to-live is zero, then expiration is also zero - indicating that 
            the message never expires.
            </description></item>
            </list>
            <para>
            Programs can use this property to define a default time-to-live for messages 
            that this producer sends. Individual sending calls can override this default value.
            </para>
            <para>Whenever your application uses non-zero values for message expiration or time-to-live, 
            you must ensure that clocks are synchronized among all the host computers that 
            send and receive messages. Synchronize clocks to a tolerance that is a very 
            small fraction of the smallest or time-to-live.
            </para>
            </param>
            
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageProducer.Send(TIBCO.EMS.UFO.Destination,TIBCO.EMS.UFO.Message,System.Int32,System.Int32,System.Int64,TIBCO.EMS.UFO.ICompletionListener)">
            <summary> Asynchronously sends a message to a destination for an unidentified
            message producer, specifying delivery mode, priority and time to live.
            </summary>
            <remarks ref="true()">
            <para>
            See <see cref="T:TIBCO.EMS.ICompletionListener"/> for more information about asynchronous
            sending.
            </para>
            <para>
            Typically, a message producer is assigned a destination at creation time; 
              however, the TIBCO EMS .NET API also supports unidentified message producers, 
              which require that the destination be supplied every time a message is sent. 
            </para>
            </remarks>
            <param name="dest">The destination (queue or topic) to send this message.</param>
            <param name="message">The message to send.</param>
            <param name="deliveryMode">The delivery mode to use.  This argument may be either an 
            enumerated value (see <see cref="T:TIBCO.EMS.MessageDeliveryMode">MessageDeliveryMode</see>) or an integer 
            (see <see cref="T:TIBCO.EMS.DeliveryMode">DeliveryMode</see>). We recommend enumerated values, because 
            they enable .NET to do stronger type checking at compile time, which can 
            enhance program reliability.</param>
            <param name="priority"><para>The priority for this message.
            </para>
            <para>Priority affects the order in which the server delivers messages to 
            consumers (higher values first). The JMS specification defines ten levels 
            of priority value, from zero (lowest priority) to 9 (highest priority). 
            The specification suggests that clients consider 0-4 as gradations of normal 
            priority, and priorities 5-9 as gradations of expedited priority.</para></param>
            <param name="timeToLive"><para>The message's lifetime (in milliseconds) before it expires.
            </para>
            <list type="bullet">
            <item><description>If the time-to-live is non-zero, the expiration is the sum of that time-to-live 
            and the sending client's current time (GMT). This rule applies even within 
            sessions with transaction semantics - the timer begins with the send call, 
            not the commit call.
            </description></item>
            <item><description>If the time-to-live is zero, then expiration is also zero - indicating that 
            the message never expires.
            </description></item>
            </list>
            <para>
            Programs can use this property to define a default time-to-live for messages 
            that this producer sends. Individual sending calls can override this default value.
            </para>
            <para>Whenever your application uses non-zero values for message expiration or time-to-live, 
            you must ensure that clocks are synchronized among all the host computers that 
            send and receive messages. Synchronize clocks to a tolerance that is a very 
            small fraction of the smallest or time-to-live.
            </para>
            </param>
            <param name="completionListener"> An ICompletionListener to be notified when the send has completed.</param>
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageProducer.Send(TIBCO.EMS.UFO.Destination,TIBCO.EMS.UFO.Message,TIBCO.EMS.MessageDeliveryMode,System.Int32,System.Int64)">
            <summary>Sends a message to a destination for an unidentified message producer,
            specifying delivery mode, priority and time to live. 
            </summary>
            <remarks ref="true()">
            <para>
            Typically, a message producer is assigned a destination at creation time; 
              however, the TIBCO EMS .NET API also supports unidentified message producers, 
              which require that the destination be supplied every time a message is sent. 
            </para>
            </remarks>
            <param name="dest">The destination (queue or topic) to send this message.</param>
            <param name="message">The message to send.</param>
            <param name="deliveryMode">The delivery mode to use.  This argument may be either an 
            enumerated value (see <see cref="T:TIBCO.EMS.MessageDeliveryMode">TIBCO.EMS.MessageDeliveryMode</see>) or an integer 
            (see <see cref="T:TIBCO.EMS.DeliveryMode">TIBCO.EMS.DeliveryMode</see>). We recommend enumerated values, because 
            they enable .NET to do stronger type checking at compile time, which can 
            enhance program reliability.</param>
            <param name="priority"><para>The priority for this message.
            </para>
            <para>Priority affects the order in which the server delivers messages to 
            consumers (higher values first). The JMS specification defines ten levels 
            of priority value, from zero (lowest priority) to 9 (highest priority). 
            The specification suggests that clients consider 0-4 as gradations of normal 
            priority, and priorities 5-9 as gradations of expedited priority.</para></param>
            <param name="timeToLive"><para>The message's lifetime (in milliseconds) before it expires.
            </para>
            <list type="bullet">
            <item><description>If the time-to-live is non-zero, the expiration is the sum of that time-to-live 
            and the sending client's current time (GMT). This rule applies even within 
            sessions with transaction semantics - the timer begins with the send call, 
            not the commit call.
            </description></item>
            <item><description>If the time-to-live is zero, then expiration is also zero - indicating that 
            the message never expires.
            </description></item>
            </list>
            <para>
            Programs can use this property to define a default time-to-live for messages 
            that this producer sends. Individual sending calls can override this default value.
            </para>
            <para>Whenever your application uses non-zero values for message expiration or time-to-live, 
            you must ensure that clocks are synchronized among all the host computers that 
            send and receive messages. Synchronize clocks to a tolerance that is a very 
            small fraction of the smallest or time-to-live.
            </para>
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageProducer.Send(TIBCO.EMS.UFO.Destination,TIBCO.EMS.UFO.Message,TIBCO.EMS.MessageDeliveryMode,System.Int32,System.Int64,TIBCO.EMS.UFO.ICompletionListener)">
            <summary> Asynchronously sends a message to a destination for an unidentified
            message producer, specifying delivery mode, priority and time to live.
            </summary>
            <remarks ref="true()">
            <para>
            See <see cref="T:TIBCO.EMS.ICompletionListener"/> for more information about
            asynchronous sending.
            </para>
            <para>
            Typically, a message producer is assigned a destination at creation time; 
              however, the TIBCO EMS .NET API also supports unidentified message producers, 
              which require that the destination be supplied every time a message is sent. 
            </para>
            </remarks>
            <param name="dest">The destination (queue or topic) to send this message.</param>
            <param name="message">The message to send.</param>
            <param name="deliveryMode">The delivery mode to use.  This argument may be either an 
            enumerated value (see <see cref="T:TIBCO.EMS.MessageDeliveryMode">MessageDeliveryMode</see>) or an integer 
            (see <see cref="T:TIBCO.EMS.DeliveryMode">DeliveryMode</see>). We recommend enumerated values, because 
            they enable .NET to do stronger type checking at compile time, which can 
            enhance program reliability.</param>
            <param name="priority"><para>The priority for this message.
            </para>
            <para>Priority affects the order in which the server delivers messages to 
            consumers (higher values first). The JMS specification defines ten levels 
            of priority value, from zero (lowest priority) to 9 (highest priority). 
            The specification suggests that clients consider 0-4 as gradations of normal 
            priority, and priorities 5-9 as gradations of expedited priority.</para></param>
            <param name="timeToLive"><para>The message's lifetime (in milliseconds) before it expires.
            </para>
            <list type="bullet">
            <item><description>If the time-to-live is non-zero, the expiration is the sum of that time-to-live 
            and the sending client's current time (GMT). This rule applies even within 
            sessions with transaction semantics - the timer begins with the send call, 
            not the commit call.
            </description></item>
            <item><description>If the time-to-live is zero, then expiration is also zero - indicating that 
            the message never expires.
            </description></item>
            </list>
            <para>
            Programs can use this property to define a default time-to-live for messages 
            that this producer sends. Individual sending calls can override this default value.
            </para>
            <para>Whenever your application uses non-zero values for message expiration or time-to-live, 
            you must ensure that clocks are synchronized among all the host computers that 
            send and receive messages. Synchronize clocks to a tolerance that is a very 
            small fraction of the smallest or time-to-live.
            </para>
            </param>
            <param name="completionListener"> An ICompletionListener to be notified when the send has completed.</param>
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageProducer.Send(TIBCO.EMS.UFO.Message)">
            <summary>Sends a message using the MessageProducer's 
            default delivery mode, priority, and time to live. </summary>
            <remarks ref="true()"></remarks>
            <param name="message">The message to send </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageProducer.Send(TIBCO.EMS.UFO.Message,TIBCO.EMS.UFO.ICompletionListener)">
            <summary>Asynchronously sends a message using the MessageProducer's 
            default delivery mode, priority, and time to live. </summary>
            <remarks ref="true()">
            <para>
            See <see cref="T:TIBCO.EMS.ICompletionListener"/> for more information about
            asynchronous sending.
            </para>
            </remarks>
            <param name="message">The message to send </param>
            <param name="completionListener"> An ICompletionListener to be notified when the send has completed.</param>
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageProducer.Send(TIBCO.EMS.UFO.Message,System.Int32,System.Int32,System.Int64)">
            <summary>Sends a message to the destination, specifying delivery mode, 
            priority, and time to live. </summary>
            <remarks ref="true()"></remarks>
            <param name="message">The message to send.</param>
            <param name="deliveryMode">The delivery mode to use.  This argument may be either an 
            enumerated value (see <see cref="T:TIBCO.EMS.MessageDeliveryMode">TIBCO.EMS.MessageDeliveryMode</see>) or an integer 
            (see <see cref="T:TIBCO.EMS.DeliveryMode">TIBCO.EMS.DeliveryMode</see>). We recommend enumerated values, because 
            they enable .NET to do stronger type checking at compile time, which can 
            enhance program reliability.</param>
            <param name="priority"><para>The priority for this message.
            </para>
            <para>Priority affects the order in which the server delivers messages to 
            consumers (higher values first). The JMS specification defines ten levels 
            of priority value, from zero (lowest priority) to 9 (highest priority). 
            The specification suggests that clients consider 0-4 as gradations of normal 
            priority, and priorities 5-9 as gradations of expedited priority.</para></param>
            <param name="timeToLive"><para>The message's lifetime (in milliseconds) before it expires.
            </para>
            <list type="bullet">
            <item><description>If the time-to-live is non-zero, the expiration is the sum of that time-to-live 
            and the sending client's current time (GMT). This rule applies even within 
            sessions with transaction semantics - the timer begins with the send call, 
            not the commit call.
            </description></item>
            <item><description>If the time-to-live is zero, then expiration is also zero - indicating that 
            the message never expires.
            </description></item>
            </list>
            <para>
            Programs can use this property to define a default time-to-live for messages 
            that this producer sends. Individual sending calls can override this default value.
            </para>
            <para>Whenever your application uses non-zero values for message expiration or time-to-live, 
            you must ensure that clocks are synchronized among all the host computers that 
            send and receive messages. Synchronize clocks to a tolerance that is a very 
            small fraction of the smallest or time-to-live.
            </para>
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageProducer.Send(TIBCO.EMS.UFO.Message,System.Int32,System.Int32,System.Int64,TIBCO.EMS.UFO.ICompletionListener)">
            <summary>Asynchronously sends a message to the destination, specifying
            delivery mode, priority, and time to live.
            </summary>
            <remarks ref="true()">
            <para>
            See <see cref="T:TIBCO.EMS.ICompletionListener"/> for more information about
            asynchronous sending.
            </para>
            </remarks>
            <param name="message">The message to send.</param>
            <param name="deliveryMode">The delivery mode to use.  This argument may be either an 
            enumerated value (see <see cref="T:TIBCO.EMS.MessageDeliveryMode">MessageDeliveryMode</see>) or an integer 
            (see <see cref="T:TIBCO.EMS.DeliveryMode">DeliveryMode</see>). We recommend enumerated values, because 
            they enable .NET to do stronger type checking at compile time, which can 
            enhance program reliability.</param>
            <param name="priority"><para>The priority for this message.
            </para>
            <para>Priority affects the order in which the server delivers messages to 
            consumers (higher values first). The JMS specification defines ten levels 
            of priority value, from zero (lowest priority) to 9 (highest priority). 
            The specification suggests that clients consider 0-4 as gradations of normal 
            priority, and priorities 5-9 as gradations of expedited priority.</para></param>
            <param name="timeToLive"><para>The message's lifetime (in milliseconds) before it expires.
            </para>
            <list type="bullet">
            <item><description>If the time-to-live is non-zero, the expiration is the sum of that time-to-live 
            and the sending client's current time (GMT). This rule applies even within 
            sessions with transaction semantics - the timer begins with the send call, 
            not the commit call.
            </description></item>
            <item><description>If the time-to-live is zero, then expiration is also zero - indicating that 
            the message never expires.
            </description></item>
            </list>
            <para>
            Programs can use this property to define a default time-to-live for messages 
            that this producer sends. Individual sending calls can override this default value.
            </para>
            <para>Whenever your application uses non-zero values for message expiration or time-to-live, 
            you must ensure that clocks are synchronized among all the host computers that 
            send and receive messages. Synchronize clocks to a tolerance that is a very 
            small fraction of the smallest or time-to-live.
            </para>
            </param>
            <param name="completionListener"> An ICompletionListener to be notified when the send has completed.</param>
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageProducer.Send(TIBCO.EMS.UFO.Message,TIBCO.EMS.MessageDeliveryMode,System.Int32,System.Int64)">
            <summary>Sends a message to the destination, specifying delivery mode, 
            priority, and time to live. </summary>
            <remarks ref="true()"></remarks>
            <param name="message">The message to send.</param>
            <param name="deliveryMode">The delivery mode to use.  This argument may be either an 
            enumerated value (see <see cref="T:TIBCO.EMS.MessageDeliveryMode">TIBCO.EMS.MessageDeliveryMode</see>) or an integer 
            (see <see cref="T:TIBCO.EMS.DeliveryMode">TIBCO.EMS.DeliveryMode</see>). We recommend enumerated values, because 
            they enable .NET to do stronger type checking at compile time, which can 
            enhance program reliability.</param>
            <param name="priority"><para>The priority for this message.
            </para>
            <para>Priority affects the order in which the server delivers messages to 
            consumers (higher values first). The JMS specification defines ten levels 
            of priority value, from zero (lowest priority) to 9 (highest priority). 
            The specification suggests that clients consider 0-4 as gradations of normal 
            priority, and priorities 5-9 as gradations of expedited priority.</para></param>
            <param name="timeToLive"><para>The message's lifetime (in milliseconds) before it expires.
            </para>
            <list type="bullet">
            <item><description>If the time-to-live is non-zero, the expiration is the sum of that time-to-live 
            and the sending client's current time (GMT). This rule applies even within 
            sessions with transaction semantics - the timer begins with the send call, 
            not the commit call.
            </description></item>
            <item><description>If the time-to-live is zero, then expiration is also zero - indicating that 
            the message never expires.
            </description></item>
            </list>
            <para>
            Programs can use this property to define a default time-to-live for messages 
            that this producer sends. Individual sending calls can override this default value.
            </para>
            <para>Whenever your application uses non-zero values for message expiration or time-to-live, 
            you must ensure that clocks are synchronized among all the host computers that 
            send and receive messages. Synchronize clocks to a tolerance that is a very 
            small fraction of the smallest or time-to-live.
            </para>
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageProducer.Send(TIBCO.EMS.UFO.Message,TIBCO.EMS.MessageDeliveryMode,System.Int32,System.Int64,TIBCO.EMS.UFO.ICompletionListener)">
            <summary>Asynchronously sends a message to the destination, specifying
            delivery mode, priority, and time to live.
            </summary>
            <remarks ref="true()">
            <para>
            See <see cref="T:TIBCO.EMS.ICompletionListener"/> for more information about
            asynchronous sending.
            </para>
            </remarks>
            <param name="message">The message to send.</param>
            <param name="deliveryMode">The delivery mode to use.  This argument may be either an 
            enumerated value (see <see cref="T:TIBCO.EMS.MessageDeliveryMode">MessageDeliveryMode</see>) or an integer 
            (see <see cref="T:TIBCO.EMS.DeliveryMode">DeliveryMode</see>). We recommend enumerated values, because 
            they enable .NET to do stronger type checking at compile time, which can 
            enhance program reliability.</param>
            <param name="priority"><para>The priority for this message.
            </para>
            <para>Priority affects the order in which the server delivers messages to 
            consumers (higher values first). The JMS specification defines ten levels 
            of priority value, from zero (lowest priority) to 9 (highest priority). 
            The specification suggests that clients consider 0-4 as gradations of normal 
            priority, and priorities 5-9 as gradations of expedited priority.</para></param>
            <param name="timeToLive"><para>The message's lifetime (in milliseconds) before it expires.
            </para>
            <list type="bullet">
            <item><description>If the time-to-live is non-zero, the expiration is the sum of that time-to-live 
            and the sending client's current time (GMT). This rule applies even within 
            sessions with transaction semantics - the timer begins with the send call, 
            not the commit call.
            </description></item>
            <item><description>If the time-to-live is zero, then expiration is also zero - indicating that 
            the message never expires.
            </description></item>
            </list>
            <para>
            Programs can use this property to define a default time-to-live for messages 
            that this producer sends. Individual sending calls can override this default value.
            </para>
            <para>Whenever your application uses non-zero values for message expiration or time-to-live, 
            you must ensure that clocks are synchronized among all the host computers that 
            send and receive messages. Synchronize clocks to a tolerance that is a very 
            small fraction of the smallest or time-to-live.
            </para>
            </param>
            <param name="completionListener"> An ICompletionListener to be notified when the send has completed.</param>
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageProducer.Close">
            <summary> Closes the message producer. </summary>
            <remarks>
            <para>Destroy the producer object and reclaim resources.
            </para>
            <para>Message producers rely on resources outside the client program. 
            To reclaim these resources in a timely manner, we recommend that client 
            programs explicitly close message producer objects (rather than 
            waiting for garbage collection).</para>
            <para>
            This function will not return until any incomplete asynchronous
            send operations for this MessageProducer have been completed and all
            completion listener callbacks have returned. Incomplete sends will
            be allowed to complete normally unless an error occurs.
            </para>
            <para>
            A completion listener callback must not call close on its own MessageProducer.
            Doing so will throw an IllegalStateException.
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.MessageProducer.ToString">
            <summary> returns a string representaion of the message producer
            </summary>
        </member>
        <member name="P:TIBCO.EMS.UFO.MessageProducer.DeliveryMode">
            <summary> Get and set the delivery mode using integer value, as defined in 
            DeliveryMode class </summary>
            <remarks ref="true()">
            <para>Delivery mode instructs the server concerning persistent storage.
            </para>
            <para>A client use this property to define a default delivery mode for messages 
            that this producer sends. Individual sending calls can override this default value.
            </para>
            <para>For values, see the <see cref="T:TIBCO.EMS.DeliveryMode">TIBCO.EMS.DeliveryMode</see> class.</para>
            </remarks>
            Users are recommended to use the MessageDeliveryMode enum instead.
        </member>
        <member name="P:TIBCO.EMS.UFO.MessageProducer.Destination">
            <summary>Gets the destination associated with this MessageProducer. </summary>
            <remarks ref="true()">
            <para>Each send call directs a message to a destination (queue or topic).
            </para>
            <para>This property defines a default destination for messages that this producer 
            sends. Individual sending calls can override this default value.
            </para>
            </remarks>
            <returns>this producer's Destination </returns>
        </member>
        <member name="P:TIBCO.EMS.UFO.MessageProducer.DisableMessageID">
            <summary> Get and Sets the disable message id flag </summary>
            <remarks ref="true()">
            <para>Applications that do not require message IDs can reduce overhead 
            costs by disabling IDs (set this property to true).</para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.MessageProducer.DisableMessageTimestamp">
            <summary> Get and Sets the disable message timestamp flag </summary>
            <remarks ref="true()">
            <para>Applications that do not require timestamps can reduce overhead costs by 
            disabling timestamps (set this property to true).</para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.MessageProducer.MsgDeliveryMode">
            <summary> Get and set the delivery mode using one of the enum <see cref="T:TIBCO.EMS.MessageDeliveryMode">
            TIBCO.EMS.MessageDeliveryMode</see>value. </summary>
            <remarks ref="true()">
            <para>This parallel property accesses the same default value as
            <see cref="T:TIBCO.EMS.DeliveryMode">TIBCO.EMS.DeliveryMode</see>, but using enumerated values 
            (instead of ordinary integers). We recommend it over the ordinary integer-valued 
            accessor, because it enables .NET to do stronger type checking at compile time, 
            which can enhance program reliability.</para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.MessageProducer.Priority">
            <summary> Gets and Sets the priority of the message producer. </summary>
            <remarks ref="true()">
            <para>Priority affects the order in which the server delivers messages to consumers 
            (higher values first).
            </para>
            <para>The JMS specification defines ten levels of priority value, from zero (lowest priority) 
            to 9 (highest priority). The specification suggests that clients consider 0-4 as 
            gradations of normal priority, and priorities 5-9 as gradations of expedited priority.
            </para>
            <para>A client can use this property to define a default priority for messages that this 
            producer sends. Individual sending calls can override this default value.
            </para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.MessageProducer.TimeToLive">
            <summary> Gets and Sets the time to live property of the message producer. </summary>
            <remarks ref="true()">
            <para>Time-to-live (in milliseconds) determines the expiration time of a message.
            </para>
            <list type="bullet">
            <item><description>If the time-to-live is non-zero, the expiration is the sum of that time-to-live 
            and the sending client's current time (GMT). This rule applies even within 
            sessions with transaction semantics - the timer begins with the send call, 
            not the commit call.
            </description></item>
            <item><description>If the time-to-live is zero, then expiration is also zero - indicating that 
            the message never expires.
            </description></item>
            </list>
            <para>
            Programs can use this property to define a default time-to-live for messages 
            that this producer sends. Individual sending calls can override this default value.
            </para>
            <para>Whenever your application uses non-zero values for message expiration or time-to-live, 
            you must ensure that clocks are synchronized among all the host computers that 
            send and receive messages. Synchronize clocks to a tolerance that is a very 
            small fraction of the smallest or time-to-live.
            </para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.MessageProducer.DeliveryDelay">
            <summary> Gets and Sets the delivery delay property of the message producer. </summary>
            <remarks ref="true()">
            <para>Sets the minimum length of time in milliseconds that must elapse after a message is 
            sent before the JMS provider may deliver the message to a consumer.</para>
            <para>For transacted sends, this time starts when the client sends the message, not when 
            the transaction is committed.</para>
            <para>DeliveryDelay is set to zero by default.</para>
            </remarks>
        </member>
        <member name="T:TIBCO.EMS.UFO.ObjectMessage">
            <summary>
            An ObjectMessage object is used to send a message that
            contains a serializable object. </summary>
            <remarks>
            <para>Setting the content of a MessageObject stores a snapshot of the object. 
            Subsequent changes to the original object do not affect the message.
            </para>
            <para> Object serialization differs among the various EMS language APIs in ways 
            that are incompatible. An ObjectMessage contains a serialized object. Therefore EMS 
            programs can only send an ObjectMessage to another program written in the same language; 
            for example, Java to Java, C to C, .NET to .NET.
            </para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.ObjectMessage.TheObject">
            <summary>Gets or sets the object content of the ObjectMessage. </summary>
            <remarks>An object written to an ObjectMessage is not portable. I.e. An object
            set by an .NET EMS client will only be interpreted correctly by another .NET EMS client.
            </remarks>
            <exception cref="T:TIBCO.EMS.MessageFormatException">If the serialization or deserialization of the object failed</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.ObjectMessage.Clone">
            <summary> Implements the Clone method from ICloneable interface
            </summary>
            <returns> returns the cloned object </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.ObjectMessage.ClearBody">
            <summary> Clears out the message body. Clearing a message's body does 
            not clear its header values or property entries. 
            </summary>
            <remarks>
            <para> If this message body was read-only, calling this method leaves
            the message body in the same state as an empty body in a newly created
            message. 
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.ObjectMessage.ToString">
            <summary> Return a string representation of the message </summary>
            <returns> string representation of the message </returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.Queue">
            <summary>A Queue object encapsulates a TIBCO EMS specific queue name.</summary>
            <remarks ref="true()"><para>Queues store messages in a point-to-point messaging model
            in which each message has one producer and one consumer. 
            </para></remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.Queue.#ctor(System.String)">
            <summary> Constructs a new Queue object with the given address.
            
            </summary>
            <param name="address">address of the queue
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.Queue.#ctor(TIBCO.EMS.Queue)">
            <summary> Constructs a new Queue object with the given TIBCO.EMS.Queue 
            object.
            
            </summary>
            <param name="queue">object of TIBCO.EMS.Queue
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.Queue.Clone">
            <summary>
            Implementation of ICloneable.  Overrides the cloning process.
            </summary>
            <returns>A object that is a clone of this Queue instance.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Queue.Equals(System.Object)">
            <summary> Compare with another object for equality. </summary>
            <remarks> The current instance is said to be equals to another
            object when the latter is also a <c>Queue</c> instance and
            both have the same address. </remarks>
            <param name="obj">The object to compare with </param>
            <returns>true if the object passed is also of type <c>Queue</c> and
            has the same address as the current instance, false otherwise.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Queue.GetHashCode">
            <summary>
            Returns a hashcode representing the current object
            </summary>
            <returns>A hashcode based on the <c>Queue</c>.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.UFO.Queue.QueueName">
            <summary> Gets the name of the queue </summary>
            <remarks> Each queue has a name that is unique among all queues.</remarks>
            <returns>The lookup name of the queue object. If not set, null is returned </returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.QueueBrowser">
            <summary>Enumerate the messages in a queue without consuming them</summary>
            <remarks>
            <para>A browser is a dynamic enumerator of the queue (not a static snapshot). The contents of
            the queue on the server change as messages arrive and consumers remove them. 
            Meanwhile, a client can call the <see cref="M:TIBCO.EMS.UFO.QueueBrowser.MoveNext"/> method to
            advance the browser's enumeration to the next message in the queue.
            </para>
            <para>The browser can enumerate messages in a queue, or a subset filtered by a message 
            selector. 
            </para>
            <para>Sessions serve as factories for queue browsers; see 
            <see cref="M:TIBCO.EMS.UFO.Session.CreateBrowser(TIBCO.EMS.UFO.Queue)">Session.CreateBrowser</see>.
            A QueueBrowser can be created from either a <see cref="T:TIBCO.EMS.UFO.Session">Session</see>
             or a <see cref="T:TIBCO.EMS.UFO.QueueSession">QueueSession</see>. 
            </para>
            <para>A client uses a QueueBrowser object to look at messages
            on a queue without removing them. 
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueBrowser.Close">
            <summary> Closes the QueueBrowser and reclaim resources </summary>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueBrowser.GetEnumerator">
            <summary> Get an enumerator for browsing the current queue messages
            in the order they would be received </summary>
            <returns> The browser object, which is itself the enumerator.</returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueBrowser.Reset">
            <summary>Reset the browser to the location just before the first message </summary>
            <exception cref="T:System.InvalidOperationException">If queue browser is
            closed or has other failure. </exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueBrowser.MoveNext">
            <summary>Advance the browser's enumeration to the next message</summary>
            <remarks>
            <para>A browser is a dynamic enumerator of the queue (not a static snapshot). 
            The queue is at the server, and its contents change as message arrive 
            and consumers remove them. Meanwhile, while the browser is at the client. 
            This method asks the server for the next message after Current - that is, 
            the next message that is still in the queue.
            </para>
            <para>After creating a browser, programs must first call this method on the enumerator to
            move to the first message. 
            </para>
            </remarks>
            <returns>True if another message exists; the <see cref="P:TIBCO.EMS.UFO.QueueBrowser.Current"/> property subsequently 
            presents the next message.  Returns false otherwise.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.UFO.QueueBrowser.MessageSelector">
            <summary> Get the message selector associated with this QueueBrowser </summary>
            <remarks>The browser's message selector expression filters the messages that 
            the browser presents.</remarks>
            <returns> The associated message selector, null if none is associated.</returns>
        </member>
        <member name="P:TIBCO.EMS.UFO.QueueBrowser.Queue">
            <summary> Get the queue associated with this queue browser</summary>
            <returns> The queue.</returns>
        </member>
        <member name="P:TIBCO.EMS.UFO.QueueBrowser.Current">
            <summary>Get the current message in the browser</summary>
            <remarks>
            <para>This property presents the current message in the browser's enumeration, 
            but accessing the property does not consume that message.
            </para>
            <para>The <see cref="M:TIBCO.EMS.UFO.QueueBrowser.MoveNext"/> method advances the current message.
            </para>
            <para>This property can be queried repeatly and the same message 
            will be returned. 
            </para>
            </remarks>
            <returns>The current message. </returns>
            <exception cref="T:System.InvalidOperationException">If queue browser is
            closed or failure to get the current message, or message is null.
            </exception>
        </member>
        <member name="T:TIBCO.EMS.UFO.QueueConnection">
            <summary>
            A QueueConnection object is an active connection to a point-to-point TIBCO EMS Server.
            </summary>
            <remarks>
            <b>Note: </b>
            This class is provided for backward compatibility to support older EMS clients programs. 
            New clients should use the <see cref="T:TIBCO.EMS.UFO.Connection">Connection</see> class instead.
            
            <para>
            A client uses a QueueConnection object to create one or more QueueSession objects for 
            producing and consuming messages. 
            </para>
            <para> A QueueConnection can be used to create a 
            <see cref="T:TIBCO.EMS.UFO.QueueSession">QueueSession</see>, from which 
            specialized queue-related objects can be created.
            </para>
            <para> A QueueConnection cannot be used to create objects specific to the 
            publish/subscribe domain. 
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueConnection.CreateQueueSession(System.Boolean,System.Int32)">
            <summary>Creates a QueueSession object.</summary>
            <remarks>
            <b>Note: </b>
            This method is provided for backward compatibility to support older EMS clients programs.
            
            The new queue session uses the connection for all server communications.
            It will be recreated during connection recovery process.
            </remarks>
            <param name="transacted"><para>Indicates whether the session is transacted.</para>
            <para>When true, the new session has transaction semantics.</para>
            <para>When false, it has non-transaction semantics.</para>
            </param>
            <param name="acknowledgeMode"><para>Indicates whether and how the consumer  
            is to acknowledge received messages. </para>
            <para>This version of CreateQueueSession accepts an integer value associated with
            the acknowledge mode described by a <see cref="T:TIBCO.EMS.UFO.Session">Session</see> member
            and should only be used for backward compatibility.</para>
            <para>This parameter is ignored if the session is transacted. </para>
            </param>
            <returns>A newly created queue session </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueConnection.CreateQueueSession(System.Boolean,TIBCO.EMS.SessionMode)">
            <summary>Creates a QueueSession object.</summary>
            <remarks>
            <b>Note: </b>
            This method is provided for backward compatibility to support older EMS clients programs.
            
            The new queue session uses the connection for all server communications.
            It will be recreated during connection recovery process.
            </remarks>
            <param name="transacted">Indicates whether the session is transacted.
            <para>When true, the new session has transaction semantics.</para>
            <para>When false, it has non-transaction semantics.</para>
            </param>
            <param name="acknowledgeMode"><para>Indicates whether and how the consumer  
            is to acknowledge received messages. </para>
            <para>Legal values are listed under <see cref="T:TIBCO.EMS.SessionMode">TIBCO.EMS.SessionMode</see>.
            </para>
            <para>This parameter is ignored if the session is transacted. </para>
            </param>
            <returns>A newly created queue session </returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.QueueConnectionFactory">
            <summary>Backward compatibility. Administered object for creating queue connections.</summary>
            <remarks>
            <b>Note: </b>
            This class is provided for backward compatibility to support older EMS clients programs. 
            New clients should use the <see cref="T:TIBCO.EMS.UFO.ConnectionFactory">ConnectionFactory</see> class instead.
            
            <para>A client uses a QueueConnectionFactory object to create QueueConnection
            objects with a point-to-point TIBCO EMS server.
            </para>
            <para>
            This class is provided only to support older clients.  New clients should use the 
            <see cref="T:TIBCO.EMS.UFO.ConnectionFactory">ConnectionFactory</see> object. 
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueConnectionFactory.#ctor">
            <summary> Construct an empty QueueConnectionFactory </summary>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueConnectionFactory.#ctor(System.String)">
            <summary> Construct an QueueConnectionFactory given the server url </summary>
            <remarks> 
            <para>
            <b> Reconnect and Fault Tolerance </b>
            </para>
            <para> To enable reconnection behavior and fault tolerance, the 
            connection factory's server URL parameter must be a comma-separated 
            list of two or more URLs. To enable client reconnection in a situation 
            with only one server, you may supply two copies of that server's 
            URL (for example, tcp://localhost:7222,tcp://localhost:7222)
            </para>
            </remarks>
            <param name="serverUrls">The url to the server </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueConnectionFactory.#ctor(System.String,System.String)">
            <summary> Construct an QueueConnectionFactory given the server url, and client id </summary>
            <remarks> 
            <para>
            <b> Reconnect and Fault Tolerance </b>
            </para>
            <para> To enable reconnection behavior and fault tolerance, the 
            connection factory's server URL parameter must be a comma-separated 
            list of two or more URLs. To enable client reconnection in a situation 
            with only one server, you may supply two copies of that server's 
            URL (for example, tcp://localhost:7222,tcp://localhost:7222)
            </para>
            </remarks>
            <param name="serverUrls">The url to the server </param>
            <param name="clientId">The id of the client </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueConnectionFactory.#ctor(System.String,System.String,System.Collections.Hashtable)">
            <summary> Construct an QueueConnectionFactory given the server url, client id and
            properties </summary>
            <remarks> 
            <para>
            <b> Reconnect and Fault Tolerance </b>
            </para>
            <para> To enable reconnection behavior and fault tolerance, the 
            connection factory's server URL parameter must be a comma-separated 
            list of two or more URLs. To enable client reconnection in a situation 
            with only one server, you may supply two copies of that server's 
            URL (for example, tcp://localhost:7222,tcp://localhost:7222)
            </para>
            </remarks>
            <param name="serverUrls">The url to the server </param>
            <param name="clientId">The id to the client </param>
            <param name="properties">The properties for creating connection such as username and password </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueConnectionFactory.#ctor(TIBCO.EMS.QueueConnectionFactory)">
            <summary> Constructs a TIBCO.EMS.UFO QueueConnectionFactory
            object with the given TIBCO.EMS.QueueConnectionFactory object.
            
            </summary>
            <param name="factory">object of TIBCO.EMS.QueueConnectionFactory
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueConnectionFactory.Clone">
            <summary>
            Implementation of ICloneable.  Overrides the Clone process.
            </summary>
            <returns>A object that is a clone of this QueueConnectionFactory instance.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueConnectionFactory.CreateQueueConnection">
            <summary> Create a queue connection object.  </summary>
            <remarks>The connection object presents a default user identity. If the 
            server configuration permits that user, then the call succeeds.</remarks>
            <returns>The newly created QueueConnection.</returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueConnectionFactory.CreateQueueConnection(System.String,System.String)">
            <summary> Create a queue connection object for a specific user.  </summary>
            <param name="userName">The username to use to create connection. </param>
            <param name="password">Authenticate the user identity with this password. </param>
            <returns>The newly created QueueConnection.</returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.QueueReceiver">
            <summary>A client uses a QueueReceiver object to receive messages 
            that have been delivered to a queue. 
            </summary>
            <remarks ref="true()">
            <para>
            This class inherits almost all of its behavior from MessageConsumer. It adds only 
            a property, specializing the generic destination to a queue.
            </para> <para>
            Although it is possible to have multiple QueueReceivers for the same queue, 
            the behavior of how messages get distributed between the QueueReceivers is undefined.
            </para>
            <para> If a QueueReceiver specifies a message selector, the messages that are 
            not selected remain on the queue. By definition, a message selector allows a 
            QueueReceiver to skip messages. This means that when the skipped messages 
            are eventually read, the total ordering of the reads does not retain the 
            partial order defined by each message producer. Only QueueReceivers without 
            a message selector will read messages in message producer order. 
            </para>
            </remarks>
            <b>Note: </b>
            This class is provided for backward compatibility to support older EMS clients programs.
            New clients should use the <see cref="T:TIBCO.EMS.MessageConsumer">MessageConsumer</see> class instead.
            
        </member>
        <member name="P:TIBCO.EMS.UFO.QueueReceiver.Queue">
            <summary>Gets the Queue associated with this queue receiver. </summary>
            <remarks><para>The receiver consumes messages from this queue.</para>
            Programs set this queue when creating the receiver, and cannot subsequently 
            change it.
            </remarks>
            <returns>this receiver's Queue </returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.QueueSender">
            <summary>
            A client uses a QueueSender object to send messages to a queue. 
            </summary>
            <remarks ref="true()">
            <para>This class extends <see cref="T:TIBCO.EMS.UFO.MessageProducer">MessageProducer</see>.  
            It overloads more send methods, specializing the destination parameter to a queue.
            </para>
            <para>
            Normally, the <see cref="T:TIBCO.EMS.UFO.Queue">Queue</see> is specified when a QueueSender is created. In this case, 
            an attempt to use the send methods for an unidentified QueueSender 
            will throw a UnsupportedOperationException. 
            </para>
            <para> If the QueueSender is created with an unidentified <see cref="T:TIBCO.EMS.UFO.Queue">Queue</see>, 
            an attempt to use the send methods that assume that the Queue has 
            been identified will throw a UnsupportedOperationException. 
            </para>
            <para> During the execution of its send method, a message must not 
            be changed by other threads within the client. If the message is 
            modified, the result of the send is undefined. 
            </para>
            <para>After sending a message, a client may retain and modify it 
            without affecting the message that has been sent. The same message 
            object may be sent multiple times. 
            </para>
            <para>
            The following message headers are set as part of sending a message: 
            Destination, DeliveryMode, Expiration, Priority,
            MessageID and TimeStamp. When the message is sent, 
            the values of these headers are ignored. After the completion 
            of the send, the headers hold the values specified by the method 
            sending the message. It is possible for the send method to not set the 
            MessageID and TimeStamp if they are explicitly disabled by setting the 
            <see cref="P:TIBCO.EMS.UFO.MessageProducer.DisableMessageID">MessageProducer.DisableMessageID</see> or 
            <see cref="P:TIBCO.EMS.UFO.MessageProducer.DisableMessageTimestamp">MessageProducer.DisableMessageTimestamp</see> 
            property. 
            </para>
            </remarks>
            <b>Note: </b>
            This class is provided for backward compatibility to support older EMS clients programs.
            New clients should use the <see cref="T:TIBCO.EMS.UFO.MessageProducer">MessageProducer</see> class instead.
            
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueSender.Send(TIBCO.EMS.UFO.Message)">
            <summary> Sends a message to the queue. Uses the QueueSender's 
            default delivery mode, priority, and time to live. </summary>
            <param name="message">The message to send. </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueSender.Send(TIBCO.EMS.UFO.Message,System.Int32,System.Int32,System.Int64)">
            <summary> Sends a message to the queue, specifying delivery mode, 
            priority, and time to live. </summary>
            <param name="message">The message to send.</param>
            <param name="deliveryMode">The delivery mode to use.  This argument may be either an 
            enumerated value (see <see cref="T:TIBCO.EMS.MessageDeliveryMode">TIBCO.EMS.MessageDeliveryMode</see>) or an integer 
            (see <see cref="T:TIBCO.EMS.DeliveryMode">TIBCO.EMS.DeliveryMode</see>). We recommend enumerated values, because 
            they enable .NET to do stronger type checking at compile time, which can 
            enhance program reliability.
            </param>
            <param name="priority"><para>The priority for this message.
            </para>
            <para>Priority affects the order in which the server delivers messages to 
            consumers (higher values first). The JMS specification defines ten levels 
            of priority value, from zero (lowest priority) to 9 (highest priority). 
            The specification suggests that clients consider 0-4 as gradations of normal 
            priority, and priorities 5-9 as gradations of expedited priority.</para>
            </param>
            <param name="timeToLive"><para>The message's lifetime (in milliseconds) before it expires.
            </para>
            <list type="bullet">
            <item><description>If the time-to-live is non-zero, the expiration is the sum of that time-to-live 
            and the sending client's current time (GMT). This rule applies even within 
            sessions with transaction semantics - the timer begins with the send call, 
            not the commit call.
            </description></item>
            <item><description>If the time-to-live is zero, then expiration is also zero - indicating that 
            the message never expires.
            </description></item>
            </list>
            <para>
            Programs can use this property to define a default time-to-live for messages 
            that this producer sends. Individual sending calls can override this default value.
            </para>
            <para>Whenever your application uses non-zero values for message expiration or time-to-live, 
            you must ensure that clocks are synchronized among all the host computers that 
            send and receive messages. Synchronize clocks to a tolerance that is a very 
            small fraction of the smallest or time-to-live.
            </para>
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueSender.Send(TIBCO.EMS.UFO.Message,TIBCO.EMS.MessageDeliveryMode,System.Int32,System.Int64)">
            <summary> Sends a message to the queue, specifying delivery mode, 
            priority, and time to live. </summary>
            <param name="message">The message to send.</param>
            <param name="deliveryMode">The delivery mode to use.  This argument may be either an 
            enumerated value (see <see cref="T:TIBCO.EMS.MessageDeliveryMode">TIBCO.EMS.MessageDeliveryMode</see>) or an integer 
            (see <see cref="T:TIBCO.EMS.DeliveryMode">TIBCO.EMS.DeliveryMode</see>). We recommend enumerated values, because 
            they enable .NET to do stronger type checking at compile time, which can 
            enhance program reliability.</param>
            <param name="priority"><para>The priority for this message.
            </para>
            <para>Priority affects the order in which the server delivers messages to 
            consumers (higher values first). The JMS specification defines ten levels 
            of priority value, from zero (lowest priority) to 9 (highest priority). 
            The specification suggests that clients consider 0-4 as gradations of normal 
            priority, and priorities 5-9 as gradations of expedited priority.</para></param>
            <param name="timeToLive"><para>The message's lifetime (in milliseconds) before it expires.
            </para>
            <list type="bullet">
            <item><description>If the time-to-live is non-zero, the expiration is the sum of that time-to-live 
            and the sending client's current time (GMT). This rule applies even within 
            sessions with transaction semantics - the timer begins with the send call, 
            not the commit call.
            </description></item>
            <item><description>If the time-to-live is zero, then expiration is also zero - indicating that 
            the message never expires.
            </description></item>
            </list>
            <para>
            Programs can use this property to define a default time-to-live for messages 
            that this producer sends. Individual sending calls can override this default value.
            </para>
            <para>Whenever your application uses non-zero values for message expiration or time-to-live, 
            you must ensure that clocks are synchronized among all the host computers that 
            send and receive messages. Synchronize clocks to a tolerance that is a very 
            small fraction of the smallest or time-to-live.
            </para>
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueSender.Send(TIBCO.EMS.UFO.Queue,TIBCO.EMS.UFO.Message)">
            <summary>Sends a message to a queue for an unidentified message producer.
            Uses the QueueSender's default delivery mode, priority, and time to live. 
            </summary>
            <remarks>
            <para>
            Typically, a message producer is assigned a queue at creation time; 
            however, the TIBCO EMS .NET API also supports unidentified message producers, 
            which require that the queue be supplied every time a message is sent. 
            </para>
            </remarks>
            <param name="queue">the queue to send this message to</param>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueSender.Send(TIBCO.EMS.UFO.Queue,TIBCO.EMS.UFO.Message,System.Int32,System.Int32,System.Int64)">
            <summary>Sends a message to a queue for an unidentified message producer.
            Uses the QueueSender's default delivery mode, priority, and time to live. 
            </summary>
            <remarks>
            <para>
            Typically, a message producer is assigned a queue at creation time; 
            however, the TIBCO EMS .NET API also supports unidentified message producers, 
            which require that the queue be supplied every time a message is sent. 
            </para>
            </remarks>
            <param name="queue">the queue to send this message to</param>
            <param name="message">The message to send.</param>
            <param name="deliveryMode">The delivery mode to use.  This argument may be either an 
            enumerated value (see <see cref="T:TIBCO.EMS.MessageDeliveryMode">TIBCO.EMS.MessageDeliveryMode</see>) or an integer 
            (see <see cref="T:TIBCO.EMS.DeliveryMode">TIBCO.EMS.DeliveryMode</see>). We recommend enumerated values, because 
            they enable .NET to do stronger type checking at compile time, which can 
            enhance program reliability.</param>
            <param name="priority"><para>The priority for this message.
            </para>
            <para>Priority affects the order in which the server delivers messages to 
            consumers (higher values first). The JMS specification defines ten levels 
            of priority value, from zero (lowest priority) to 9 (highest priority). 
            The specification suggests that clients consider 0-4 as gradations of normal 
            priority, and priorities 5-9 as gradations of expedited priority.</para></param>
            <param name="timeToLive"><para>The message's lifetime (in milliseconds) before it expires.
            </para>
            <list type="bullet">
            <item><description>If the time-to-live is non-zero, the expiration is the sum of that time-to-live 
            and the sending client's current time (GMT). This rule applies even within 
            sessions with transaction semantics - the timer begins with the send call, 
            not the commit call.
            </description></item>
            <item><description>If the time-to-live is zero, then expiration is also zero - indicating that 
            the message never expires.
            </description></item>
            </list>
            <para>
            Programs can use this property to define a default time-to-live for messages 
            that this producer sends. Individual sending calls can override this default value.
            </para>
            <para>Whenever your application uses non-zero values for message expiration or time-to-live, 
            you must ensure that clocks are synchronized among all the host computers that 
            send and receive messages. Synchronize clocks to a tolerance that is a very 
            small fraction of the smallest or time-to-live.
            </para>
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueSender.Send(TIBCO.EMS.UFO.Queue,TIBCO.EMS.UFO.Message,TIBCO.EMS.MessageDeliveryMode,System.Int32,System.Int64)">
            <summary>Sends a message to a queue for an unidentified message producer.
            Uses the QueueSender's default delivery mode, priority, and time to live. 
            </summary>
            <remarks>
            <para>
            Typically, a message producer is assigned a queue at creation time; 
            however, the TIBCO EMS .NET API also supports unidentified message producers, 
            which require that the queue be supplied every time a message is sent. 
            </para>
            </remarks>
            <param name="queue">the queue to send this message to</param>
            <param name="message">The message to send.</param>
            <param name="deliveryMode">The delivery mode to use.  This argument may be either an 
            enumerated value (see <see cref="T:TIBCO.EMS.MessageDeliveryMode">TIBCO.EMS.MessageDeliveryMode</see>) or an integer 
            (see <see cref="T:TIBCO.EMS.DeliveryMode">TIBCO.EMS.DeliveryMode</see>). We recommend enumerated values, because 
            they enable .NET to do stronger type checking at compile time, which can 
            enhance program reliability.</param>
            <param name="priority"><para>The priority for this message.
            </para>
            <para>Priority affects the order in which the server delivers messages to 
            consumers (higher values first). The JMS specification defines ten levels 
            of priority value, from zero (lowest priority) to 9 (highest priority). 
            The specification suggests that clients consider 0-4 as gradations of normal 
            priority, and priorities 5-9 as gradations of expedited priority.</para></param>
            <param name="timeToLive"><para>The message's lifetime (in milliseconds) before it expires.
            </para>
            <list type="bullet">
            <item><description>If the time-to-live is non-zero, the expiration is the sum of that time-to-live 
            and the sending client's current time (GMT). This rule applies even within 
            sessions with transaction semantics - the timer begins with the send call, 
            not the commit call.
            </description></item>
            <item><description>If the time-to-live is zero, then expiration is also zero - indicating that 
            the message never expires.
            </description></item>
            </list>
            <para>
            Programs can use this property to define a default time-to-live for messages 
            that this producer sends. Individual sending calls can override this default value.
            </para>
            <para>Whenever your application uses non-zero values for message expiration or time-to-live, 
            you must ensure that clocks are synchronized among all the host computers that 
            send and receive messages. Synchronize clocks to a tolerance that is a very 
            small fraction of the smallest or time-to-live.
            </para>
            </param>
        </member>
        <member name="P:TIBCO.EMS.UFO.QueueSender.Queue">
            <summary> Gets the queue associated with this QueueSender. </summary>
            <remarks>
            <para>Each send call directs a message to a queue.
            </para>
            <para>A client can use this property to define a default queue for messages that this 
            producer sends. Individual sending calls can override this default value.
            </para>
            <para>A client sets this queue when creating the sender, and cannot subsequently change it.
            </para>
            </remarks>
            <returns>this sender's queue </returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.QueueSession">
            <summary>Session restricted to queues</summary>
            <remarks>
            <b>Note: </b>
            The QueueSession class is for backwards compatibility to support older clients.
            New clients should use the <see cref="T:TIBCO.EMS.UFO.Session">Session</see> class.
            
            <para>A QueueSession object provides methods for creating 
            <see cref="T:TIBCO.EMS.UFO.QueueReceiver">QueueReceiver</see>, 
            <see cref="T:TIBCO.EMS.UFO.QueueSender">QueueSender</see>,
            <see cref="T:TIBCO.EMS.UFO.QueueBrowser">QueueBrowser</see>, and
            <see cref="T:TIBCO.EMS.UFO.TemporaryQueue">TemporaryQueue</see> objects. 
            </para>
            <para>If there are messages that have been received but not acknowledged 
            when a QueueSession terminates, these messages will be retained and 
            redelivered when a consumer next accesses the queue. 
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueSession.CreateReceiver(TIBCO.EMS.UFO.Queue)">
            <summary> Create a QueueReceiver object to receive messages from the specified queue 
            </summary>
            <remarks>
            The QueueReceiver object will be recreated during connection recovery process.
            </remarks>
            <param name="queue">the Queue to access </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueSession.CreateReceiver(TIBCO.EMS.UFO.Queue,System.String)">
            <summary> Create a QueueReceiver object to receive messages from 
            the specified queue using a message selector 
            </summary>
            <remarks>
            The QueueReceiver object will be recreated during connection recovery process.
            </remarks>
            <param name="queue">the Queue to access</param>
            <param name="messageSelector">only messages with properties 
            matching the message selector expression are delivered. 
            A value of null or an empty string indicates that there is 
            no message selector for the message consumer. </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.QueueSession.CreateSender(TIBCO.EMS.UFO.Queue)">
            <summary> Create a QueueSender object to send messages to the specified queue 
            </summary>
            <remarks>
            The QueueSender object will be recreated during connection recovery process.
            </remarks>
            <param name="queue">the Queue to access, or null if this is an unidentified producer 
            </param>
        </member>
        <member name="T:TIBCO.EMS.UFO.Session">
            <summary>A Session object is a single-threaded context for 
            producing and consuming messages. 
            </summary>
            <remarks ref="true()">
            <para>Sessions combine several roles:</para>
            <list type="bullet">
            <item>Factory for message producers and consumers.</item>
            <item>Factory for message objects.</item>
            <item>Factory for temporary destinations.</item>
            <item>Factory for dynamic destinations.</item>
            <item>Factory for queue browsers.</item>
            <item>Serializer for inbound and outbound messages.</item>
            <item>Serializer for asynchronous message events (or message listeners) of its consumer objects.</item>
            <item>Cache for inbound messages (until the program acknowledges them).</item>
            <item>Transaction support (when enabled).</item>
            </list>
            <para><b>Single Thread</b></para>
            <para>The JMS specification restricts programs to use each session within a single thread.
            </para>
            <list type="table">
            <item>
            <term>Associated Objects</term>
            <description>The same single-thread restriction applies to objects associated with a session, namely, 
            messages, message consumers, durable subscribers, message producers, queue browsers, 
            and temporary destinations (however, static and dynamic destinations are exempt 
            from this restriction).</description></item>
            <item>
            <term>Corollary</term>
            <description>One consequence of this rule is that all the consumers of a session must deliver 
            messages in the same mode, either synchronously or asynchronously.</description></item>
            <item>
            <term>Asynchronous</term>
            <description>In asynchronous delivery, the program registers message handler events or message 
            listeners with the session's consumer objects. An internal dispatcher thread delivers 
            messages to those event handlers or listeners (in all the session's consumer objects). 
            No other thread may use the session (nor objects created by the session).
            </description></item>
            <item>
            <term>Synchronous</term>
            <description>In synchronous delivery, the program explicitly begins a thread for the session. 
            That thread processes inbound messages and produces outbound messages, serializing 
            this activity among the session's producers and consumers. Methods that request the 
            next message (such as <see cref="M:TIBCO.EMS.UFO.MessageConsumer.Receive(System.Int64)">MessageConsumer.Receive</see>) 
            can organize the thread's activity.
            </description></item>
            <item>
            <term>Close</term>
            <description>The only exception to the rule restricting session calls to a single thread is the 
            method <see cref="M:TIBCO.EMS.UFO.Session.Close"/>; programs can call Close from any thread at any time.
            </description></item>
            </list>
            <para><b>Transactions</b></para>
            <para>A session has either transaction or non-transaction semantics. When a program 
            specifies transaction semantics, the session object cooperates with the server, and 
            all messages that flow through the session become part of a transaction.
            </para>
            <list type="bullet">
            <item>When the program calls <see cref="M:TIBCO.EMS.UFO.Session.Commit"/>, the session acknowledges all inbound 
            messages in the current transaction, and the server delivers all outbound messages 
            in the current transaction to their destinations.</item>
            <item>If the program calls <see cref="M:TIBCO.EMS.UFO.Session.Rollback"/>, the session recovers all inbound 
            messages in the current transaction (so the program can consume them in a new 
            transaction), and the server destroys all outbound messages in the current transaction.</item> 
            </list>
            <para>After these actions, both <see cref="M:TIBCO.EMS.UFO.Session.Commit"/> and <see cref="M:TIBCO.EMS.UFO.Session.Rollback"/> 
            immediately begin a new transaction.
            </para>
            </remarks>
        </member>
        <member name="F:TIBCO.EMS.UFO.Session.SESSION_TRANSACTED">
            <summary> The session is transacted </summary>
            <remarks>
            The <see cref="P:TIBCO.EMS.UFO.Session.IsTransacted"/> property has this value (true) if the 
            session is transacted.
            </remarks>
        </member>
        <member name="F:TIBCO.EMS.UFO.Session.AUTO_ACKNOWLEDGE">
            <summary> Automatic acknowledgment </summary>
            <remarks ref="true()">
            In this mode, the session automatically acknowledges a message when message 
            processing is finished.  "Finished" in this case is when either of these methods 
            returns successfully:
            <list type="bullet">
            <item>Synchronous <see cref="M:TIBCO.EMS.UFO.MessageConsumer.Receive(System.Int64)">Receive</see> call</item>
            <item>Asynchronous listener handler <see cref="M:TIBCO.EMS.UFO.IMessageListener.OnMessage(TIBCO.EMS.UFO.Message)">OnMessage</see> 
            call</item>
            </list>
            </remarks>
        </member>
        <member name="F:TIBCO.EMS.UFO.Session.CLIENT_ACKNOWLEDGE">
            <summary> Client acknowledgment </summary>
            <remarks ref="true()">
            <para>In this mode, the client program acknowledges receipt by calling 
            <see cref="M:TIBCO.EMS.UFO.Message.Acknowledge">Message.Acknowledge</see>. 
            Each call acknowledges all messages received so far.
            </para>
            </remarks>
        </member>
        <member name="F:TIBCO.EMS.UFO.Session.DUPS_OK_ACKNOWLEDGE">
            <summary> Duplication ok acknowledgment </summary>
            <remarks ref="true()">
            <para>As with <see cref="F:TIBCO.EMS.UFO.Session.AUTO_ACKNOWLEDGE"/>, the session automatically acknowledges 
            messages. However, it may do so lazily. Lazy means that the provider 
            client library can delay transferring the acknowledgement to the server 
            until a convenient time; meanwhile the server might redeliver the message. 
            Lazy acknowledgement can reduce session overhead.
            </para>
            </remarks>
        </member>
        <member name="F:TIBCO.EMS.UFO.Session.NO_ACKNOWLEDGE">
            <summary>No acknowledge acknowledge mode</summary>
            <remarks ref="true()">
            <para>In NO_ACKNOWLEDGE mode, messages do not require acknowledgement 
            (which reduces message overhead). The server never redelivers messages.
            This mode is available for topic sessions only.
            This mode and behavior are proprietary extensions, specific to TIBCO EMS.
            </para>
            </remarks>
        </member>
        <member name="F:TIBCO.EMS.UFO.Session.EXPLICIT_CLIENT_ACKNOWLEDGE">
            <summary>Explicit client acknowledge mode</summary>
            <remarks ref="true()">
            <para>
            As with <see cref="F:TIBCO.EMS.UFO.Session.CLIENT_ACKNOWLEDGE"/>, the client program acknowledges receipt 
            by calling <see cref="M:TIBCO.EMS.UFO.Message.Acknowledge">Message.Acknowledge</see>. 
            However, each call acknowledges only the individual message. The client may 
            acknowledge messages in any order.
            </para>
            <para>This mode and behavior are proprietary extensions, specific to TIBCO EMS.
            </para>
            </remarks>
        </member>
        <member name="F:TIBCO.EMS.UFO.Session.EXPLICIT_CLIENT_DUPS_OK_ACKNOWLEDGE">
            <summary>Explicit client acknowledge mode with dups_ok</summary>
            <remarks ref="true()">
            <para>In EXPLICIT_CLIENT_DUPS_OK_ACKNOWLEDGE mode, the client program lazily 
            acknowledges only the individual message, by calling 
            <see cref="M:TIBCO.EMS.UFO.Message.Acknowledge">Message.Acknowledge</see>.
            The client may acknowledge messages in any order.
            </para>
            <para>Lazy means that the provider client library can delay transferring the 
            acknowledgement to the server until a convenient time; meanwhile the 
            server might redeliver the message.
            </para>
            <para>This mode and behavior are proprietary extensions, specific to TIBCO EMS.
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateBrowser(TIBCO.EMS.UFO.Queue)">
            <summary> Create a QueueBrowser object to peek at the messages 
            on the specified queue. </summary>
            <remarks>
            The QueueBrowser object will be recreated during connection recovery process.
            </remarks>
            <param name="queue">The queue to browse</param>
            <exception cref="T:TIBCO.EMS.EMSException">If the session fails to create a browser due to some internal error. </exception>
            <exception cref="T:TIBCO.EMS.InvalidDestinationException">If an invalid destination is specified </exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateBrowser(TIBCO.EMS.UFO.Queue,System.String)">
            <summary> Create a QueueBrowser object to peek at the messages on 
            the specified queue using a message selector. </summary>
            <remarks>
            The QueueBrowser object will be recreated during connection recovery process.
            </remarks>
            <param name="queue">The queue to browse</param>
            <param name="messageSelector">Only messages with properties matching 
            the message selector expression are delivered. A value of null or 
            an empty string specifies that the browser is to view all messages in the queue.</param>
            <exception cref="T:TIBCO.EMS.EMSException">If the session fails to create a browser
            due to some internal error. </exception>
            <exception cref="T:TIBCO.EMS.InvalidDestinationException">If an invalid destination is specified.</exception>
            <exception cref="T:TIBCO.EMS.InvalidSelectorException">If the message selector is invalid.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateConsumer(TIBCO.EMS.UFO.Destination)">
            <summary>Create a MessageConsumer for a specific destination. </summary>
            <remarks>
            <para>Because Queue and Topic both inherit from Destination, they can be 
            used in the destination parameter to create a MessageConsumer. 
            </para>
            <para> A client uses a MessageConsumer object to receive messages 
            that have been sent to a destination. 
            </para>
            <para> The MessageConsumer object will be recreated during connection recovery. 
            </para>
            </remarks>
            <param name="dest">The Destination to access.</param>
            <exception cref="T:TIBCO.EMS.EMSException">If the session fails to create 
            a consumer due to some internal error. </exception>
            <exception cref="T:TIBCO.EMS.InvalidDestinationException">If an invalid 
            destination is specified.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateConsumer(TIBCO.EMS.UFO.Destination,System.String)">
            <summary> Create a MessageConsumer for a specific destination,
            using a message selector. </summary>
            <remarks>
            <para>Because Queue and Topic both inherit from
            Destination, they can be used in the destination parameter to 
            create a MessageConsumer. 
            </para>
            <para> A client uses a MessageConsumer object to receive messages 
            that have been sent to a destination. 
            </para>
            <para> The MessageConsumer object will be recreated during connection recovery. 
            </para>
            </remarks>
            <param name="dest">The Destination to access.</param>
            <param name="messageSelector">Only messages with properties matching 
            the message selector expression are delivered. A value of null 
            or an empty string indicates that the message consumer is to receive all 
            messages. </param>
            <exception cref="T:TIBCO.EMS.EMSException">If the session fails to create 
            a consumer due to some internal error. </exception>
            <exception cref="T:TIBCO.EMS.InvalidDestinationException">If an invalid 
            destination is specified.</exception>
            <exception cref="T:TIBCO.EMS.InvalidSelectorException">If the message selector is invalid.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateConsumer(TIBCO.EMS.UFO.Destination,System.String,System.Boolean)">
            <summary>Create MessageConsumer for the specified destination, 
            using a message selector. This method can specify whether messages
            published by its own connection should be delivered to it, 
            if the destination is a topic </summary>
            <remarks>
            <para>
            Since Queue and Topic both inherit from Destination, they can be 
            used in the destination parameter to create a MessageConsumer. 
            </para>
            <para> A client uses a MessageConsumer object to receive messages 
            that have been sent to a destination. 
            </para>
            <para> The MessageConsumer object will be recreated during connection recovery. 
            </para>
            </remarks>
            <param name="dest">The Destination to access</param>
            <param name="messageSelector">Only messages with properties matching 
            the message selector expression are delivered. A value of null 
            or an empty string indicates that the message consumer is to receive all 
            messages. </param>
            <param name="noLocal">When true, the server filters messages so the consumer 
            does not receive messages that originate locally -- that is, messages sent through 
            the same connection.
            <para>When absent or false, the consumer receives messages with local origin.
            </para>
            </param>
            <exception cref="T:TIBCO.EMS.EMSException">If the session fails to create 
            a consumer due to some internal error. </exception>
            <exception cref="T:TIBCO.EMS.InvalidDestinationException">If an invalid 
            destination is specified.</exception>
            <exception cref="T:TIBCO.EMS.InvalidSelectorException">If the message selector is invalid.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateSharedConsumer(TIBCO.EMS.UFO.Topic,System.String)">
            <summary> Create a shared non-durable subscription (with the specified 
            name on the specified topic - if one does not already exist), and 
            a consumer on that subscription. 
            </summary>
            <remarks ref="true()">
            <para>
            If a shared non-durable subscription already exists with the same name
            and client identifier (if set), and the same topic and message 
            selector value has been specified, then this method creates a 
            <see cref="T:TIBCO.EMS.UFO.MessageConsumer"/> on the existing subscription.
            </para>
            <para>
            A non-durable shared subscription is used by a client which needs to 
            be able to share the work of receiving messages from a topic 
            subscription amongst multiple consumers. A non-durable shared 
            subscription may therefore have more than one consumer. Each 
            message from the subscription will be delivered to only one of 
            the consumers on that subscription. Such a subscription is not 
            persisted and will be deleted (together with any undelivered messages 
            associated with it) when there are no consumers on it. The term 
            "consumer" here means a MessageConsumer on any client.
            </para>
            <para> 
            A shared non-durable subscription is identified by a name specified by
            the client and by the client identifier (which may be unset). An 
            application which subsequently wishes to create a consumer on that 
            shared non-durable subscription must use the same client identifier.
            </para>
            <para>
            If a shared non-durable subscription already exists with the same name 
            and client identifier (if set) but a different topic or message 
            selector has been specified, and there is a consumer already active 
            (i.e. not closed) on the subscription, then an EMSException will be 
            thrown.
            </para>
            <para>
            There is no restriction on durable subscriptions and shared non-durable
            subscriptions having the same name and clientId (which may be unset). 
            Such subscriptions would be completely separate.
            </para>
            </remarks>
            <param name="topic">the <see cref="T:TIBCO.EMS.UFO.Topic"/> to subscribe to
            </param>
            <param name="sharedSubscriptionName">the name used to identify the 
            shared non-durable subscription
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateSharedConsumer(TIBCO.EMS.UFO.Topic,System.String,System.String)">
            <summary> Create a shared non-durable subscription (with the specified 
            name on the specified topic - if one does not already exist), and a 
            consumer on that subscription, using the specified message selector.
            </summary>
            <remarks ref="true()">
            <para>
            If a shared non-durable subscription already exists with the same name
            and client identifier (if set), and the same topic and message 
            selector value has been specified, then this method creates a 
            <see cref="T:TIBCO.EMS.UFO.MessageConsumer"/> on the existing subscription.
            </para>
            <para>
            A non-durable shared subscription is used by a client which needs to 
            be able to share the work of receiving messages from a topic 
            subscription amongst multiple consumers. A non-durable shared 
            subscription may therefore have more than one consumer. Each 
            message from the subscription will be delivered to only one of 
            the consumers on that subscription. Such a subscription is not 
            persisted and will be deleted (together with any undelivered messages 
            associated with it) when there are no consumers on it. The term 
            "consumer" here means a MessageConsumer on any client.
            </para>
            <para> 
            A shared non-durable subscription is identified by a name specified by
            the client and by the client identifier (which may be unset). An 
            application which subsequently wishes to create a consumer on that 
            shared non-durable subscription must use the same client identifier.
            </para>
            <para>
            If a shared non-durable subscription already exists with the same name 
            and client identifier (if set) but a different topic or message 
            selector has been specified, and there is a consumer already active 
            (i.e. not closed) on the subscription, then an EMSException will be 
            thrown.
            </para>
            <para>
            There is no restriction on durable subscriptions and shared non-durable
            subscriptions having the same name and clientId (which may be unset). 
            Such subscriptions would be completely separate.
            </para>
            </remarks>
            <param name="topic">the <see cref="T:TIBCO.EMS.UFO.Topic"/> to subscribe to
            </param>
            <param name="sharedSubscriptionName">the name used to identify the 
            shared non-durable subscription
            </param>
            <param name="messageSelector">only messages with properties matching 
            the message selector expression are added to the shared non-durable 
            subscription. A value of null or an empty string indicates that 
            there is no message selector for the shared non-durable 
            subscription.
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateSharedDurableConsumer(TIBCO.EMS.UFO.Topic,System.String)">
            <summary> Create a shared durable subscription (with the specified
            name on the specified topic - if one does not already exist), and 
            a consumer on that subscription. 
            </summary>
            <remarks ref="true()"/>
            <para>
            Not supported by the UFO implementation.</para>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateSharedDurableConsumer(TIBCO.EMS.UFO.Topic,System.String,System.String)">
            <summary> Create a shared durable subscription (with the specified
            name on the specified topic - if one does not already exist), and 
            a consumer on that subscription, using the specified message selector.
            </summary>
            <remarks ref="true()"/>
            <para>
            Not supported by the UFO implementation. </para>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateTemporaryTopic">
            <summary> Create a TemporaryTopic object </summary>
            <remarks>A temporary topic lasts no longer than 
            the <see cref="T:TIBCO.EMS.UFO.Connection">Connection</see> object. 
            That is, when the connection is closed or broken, the server deletes 
            temporary topic associated with the connection.
            It will be recreated during connection recovery.
            </remarks>
            <returns> A TemporaryTopic object </returns>
            <exception cref="T:TIBCO.EMS.EMSException">If the session fails to create a temporary topic 
            due to some internal error.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateTemporaryQueue">
             <summary> Create a TemporaryQueue object </summary>
             <remarks> A temporary queue lasts no longer than the connection. That is, when the
             connection is closed or broken, the server deletes temporary queues associated
             with the connection.
             It will be recreated during connection recovery.
             </remarks>
             <returns> a temporary queue identity </returns>
             <exception cref="T:TIBCO.EMS.EMSException">if the session fails to create a temporary queue 
            due to some internal error.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateDurableSubscriber(TIBCO.EMS.UFO.Topic,System.String)">
            <summary> Create a durable subscriber to the specified topic </summary>
            <remarks ref="true()"/>
            <para>
            Not supported by the UFO implementation.</para>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateDurableSubscriber(TIBCO.EMS.UFO.Topic,System.String,System.String,System.Boolean)">
            <summary> Create a durable subscriber to the specified topic, 
            using a message selector and specifying whether messages published 
            by its own connection should be delivered to it. 
            </summary>
            <remarks ref="true()"/>
            <para>
            Not supported by the UFO implementation.</para>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateTopic(System.String)">
            <summary>Create a topic </summary>
            <remarks ref="true()">
            <para> If the named topic already exists at the server, then this method returns 
            that topic. (That topic can be either static or dynamic.)</para>
            <para>
            If the named topic does not yet exist at the server, and the server allows 
            dynamic topics, then this method creates a dynamic topic.</para>
            <para>
            Dynamic destinations are provider-specific, so programs that use them might 
            not be portable to other providers.</para>
            <b>Note: </b>This facility is provided for the rare cases where 
             clients need to dynamically manipulate topic identity. 
             This method is not for creating the physical topic.
             The physical creation of topics is an administrative task and is
             not to be initiated by the EMS API. The one exception is the creation 
             of temporary topics, which is accomplished with the createTemporaryTopic method. 
            </remarks>
            <param name="topicName">Get or create the topic with this name. </param>
            <returns> A Topic with the given name. </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateQueue(System.String)">
            <summary>Create a queue </summary>
            <remarks ref="true()">
            <para> This facility is provided for the rare cases where clients 
            need to dynamically manipulate queue identity. 
            </para>
            <para> Note that this method is not for creating the physical queue.
            The physical creation of queues is an administrative task and
            is not to be initiated by the EMS API. The one exception is 
            the creation of temporary queues, which is accomplished with 
            the <see cref="M:TIBCO.EMS.UFO.Session.CreateTemporaryQueue"/> method. 
            </para>
            <para>If the named queue already exists at the server, then this method returns 
            that queue. (That queue can be either static or dynamic.)
            </para>
            <para>If the named queue does not yet exist at the server, and the server allows 
            dynamic queues, then this method creates a dynamic queue.
            </para>
            <para>Dynamic destinations are provider-specific, so programs that use them might 
            not be portable to other providers.
            </para>
            </remarks>
            <param name="queueName">The name of the Queue to be created.</param>
            <returns>A Queue with the given name.</returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateProducer(TIBCO.EMS.UFO.Destination)">
            <summary>Create a MessageProducer to send messages to the 
            specified destination. </summary>
            <remarks>
            <para>
            A client uses a MessageProducer object to send messages to a
            destination. Since Queue and Topic both inherit from Destination,
            they can be used in the destination parameter to create a MessageProducer object. 
            The MessageProducer object will be recreated during connection recovery.
            </para>
            </remarks>
            <param name="dest"><para>When non-null, the producer sends messages to this destination.
             When null, the client program must specify the destination for each message individually.
            </para></param>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.Unsubscribe(System.String)">
            <summary> Unsubscribe a durable topic subscription</summary>
            <para>
            Not supported by the UFO implementation.</para>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateBytesMessage">
            <summary>Create a byte array message</summary>
            <remarks>
            This method creates a <see cref="T:TIBCO.EMS.UFO.BytesMessage">BytesMessage</see> object,
            which is used to send a message containing a stream of uninterpreted bytes.
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateMapMessage">
            <summary>Create a MapMessage object. A MapMessage object is used to
            send a self-defining set of name-value pairs, where names are 
            String objects and values are primitive values in the .NET programming language. 
            </summary>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateMessage">
            <summary> Create a Message object. The Message interface is the root 
            interface of all TIBCO EMS messages. A Message object holds all the 
             standard message header information. It can be sent when a message
            containing only header information is sufficient
            </summary>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateObjectMessage">
            <summary>Create an ObjectMessage object. An ObjectMessage object 
            is used to send a message that contains a serializable .NET object.
            </summary>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateObjectMessage(System.Object)">
            <summary>Create an ObjectMessage object. An ObjectMessage object 
            is used to send a message that contains a serializable .NET object.
            </summary>
            <param name="obj"> and .NET serialized object </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateStreamMessage">
            <summary>Create a StreamMessage object </summary>
            <remarks>
            A StreamMessage object is 
            used to send a self-defining stream of primitive values in the .NET 
            programming language.
            </remarks>
            <returns>A new StreamMessage object.</returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateTextMessage">
            <summary>Create a TextMessage object</summary>
            <remarks>
            A TextMessage object is 
            used to send a message containing a String object.
            </remarks>
            <returns>A new TextMessage object.</returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.CreateTextMessage(System.String)">
            <summary>Create a TextMessage object</summary>
            <remarks> 
            A TextMessage object is 
            used to send a message containing a String object.
            </remarks>
            <param name="text">The string used as data to initialize this message </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.Commit">
            <summary> Commit the open transaction</summary>
            <remarks>
            A session (with transaction semantics) always has exactly one open 
            transaction. Message operations associated with the session become 
            part of that transaction. This call commits all the messages within 
            the transaction and releases any locks. Then it opens a new transaction.
            </remarks>
            <exception cref="T:TIBCO.EMS.EMSException">If the Commit failed due to some internal error.</exception>
            <exception cref="T:TIBCO.EMS.TransactionRolledBackException">An attempt to commit a transaction 
            resulted in rollback.</exception>
            <exception cref="T:TIBCO.EMS.IllegalStateException">Commit occurred in an inappropriate context.</exception>
            
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.Rollback">
            <summary>Roll back messages in the current transaction</summary>
            <remarks>
            Roll back any messages done in this transaction and 
            release any locks currently held. 
            <para>
            Messages sent to a queue with prefetch=none and maxRedelivery=number properties 
            are not received number times by an EMS application that receives in a loop 
            and does an XA rollback after the XA prepare phase.
            </para>
            </remarks>
            <exception cref="T:TIBCO.EMS.IllegalStateException">The session does not have transactional 
            semantics.</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.Recover">
            <summary> Recover from undetermined state during message processing</summary>
            <remarks>
            <para>Exceptions during message processing can sometimes leave a program in an ambiguous 
            state. For example, some messages might be partially processed. This method lets a 
            program return to an unambiguous state - the point within the message stream when 
            the program last acknowledged the receipt of inbound messages. Programs can then 
            review the messages delivered since that point (they are marked as redelivered), 
            and resolve ambiguities about message processing.
            </para>
            <para>Programs can also use this method to resolve similar ambiguities after a Connection 
            stops delivering messages, and then starts again.
            </para>
            <para><b>Operation</b></para>
            <para>This method requests that the server do this sequence of actions:
            </para>
            <list type="number">
            <item>Stop message delivery within the session.</item>
            <item>Mark as redelivered, any messages that the server has attempted to deliver to 
            the session, but for which it has not received acknowledgement (that is, messages 
            for which processing state is ambiguous).
            According to the JMS specification, the server need not redeliver messages in 
            the same order as it first delivered them.
            </item>
            <item>Restart message delivery (including messages marked as redelivered in step 2).
            </item></list>
            <para>When a session has transactional semantics, this method throws IllegalStateException 
            (commit and rollback are more appropriate for transactions).
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.Close">
            <summary>Close a session and reclaim resources</summary>
            <remarks>
            <para>Closing a session automatically closes its consumers (except for durable 
            subscribers), producers and browsers.
            </para>
            <para><b>Blocking</b></para>
            <para>If any message listener or receive call associated with the session is 
            processing a message when the program calls this method, all facilities 
            of the connection and its sessions remain available to those listeners 
            until they return. In the meantime, this method blocks until that processing 
            completes -- that is, until all message listeners and receive calls have returned.
            A blocked message consumer receive call returns null when this session is closed.
            </para>
            <para><b>Transactions</b></para>
            <para>Closing a session rolls back the open transaction in the session.
            </para>
            </remarks>
            
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.Run">
            <summary> Obsolete: Not to be used by ordinary JMS Clients </summary>
            \deprecated Ordinary JMS clients should not use this method.
        </member>
        <member name="P:TIBCO.EMS.UFO.Session.AcknowledgeMode">
            <summary> Get the acknowledge mode of the session as integer constants as
            defined in Session class.</summary>
            <remarks ref="true()">
            <b>Note: </b>
            Clients should use the <see cref="T:TIBCO.EMS.SessionMode">TIBCO.EMS.SessionMode</see>
            enum instead.
            
            <para>This mode governs message acknowledgement and redelivery for consumers associated 
            with the session. For values, see the <see cref="T:TIBCO.EMS.UFO.Session"/> Acknowledge Modes.
            </para>
            <para>This property is irrelevant when <see cref="P:TIBCO.EMS.UFO.Session.IsTransacted"/> is true.
            </para>
            </remarks>
            
        </member>
        <member name="P:TIBCO.EMS.UFO.Session.Connection">
            <summary>Get the connection the session belongs to </summary>
            <value>The Connection instance </value>
        </member>
        <member name="P:TIBCO.EMS.UFO.Session.IsClosed">
            <summary>Get whether the session is closed. </summary>
            <value>True if session closed, false otherwise </value>
        </member>
        <member name="P:TIBCO.EMS.UFO.Session.SessID">
            <summary>Gets the id of the session. </summary>
            <value>The unique id of the sesion. </value>
        </member>
        <member name="P:TIBCO.EMS.UFO.Session.IsTransacted">
            <summary> Get whether the session is transacted </summary>
            <remarks>
            <para>When true, the session has transaction semantics, and AcknowledgeMode is irrelevant.
            </para>
            <para>When false, it has non-transaction semantics.
            </para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.Session.SessionAcknowledgeMode">
            <summary> Get the acknowledge mode of the session as a SessionMode type</summary>
            <remarks ref="true()">
            <para>This property accesses the same information as <see cref="P:TIBCO.EMS.UFO.Session.AcknowledgeMode"/>,
            but uses enumerated values rather than ordinary integers. It is recommend over 
            <see cref="P:TIBCO.EMS.UFO.Session.AcknowledgeMode"/> because it enables .NET to do stronger type 
            checking at compile time, which can enhance program reliability. For return values, 
            see <see cref="T:TIBCO.EMS.SessionMode">TIBCO.EMS.SessionMode</see>.
            </para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.Session.MessageListener">
            <summary> Get or set the message listener for the session. -Deprecated, use MessageConsumer.MessageListener instead. </summary>
            <remarks> The access of message listener through the Session object 
            is deprecated.  Please use the facility in MessageConsumer instead.
            <p>User should either use MessageHandler or MessageListener
            to handle asynchronous message consumptions, but <b>not</b> both.  
            Setting up both will cause the message to be handled more than once 
            which can result in undefined behavior </p></remarks>
            <exception cref="T:TIBCO.EMS.IllegalStateException">If the session is closed</exception>
            \deprecated Use MessageConsumer.MessageListener instead.
        </member>
        <member name="P:TIBCO.EMS.UFO.Session.Transacted">
            <summary> Get whether an open session is transacted </summary>
            <remarks> IllegalStateException will be thrown if the session is 
            closed. </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.Session.ToString">
            <summary>Returns a string representation of this <c>Session</c> object.
            </summary>
            <returns>A string representation </returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.StreamMessage">
            <summary>
            A StreamMessage object is used to send a stream of primitive types in the .NET  
            programming language. It is filled and read sequentially. 
            It inherits from the Message interface and adds a stream message body. 
            </summary>
            <remarks ref="true()">
            <para>
            Each datum in the stream must be a primitive type, or an object representation
            of a primitive type.</para>
            <para>
            The primitive types can be read or written explicitly using methods 
            for each type. They may also be read or written generically as objects. 
            For instance, a call to StreamMessage.writeInt(6) is equivalent to 
            StreamMessage.writeObject((object)6). Both forms are provided, because 
            the explicit form is convenient for static programming, and the object form 
            is needed when types are not known at compile time. 
            </para>
            <para> When the message is first created, and when clearBody is called, 
            the body of the message is in write-only mode. After the first call 
            to reset has been made, the message body is in read-only mode. 
            After a message has been sent, the client that sent it can retain and 
            modify it without affecting the message that has been sent. The same 
            message object can be sent multiple times. When a message has been received, 
            the provider has called reset so that the message body is in read-only mode for the client. 
            </para>
            <para> If clearBody is called on a message in read-only mode, 
            the message body is cleared and the message body is in write-only mode. 
            </para> 
            <para>
            If a client attempts to read a message in write-only mode, 
             a MessageNotReadableException is thrown. </para>
            <para>If a client attempts to write a message in read-only mode,
            a MessageNotWriteableException is thrown. </para>
            <para><b>Extensions</b></para>
            <para>
            TIBCO Enterprise Message Service extends the MapMessage and StreamMessage body types 
            in two ways. These extensions allow TIBCO Enterprise Message Service to exchange messages 
            with TIBCO Rendezvous and ActiveEnterprise formats that have certain features not available 
            within the JMS specification.</para>
            <list type="bullet"> 
            <item><description>You can insert another MapMessage or StreamMessage instance as a 
            submessage into a MapMessage or StreamMessage, generating a series of nested messages, 
            instead of a flat message. </description></item>
            <item><description>You can use arrays as well as primitive types for the values. </description></item>
            </list>
            <para>
            These extensions add considerable flexibility to the two body types. However, they are 
            extensions and therefore not compliant with JMS specifications. Extended messages are 
            tagged as extensions with the vendor property tag JMS_TIBCO_MSG_EXT. 
            </para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.StreamMessage.FieldCount">
            <summary>
            Returns number of fields that this message holds.
            </summary>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.Clone">
            <summary>Create a copy of the StreamMessage object. </summary>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.ClearBody">
            <summary> Clears a message body in preparation for writing</summary>
            <remarks>When clearBody is called, the message body is cleared and the message
            body is set to write-only mode. After the first call 
            to reset has been made, the message body is in read-only mode. </remarks> 
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.ReadBoolean">
            <summary> Reads a boolean from the stream message. </summary>
            <remarks>This method reads a byte of data from the stream and advances the read 
            position so that the next read call gets the next datum.</remarks>
            <returns>the boolean value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.ReadByte">
            <summary> Reads a byte from the stream message. </summary>
            <remarks>This method reads a byte of data from the stream and advances the read 
            position so that the next read call gets the next datum.</remarks>
            <returns>the byte value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.ReadShort">
            <summary> Reads a short from the stream message. </summary>
            <remarks>This method reads two bytes of data from the stream and advances the read 
            position so that the next read call gets the next datum.</remarks>
            <returns>the short value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.ReadChar">
            <summary> Reads a char from the stream message. </summary>
            <remarks>This method reads two bytes of data from the stream and advances the read 
            position so that the next read call gets the next datum.</remarks>
            <returns>the char value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.ReadInt">
            <summary> Reads an int from the stream message. </summary>
            <remarks>This method reads four bytes of data from the stream and advances the read 
            position so that the next read call gets the next datum.</remarks>
            <returns>the int value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.ReadLong">
            <summary> Reads a long from the stream message. </summary>
            <remarks>This method reads eight bytes of data from the stream and advances the read 
            position so that the next read call gets the next datum.</remarks>
            <returns>the long value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.ReadFloat">
            <summary> Reads a float from the stream message. </summary>
            <remarks>This method reads four bytes of data from the stream and advances the read 
            position so that the next read call gets the next datum.</remarks>
            <returns>the float value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.ReadDouble">
            <summary> Reads a double from the stream message. </summary>
            <remarks>This method reads eight bytes of data from the stream and advances the read 
            position so that the next read call gets the next datum.</remarks>
            <returns>the double value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.ReadString">
            <summary> Reads a string from the stream message. </summary>
            <returns>the string value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.ReadBytes(System.Byte[])">
            <summary> Reads a byte array from the stream message. </summary>
            <remarks>
            <para>Each call reads bytes from the stream into the byte array, and advances the read position.</para>
            <para> This call returns the actual number of bytes read. When the call cannot read even one byte, 
            it returns -1.</para>
            <para>A program that calls this method must call it repeatedly until it returns -1, 
            indicating that the program has extracted the complete set of bytes. Only then may the 
            program call another read method.</para>
            </remarks>
            <returns>The byte array value read, or -1 when there are no more bytes to read.</returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.ReadObject">
            <summary> Reads an object from the stream message. </summary>
            <returns>the object value read </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.WriteBoolean(System.Boolean)">
            <summary> Writes a boolean to the stream message. </summary>
            <remarks><para>Each call writes a data value to the stream and advances the write 
            position so that the next write call appends to the new end of the stream.
            </para> </remarks> 
            <param name="value">the boolean value to be written. The value true is written as 
             (byte)1; the value false is written as (byte)0. </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.WriteByte(System.Byte)">
            <summary> Writes a byte to the stream message. </summary>
            <remarks><para>Each call writes a data value to the stream and advances the write 
            position so that the next write call appends to the new end of the stream.
            </para> </remarks> 
            <param name="value">the byte value to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.WriteShort(System.Int16)">
            <summary> Writes a short to the stream message. </summary>
            <remarks><para>Each call writes a data value to the stream and advances the write 
            position so that the next write call appends to the new end of the stream.
            </para> </remarks> 
            <param name="value">the short value to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.WriteChar(System.Char)">
            <summary> Writes a char to the stream message. </summary>
            <remarks><para>Each call writes a data value to the stream and advances the write 
            position so that the next write call appends to the new end of the stream.
            </para> </remarks> 
            <param name="value">the char value to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.WriteInt(System.Int32)">
            <summary> Writes an int to the stream message. </summary>
            <remarks><para>Each call writes a data value to the stream and advances the write 
            position so that the next write call appends to the new end of the stream.
            </para> </remarks> 
            <param name="value">the int value to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.WriteLong(System.Int64)">
            <summary> Writes a long to the stream message. </summary>
            <remarks><para>Each call writes a data value to the stream and advances the write 
            position so that the next write call appends to the new end of the stream.
            </para> </remarks> 
            <param name="value">the long value to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.WriteFloat(System.Single)">
            <summary> Writes a float to the stream message. </summary>
            <remarks><para>Each call writes a data value to the stream and advances the write 
            position so that the next write call appends to the new end of the stream.
            </para> </remarks> 
            <param name="value">the float value to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.WriteDouble(System.Double)">
            <summary> Writes a double to the stream message. </summary>
            <remarks><para>Each call writes a data value to the stream and advances the write 
            position so that the next write call appends to the new end of the stream.
            </para> </remarks> 
            <param name="value">the double value to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.WriteString(System.String)">
            <summary> Writes a string to the stream message. </summary>
            <remarks><para>Each call writes a data value to the stream and advances the write 
            position so that the next write call appends to the new end of the stream.
            </para> </remarks> 
            <param name="value">the string value to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.WriteBytes(System.Byte[])">
            <summary> Writes a byte array to the stream message. </summary>
            <remarks><para>Each call writes bytes from the byte array to the stream and advances the write 
            position so that the next write call appends to the new end of the stream.
            </para> </remarks> 
            <param name="value">the byte array value to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary> Writes a portion of a byte array as a byte array field to the stream message. 
            </summary>
            <remarks><para>Each call writes bytes from the byte array to the stream and advances the write 
            position so that the next write call appends to the new end of the stream.
            </para>
            <para>The a portion of the byte array value is written to the message as 
            a byte array field. Consecutively written byte array fields are treated 
            as two distinct fields when the fields are read. 
            </para>
            <para>
            This method attempts to write the specified bytes to the stream; otherwise it 
            attempts to write the entire byte array. The offset and length arguments must be 
            between zero and value.length (inclusive) and their sum must also fall within the 
            same range. That is, these two arguments must specify a span of bytes within the 
            value argument. Otherwise the call throws an IndexOutOfRangeException (and does 
            not write any bytes).
            </para>
            </remarks>
            <param name="value">the byte value to be written </param>
            <param name="offset">the initial offset within the byte array</param>
            <param name="length">the number of bytes to use </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.WriteObject(System.Object)">
            <summary> Writes an object to the stream message. </summary>
            <remarks>This method converts an object to a primitive value (if possible)
            and writes that value to the stream message.</remarks>
            <param name="value">the object to be written </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.Reset">
            <summary> Puts the message body in read-only mode and repositions 
            the stream to the beginning </summary>
            <remarks>Reset prepares a message body for reading, as if the message were 
            newly received. This method contrasts with the ClearBody method, which clears a message 
            body in preparation for writing, as if it were newly created.</remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.StreamMessage.ToString">
            <summary> Return a string representation of the message </summary>
            <returns> string representation of the message </returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.TemporaryQueue">
            <summary>
            A TemporaryQueue object is a unique Queue object created 
            for the duration of a Connection. It is a system-defined queue 
            that can be consumed only by the Connection that created it. 
            </summary>
            <remarks ref="true()">
            <para>
            A TemporaryQueue object can be created at either the Session or 
            QueueSession level. Creating a TemporaryQueue at the Session level allows the 
            TemporaryQueue to participate in transactions with objects from the 
            Pub/Sub domain. If a TemporaryQueue is created at the QueueSession level, it will only 
            be able participate in transactions with objects from the PTP domain. 
            </para>
            <para>
            Programs can use temporary queues as reply destinations. 
            A temporary queue exists only for the duration of the session's connection,
            and is available only within that connection.
            Only consumers associated with the same connection as the temporary queue 
            can consume messages from it.
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.TemporaryQueue.Clone">
            <summary>
            Throws a NotSupported Exception
            </summary>
        </member>
        <member name="M:TIBCO.EMS.UFO.TemporaryQueue.Delete">
            <summary>
            Deletes a temporary queue that belongs to this connection.
            </summary>
            <remarks>
            <para>
            When a client deletes a temporary queue, the 
            server deletes any unconsumed messages in the queue.</para>
            <para>
            If the client still has listeners or receivers for the queue, or is in 
            the middle of a Receive call, then Delete throws an EMSException.</para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.TemporaryQueue.QueueName">
            <summary> Gets the name of the queue </summary>
            <remarks> Each queue has a name that is unique among all queues.</remarks>
            <returns>The lookup name of the queue object. If not set, null is returned </returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.TemporaryTopic">
            <summary>
            A TemporaryTopic object is a unique Topic object created for the 
            duration of a Connection.
            </summary>
            <remarks ref="true()">
            <para> A TemporaryTopic object can be created either at the 
            Session or TopicSession level. Creating a TemporaryTopic at the Session level 
            allows the TemporaryTopic to participate in the same transaction 
            with objects from the PTP domain. If a TemporaryTopic is created 
            at the TopicSession level, it will only be able participate in 
            transactions with objects from the Pub/Sub domain
            </para><para>
            Programs can use temporary topics as reply destinations.
            A temporary topic exists only for the duration of the session's connection, 
            and is available only within that connection.
            Only consumers associated with the same connection as the TemporaryTopic 
            can consume messages from a TemporaryTopic.
            </para><para>
            Servers connected by routes exchange messages sent to TemporaryTopic.</para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.TemporaryTopic.Clone">
            <summary>
            Throws a NotSupported Exception
            </summary>
        </member>
        <member name="M:TIBCO.EMS.UFO.TemporaryTopic.Delete">
            <summary> Deletes this temporary topic. </summary>
            <remarks>
            <para>When a client deletes a temporary topic, the server deletes any unconsumed 
            messages in the topic.</para>
            <para>If the client still has listeners or receivers for the topic, or is in the 
            middle of a Receive call, then Delete throws an EMSException.
            </para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.TemporaryTopic.TopicName">
            <summary> Gets the name of the topic </summary>
            <remarks>Each topic has a name that is unique among all topics.</remarks>
            <returns>The name of the topic, if not set, null is returned </returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.TextMessage">
            <summary>
            A TextMessage object is used to send a message containing a String. 
            It inherits from the Message interface and adds a text message body. 
            </summary>
            <remarks>
            <para>
            This message type can be used to transport text-based messages, including those with XML content. 
            </para>
            <para> When a client receives a TextMessage, it is in read-only mode. 
            If a client attempts to write to the message at this point, 
            a MessageNotWriteableException is thrown. If clearBody is called, 
            the message can now be both read from and written to. 
            </para>
            </remarks>
        </member>
        <member name="P:TIBCO.EMS.UFO.TextMessage.Text">
            <summary>Gets or sets the text content of the text message. </summary>
             <returns>The string as the content of the message. </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.TextMessage.Clone">
            <summary> Create a copy of the TextMessage object.</summary>
        </member>
        <member name="M:TIBCO.EMS.UFO.TextMessage.ClearBody">
            <summary> Clears a message body in preparation for writing</summary>
            <remarks>
            <para> When a client receives a TextMessage, it is in read-only mode. 
            If a client attempts to write to the message at this point, 
            a MessageNotWriteableException is thrown. </para>
            <para>
            Calling ClearBody clears the body of a text message, but leaves its header and 
            property values unchanged. If the text message body was read-only, calling ClearBody  
            makes the message writable. The message body appears and behaves identically to an 
            empty body in a newly created message.
            </para>
            </remarks>     
        </member>
        <member name="M:TIBCO.EMS.UFO.TextMessage.ToString">
            <summary> Return a string representation of the message </summary>
            <returns> string representation of the message </returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.Topic">
            <summary>A Topic object encapsulates a TIBCO EMS specific topic name.</summary>
            <remarks ref="true()">
            <para> Topics deliver each message to multiple consumers.</para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.Topic.#ctor">
            <summary> Constructs a new Topic object.</summary>
        </member>
        <member name="M:TIBCO.EMS.UFO.Topic.#ctor(System.String)">
            <summary> Constructs a new Topic object with the given address.
            
            </summary>
            <param name="address">address of the topic
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.Topic.#ctor(TIBCO.EMS.Topic)">
            <summary> Constructs a new Topic object with the given TIBCO.EMS.Topic 
            object.
            
            </summary>
            <param name="topic">object of TIBCO.EMS.Topic
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.Topic.Clone">
            <summary>
            Implementation of ICloneable.  Overrides the cloning process.
            </summary>
            <returns>A object that is a clone of this Topic instance.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Topic.Equals(System.Object)">
            <summary> Compare with another object for equality. </summary>
            <remarks> The current instance is said to be equals to another
            object when the latter is also a <c>Topic</c> instance and
            both have the same address. </remarks>
            <param name="obj">The object to compare with </param>
            <returns>true if the object passed is also of type <c>Topic</c> and
            has the same address as the current instance, false otherwise.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.Topic.GetHashCode">
            <summary>
            Returns a hashcode representing the current object
            </summary>
            <returns>A hashcode based on the <c>Topic</c>.
            </returns>
        </member>
        <member name="P:TIBCO.EMS.UFO.Topic.TopicName">
            <summary> Gets the name of the topic </summary>
            <remarks>Each topic has a name that is unique among all topics.</remarks>
            <returns>The name of the topic, if not set, null is returned </returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.TopicConnection">
            <summary>A TopicConnection object is an active connection 
            to a publish/subscribe TIBCO EMS Server.  </summary>
            <remarks>
            <b>Note: </b>
            This class is provided for backward compatibility to support older EMS clients programs. 
            New clients should use the <see cref="T:TIBCO.EMS.UFO.Connection">Connection</see> class instead.
            
            <para>
            A TopicConnection creates a <see cref="T:TIBCO.EMS.UFO.TopicSession">TopicSession</see> 
            for producing and consuming messages.
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicConnection.CreateTopicSession(System.Boolean,System.Int32)">
            <summary> Creates a TopicSession object. </summary>    
            <remarks>
            <b>Note: </b>
            This method is provided for backward compatibility to support older EMS clients programs. 
            
            The new topic session uses the connection for all server communications.
            It will be recreated during connection recovery.
            </remarks>
            <param name="transacted"><para>Indicates whether the session is transacted.</para>
            <para>When true, the new session has transaction semantics.</para>
            <para>When false, it has non-transaction semantics.</para>
            </param>
            <param name="acknowledgeMode"><para>Indicates whether and how the consumer  
            is to acknowledge received messages. </para>
            <para>This version of CreateTopicSession accepts an integer value associated with
            the acknowledge mode described by a <see cref="T:TIBCO.EMS.UFO.Session">Session</see> member
            and should only be used for backward compatibility.</para>
            <para>This parameter is ignored if the session is transacted. </para>
            </param>
            <returns>A newly created topic session </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicConnection.CreateTopicSession(System.Boolean,TIBCO.EMS.SessionMode)">
            <summary> Creates a TopicSession object. </summary>
            <remarks>
            <b>Note: </b>
            This method is provided for backward compatibility to support older EMS clients programs. 
            
            The new topic session uses the connection for all server communications.
            It will be recreated during connection recovery.
            </remarks>
            <param name="transacted">Indicates whether the session is transacted.
            <para>When true, the new session has transaction semantics.</para>
            <para>When false, it has non-transaction semantics.</para>
            </param>
            <param name="acknowledgeMode"><para>Indicates whether and how the consumer  
            is to acknowledge received messages. </para>
            <para>Legal values are listed under <see cref="T:TIBCO.EMS.SessionMode">TIBCO.EMS.SessionMode</see>.
            </para>
            <para>This parameter is ignored if the session is transacted. </para>
            </param>
            <returns>A newly created topic session </returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.TopicConnectionFactory">
            <summary>Backward compatibility. Administered object for creating topic connections.</summary>
            <remarks>
            <b>Note: </b>
            This class is provided for backward compatibility to support older EMS clients programs. 
            New clients should use the <see cref="T:TIBCO.EMS.UFO.ConnectionFactory">ConnectionFactory</see> class instead.
            
            <para>A client uses a TopicConnectionFactory object to create TopicConnection
            objects with the EMS Server.
            </para>
            <para>This class is provided only to support older clients.  New clients should use the 
            <see cref="T:TIBCO.EMS.UFO.ConnectionFactory">ConnectionFactory</see> object. 
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicConnectionFactory.#ctor">
            <summary> Construct an empty TopicConnectionFactory </summary>
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicConnectionFactory.#ctor(System.String)">
            <summary> Construct an TopicConnectionFactory given the server url </summary>
            <remarks> 
            <para>
            <b> Reconnect and Fault Tolerance </b>
            </para>
            <para> To enable reconnection behavior and fault tolerance, the 
            connection factory's server URL parameter must be a comma-separated 
            list of two or more URLs. To enable client reconnection in a situation 
            with only one server, you may supply two copies of that server's 
            URL (for example, tcp://localhost:7222,tcp://localhost:7222)
            </para>
            </remarks>
            <param name="serverUrls">The url to the server </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicConnectionFactory.#ctor(System.String,System.String)">
            <summary> Construct an TopicConnectionFactory given the server url and client id.</summary>
            <remarks> 
            <para>
            <b> Reconnect and Fault Tolerance </b>
            </para>
            <para> To enable reconnection behavior and fault tolerance, the 
            connection factory's server URL parameter must be a comma-separated 
            list of two or more URLs. To enable client reconnection in a situation 
            with only one server, you may supply two copies of that server's 
            URL (for example, tcp://localhost:7222,tcp://localhost:7222)
            </para>
            </remarks>
            <param name="serverUrls">The url to the server </param>
            <param name="clientId">The id to the client </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicConnectionFactory.#ctor(System.String,System.String,System.Collections.Hashtable)">
            <summary> Construct an TopicConnectionFactory given the server url, client id and
            properties </summary>
            <remarks> 
            <para>
            <b> Reconnect and Fault Tolerance </b>
            </para>
            <para> To enable reconnection behavior and fault tolerance, the 
            connection factory's server URL parameter must be a comma-separated 
            list of two or more URLs. To enable client reconnection in a situation 
            with only one server, you may supply two copies of that server's 
            URL (for example, tcp://localhost:7222,tcp://localhost:7222)
            </para>
            </remarks>
            <param name="serverUrls">The url to the server </param>
            <param name="clientId">The id to the client </param>
            <param name="properties">The properties for creating connection such as username and password </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicConnectionFactory.#ctor(TIBCO.EMS.TopicConnectionFactory)">
            <summary> Constructs a TIBCO.EMS.UFO TopicConnectionFactory
            object with the given TIBCO.EMS.TopicConnectionFactory object.
            
            </summary>
            <param name="factory">object of TIBCO.EMS.TopicConnectionFactory
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicConnectionFactory.Clone">
            <summary>
            Implementation of ICloneable.  Overrides the cloning process.
            </summary>
            <returns>A object that is a clone of this TopicConnectionFactory instance.
            </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicConnectionFactory.CreateTopicConnection">
            <summary> Create a topic connection object.  </summary>
            <remarks>The connection object presents a default user identity. If the 
            server configuration permits that user, then the call succeeds.</remarks>
            <returns>The newly created TopicConnection.</returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicConnectionFactory.CreateTopicConnection(System.String,System.String)">
            <summary> Create a topic connection object for a specific user.  </summary>
            <param name="userName">The username to use to create connection. </param>
            <param name="password">Authenticate the user identity with this password. </param>
            <returns>The newly created TopicConnection.</returns>
        </member>
        <member name="T:TIBCO.EMS.UFO.TopicPublisher">
            <summary>A client uses a TopicPublisher object to publish messages on a topic. 
            A TopicPublisher object is the publish-subscribe form of a message producer. 
            </summary>
            <remarks>
            <para>This class extends <see cref="T:TIBCO.EMS.UFO.MessageProducer">MessageProducer</see>.  
            It overloads more send methods, specializing the destination parameter to a queue.
            </para>
            <para> Normally, the Topic is specified when a TopicPublisher is created. 
              In this case, an attempt to use the publish methods for an unidentified 
              TopicPublisher will throw a UnsupportedOperationException. 
              </para>
              <para> If the TopicPublisher is created with an unidentified Topic, 
              an attempt to use the publish methods that assume that the Topic has
              been identified will throw a UnsupportedOperationException. 
            </para>
            <para>During the execution of its publish method, a message must
               not be changed by other threads within the client. If the message 
               is modified, the result of the publish is undefined. 
            </para>
            <para>After publishing a message, a client may retain and modify 
              it without affecting the message that has been published. 
              The same message object may be published multiple times. 
            </para>
            <para>The following message headers are set as part of publishing a message: 
              Destination, DeliveryMode, Expiration, Priority, MessageID 
              and TimeStamp. When the message is published, the values of 
              these headers are ignored. After completion of the publish, the
              headers hold the values specified by the method publishing the message.
              It is possible for the publish method to not set the 
            MessageID and TimeStamp if they are explicitly disabled by setting the 
            <see cref="P:TIBCO.EMS.UFO.MessageProducer.DisableMessageID">MessageProducer.DisableMessageID</see> or 
            <see cref="P:TIBCO.EMS.UFO.MessageProducer.DisableMessageTimestamp">MessageProducer.DisableMessageTimestamp</see> 
            property. 
            </para>
            <para>
            Creating a <see cref="T:TIBCO.EMS.UFO.MessageProducer">MessageProducer</see> 
            provides the same features as creating a TopicPublisher. 
            A <see cref="T:TIBCO.EMS.UFO.MessageProducer">MessageProducer</see> object is recommended when 
            creating new code. The TopicPublisher is provided to support existing code. 
            Because TopicPublisher inherits from <see cref="T:TIBCO.EMS.UFO.MessageProducer">MessageProducer</see>, 
            it inherits the 
            send methods that are a part of the <see cref="T:TIBCO.EMS.UFO.MessageProducer">MessageProducer</see> 
            interface. Using the send methods will have the same effect as using the 
            publish methods: they are functionally the same
            </para>
            </remarks>
            <b>Note: </b>
            This class is provided for backward compatibility to support older EMS clients programs. 
            New clients should use the <see cref="T:TIBCO.EMS.UFO.MessageProducer">MessageProducer</see> class instead.
            
        </member>
        <member name="P:TIBCO.EMS.UFO.TopicPublisher.Topic">
            <summary> Gets the topic associated with this TopicPublisher. </summary>
            <remarks>
            <para>Each send call directs a message to a topic.
            </para>
            <para>A client can use this property to define a default topic for messages that 
            this publisher sends. Individual sending calls can override this default value.
            </para>
            <para>A client sets this topic when creating the publisher, and cannot subsequently change it.
            </para>
            </remarks>
            <returns>this publisher's topic </returns>
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicPublisher.Publish(TIBCO.EMS.UFO.Message)">
            <summary> Publishes a message to the topic. Uses the 
            TopicPublisher's default delivery mode, priority, and time to live. </summary>
            <param name="message">The message to publish. </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicPublisher.Publish(TIBCO.EMS.UFO.Message,System.Int32,System.Int32,System.Int64)">
            <summary>Publishes a message to the topic, specifying delivery mode, 
            priority, and time to live. 
            </summary>
            <param name="message">The message to publish.</param>
            <param name="deliveryMode">The delivery mode to use.  This argument may be either an 
            enumerated value (see <see cref="T:TIBCO.EMS.MessageDeliveryMode">TIBCO.EMS.MessageDeliveryMode</see>) or an integer 
            (see <see cref="T:TIBCO.EMS.DeliveryMode">TIBCO.EMS.DeliveryMode</see>). We recommend enumerated values, because 
            they enable .NET to do stronger type checking at compile time, which can 
            enhance program reliability.
            </param>
            <param name="priority"><para>The priority for this message.
            </para>
            <para>Priority affects the order in which the server delivers messages to 
            consumers (higher values first). The JMS specification defines ten levels 
            of priority value, from zero (lowest priority) to 9 (highest priority). 
            The specification suggests that clients consider 0-4 as gradations of normal 
            priority, and priorities 5-9 as gradations of expedited priority.</para>
            </param>
            <param name="timeToLive"><para>The message's lifetime (in milliseconds) before it expires.
            </para>
            <list type="bullet">
            <item><description>If the time-to-live is non-zero, the expiration is the sum of that time-to-live 
            and the sending client's current time (GMT). This rule applies even within 
            sessions with transaction semantics - the timer begins with the send call, 
            not the commit call.
            </description></item>
            <item><description>If the time-to-live is zero, then expiration is also zero - indicating that 
            the message never expires.
            </description></item>
            </list>
            <para>
            Programs can use this property to define a default time-to-live for messages 
            that this producer sends. Individual sending calls can override this default value.
            </para>
            <para>Whenever your application uses non-zero values for message expiration or time-to-live, 
            you must ensure that clocks are synchronized among all the host computers that 
            send and receive messages. Synchronize clocks to a tolerance that is a very 
            small fraction of the smallest or time-to-live.
            </para>
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicPublisher.Publish(TIBCO.EMS.UFO.Message,TIBCO.EMS.MessageDeliveryMode,System.Int32,System.Int64)">
            <summary>Publishes a message to the topic, specifying delivery mode, 
            priority, and time to live. </summary>
            <param name="message">The message to publish.</param>
            <param name="deliveryMode">The delivery mode to use.  This argument may be either an 
            enumerated value (see <see cref="T:TIBCO.EMS.MessageDeliveryMode">TIBCO.EMS.MessageDeliveryMode</see>) or an integer 
            (see <see cref="T:TIBCO.EMS.DeliveryMode">TIBCO.EMS.DeliveryMode</see>). We recommend enumerated values, because 
            they enable .NET to do stronger type checking at compile time, which can 
            enhance program reliability.
            </param>
            <param name="priority"><para>The priority for this message.
            </para>
            <para>Priority affects the order in which the server delivers messages to 
            consumers (higher values first). The JMS specification defines ten levels 
            of priority value, from zero (lowest priority) to 9 (highest priority). 
            The specification suggests that clients consider 0-4 as gradations of normal 
            priority, and priorities 5-9 as gradations of expedited priority.</para>
            </param>
            <param name="timeToLive"><para>The message's lifetime (in milliseconds) before it expires.
            </para>
            <list type="bullet">
            <item><description>If the time-to-live is non-zero, the expiration is the sum of that time-to-live 
            and the sending client's current time (GMT). This rule applies even within 
            sessions with transaction semantics - the timer begins with the send call, 
            not the commit call.
            </description></item>
            <item><description>If the time-to-live is zero, then expiration is also zero - indicating that 
            the message never expires.
            </description></item>
            </list>
            <para>
            Programs can use this property to define a default time-to-live for messages 
            that this producer sends. Individual sending calls can override this default value.
            </para>
            <para>Whenever your application uses non-zero values for message expiration or time-to-live, 
            you must ensure that clocks are synchronized among all the host computers that 
            send and receive messages. Synchronize clocks to a tolerance that is a very 
            small fraction of the smallest or time-to-live.
            </para>
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicPublisher.Publish(TIBCO.EMS.UFO.Topic,TIBCO.EMS.UFO.Message)">
            <summary> 
            Publishes a message to a topic for an unidentified message producer. 
            Uses the TopicPublisher's default delivery mode, priority, and time to live. 
            </summary>
            <remarks>
            <para>
            Typically, a message producer is assigned a topic at creation time; however, 
             the TIBCO EME .NET API also supports unidentified message producers, 
            which require that the topic be supplied every time a message is published. 
            </para> </remarks>
            <param name="topic">The <see cref="T:TIBCO.EMS.UFO.Topic">Topic</see> to which this 
            message is to be published.</param>
            <param name="message">The message to publish.</param>
            
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicPublisher.Publish(TIBCO.EMS.UFO.Topic,TIBCO.EMS.UFO.Message,System.Int32,System.Int32,System.Int64)">
            <summary> Publishes a message to a topic for an unidentified message producer,
            specifying delivery mode, priority and time to live. </summary>
            <remarks>
            <para>
            Typically, a message producer is assigned a topic at creation time; however, 
             the TIBCO EME .NET API also supports unidentified message producers, 
            which require that the topic be supplied every time a message is published. 
            </para> </remarks>
            <param name="topic">The <see cref="T:TIBCO.EMS.UFO.Topic">Topic</see> to which this 
            message is to be published</param>
            <param name="message">The message to publish.</param>
            <param name="deliveryMode">The delivery mode to use.  This argument may be either an 
            enumerated value (see <see cref="T:TIBCO.EMS.MessageDeliveryMode">TIBCO.EMS.MessageDeliveryMode</see>) or an integer 
            (see <see cref="T:TIBCO.EMS.DeliveryMode">TIBCO.EMS.DeliveryMode</see>). We recommend enumerated values, because 
            they enable .NET to do stronger type checking at compile time, which can 
            enhance program reliability.
            </param>
            <param name="priority"><para>The priority for this message.
            </para>
            <para>Priority affects the order in which the server delivers messages to 
            consumers (higher values first). The JMS specification defines ten levels 
            of priority value, from zero (lowest priority) to 9 (highest priority). 
            The specification suggests that clients consider 0-4 as gradations of normal 
            priority, and priorities 5-9 as gradations of expedited priority.</para>
            </param>
            <param name="timeToLive"><para>The message's lifetime (in milliseconds) before it expires.
            </para>
            <list type="bullet">
            <item><description>If the time-to-live is non-zero, the expiration is the sum of that time-to-live 
            and the sending client's current time (GMT). This rule applies even within 
            sessions with transaction semantics - the timer begins with the send call, 
            not the commit call.
            </description></item>
            <item><description>If the time-to-live is zero, then expiration is also zero - indicating that 
            the message never expires.
            </description></item>
            </list>
            <para>
            Programs can use this property to define a default time-to-live for messages 
            that this producer sends. Individual sending calls can override this default value.
            </para>
            <para>Whenever your application uses non-zero values for message expiration or time-to-live, 
            you must ensure that clocks are synchronized among all the host computers that 
            send and receive messages. Synchronize clocks to a tolerance that is a very 
            small fraction of the smallest or time-to-live.
            </para>
            </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicPublisher.Publish(TIBCO.EMS.UFO.Topic,TIBCO.EMS.UFO.Message,TIBCO.EMS.MessageDeliveryMode,System.Int32,System.Int64)">
            <summary> Publishes a message to a topic for an unidentified message producer,
            specifying delivery mode, priority and time to live. </summary>
            <remarks>
            <para>
            Typically, a message producer is assigned a topic at creation time; however, 
             the TIBCO EME .NET API also supports unidentified message producers, 
            which require that the topic be supplied every time a message is published. 
            </para> </remarks>
            <param name="topic">The <see cref="T:TIBCO.EMS.UFO.Topic">Topic</see> to which this 
            message is to be published</param>
            <param name="message">The message to publish.</param>
            <param name="deliveryMode">The delivery mode to use.  This argument may be either an 
            enumerated value (see <see cref="T:TIBCO.EMS.MessageDeliveryMode">TIBCO.EMS.MessageDeliveryMode</see>) or an integer 
            (see <see cref="T:TIBCO.EMS.DeliveryMode">TIBCO.EMS.DeliveryMode</see>). We recommend enumerated values, because 
            they enable .NET to do stronger type checking at compile time, which can 
            enhance program reliability.
            </param>
            <param name="priority"><para>The priority for this message.
            </para>
            <para>Priority affects the order in which the server delivers messages to 
            consumers (higher values first). The JMS specification defines ten levels 
            of priority value, from zero (lowest priority) to 9 (highest priority). 
            The specification suggests that clients consider 0-4 as gradations of normal 
            priority, and priorities 5-9 as gradations of expedited priority.</para>
            </param>
            <param name="timeToLive"><para>The message's lifetime (in milliseconds) before it expires.
            </para>
            <list type="bullet">
            <item><description>If the time-to-live is non-zero, the expiration is the sum of that time-to-live 
            and the sending client's current time (GMT). This rule applies even within 
            sessions with transaction semantics - the timer begins with the send call, 
            not the commit call.
            </description></item>
            <item><description>If the time-to-live is zero, then expiration is also zero - indicating that 
            the message never expires.
            </description></item>
            </list>
            <para>
            Programs can use this property to define a default time-to-live for messages 
            that this producer sends. Individual sending calls can override this default value.
            </para>
            <para>Whenever your application uses non-zero values for message expiration or time-to-live, 
            you must ensure that clocks are synchronized among all the host computers that 
            send and receive messages. Synchronize clocks to a tolerance that is a very 
            small fraction of the smallest or time-to-live.
            </para>
            </param>
        </member>
        <member name="T:TIBCO.EMS.UFO.TopicSession">
            <summary>A TopicSession object provides methods for creating TopicPublisher, 
            TopicSubscriber.
            </summary>
            <remarks>
            <b>Note: </b>
            The TopicSession class is for backwards compatibility to support older clients.
            New clients should use the <see cref="T:TIBCO.EMS.UFO.Session">Session</see> class.
            
            <para> A TopicSession is used for creating Pub/Sub specific objects.
            In general, use the Session object, and use TopicSession only to support 
            existing code. Using the Session object simplifies the programming model 
            and allows transactions to be used across the two messaging domains
            </para>
            </remarks>
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicSession.CreateSubscriber(TIBCO.EMS.UFO.Topic)">
            <summary> Create a nondurable subscriber to the specified topic. </summary>
            <remarks>
            <para>
            A client uses a TopicSubscriber object to receive messages that have been 
            published to a topic. 
            </para>
            <para> Regular TopicSubscriber objects are not durable. They receive only 
            messages that are published while they are active. 
            </para>
            <para>In some cases, a connection may both publish and subscribe to a topic. 
            The subscriber NoLocal attribute allows a subscriber to inhibit 
            the delivery of messages published by its own connection.
            The default value for this attribute is false
            </para>
            <para> The TopicSubscriber object will be recreated during connection recovery process.
            </para>
            </remarks>
            <param name="topic">The Topic to subscribe to</param>
            <exception cref="T:TIBCO.EMS.InvalidDestinationException"> if an invalid topic is specified</exception>
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicSession.CreateSubscriber(TIBCO.EMS.UFO.Topic,System.String,System.Boolean)">
            <summary> Create a nondurable subscriber to the specified topic, using a
            message selector or specifying whether messages published by its own
            connection should be delivered to it. 
            </summary>
            <remarks>
            <para>
            A client uses a TopicSubscriber object to receive messages that have been published
             to a topic. 
            </para>
            <para>
            Regular TopicSubscriber objects are not durable. They receive only messages that 
            are published while they are active. 
            Messages filtered out by a subscriber's message selector will never be delivered 
            to the subscriber. From the subscriber's perspective, they do not exist. 
            </para>
            <para> In some cases, a connection may both publish and subscribe to a topic.
            The subscriber NoLocal attribute allows a subscriber to inhibit the delivery of 
            messages published by its own connection. The default value for this attribute is false. 
            </para>
            <para> The TopicSubscriber object will be recreated during connection recovery process.
            </para>
            </remarks>
            <param name="topic">the Topic to subscribe to</param>
            <param name="messageSelector">only messages with properties matching the 
            message selector expression are delivered. 
            A value of null or an empty string indicates that there is no 
            message selector for the message consumer.</param>
            <param name="noLocal">if set, inhibits the delivery of messages published by 
            its own connection </param>
        </member>
        <member name="M:TIBCO.EMS.UFO.TopicSession.CreatePublisher(TIBCO.EMS.UFO.Topic)">
            <summary>Create a publisher for the specified topic. </summary>
            <remarks>
            <para>
            A client uses a TopicPublisher object to publish messages on a topic. 
            Each time a client creates a TopicPublisher on a topic, it defines a 
            new sequence of messages that have no ordering relationship with the messages
            it has previously sent. 
            </para>
            <para> The TopicPublisher object will be recreated during connection recovery process.
            </para>
            </remarks>
            <param name="topic">the Topic to publish to, or null if this is an unidentified producer </param>
        </member>
        <member name="T:TIBCO.EMS.UFO.TopicSubscriber">
            <summary>A client uses a TopicSubscriber object to receive messages that 
            have been published to a topic. </summary>
            <remarks ref="true()">
              <para> 
            A TopicSubscriber object is the publish/subscribe form of a MessageConsumer. 
            The TopicSubscriber class inherits almost all of its behavior from MessageConsumer and adds 
            the properties, NoLocal and Topic.
            A MessageConsumer is created by Session.createConsumer. 
            
            </para><para>
            A TopicSession allows the creation of multiple TopicSubscriber 
            objects per topic. It will deliver each message for a topic to 
            each subscriber eligible to receive it. Each copy of the message is treated 
            as a completely separate message. Work done on one copy has no effect 
            on the others; acknowledging one does not acknowledge the others;
             one message may be delivered immediately, while another waits for its 
             subscriber to process messages ahead of it. </para>
             <para>Regular TopicSubscriber objects are not durable. They receive only
             messages that are published while they are active. 
             </para>
             <para>Messages filtered out by a subscriber's message selector will 
             never be delivered to the subscriber. From the subscriber's perspective,
             they do not exist. </para>
             <para>In some cases, a connection may both publish and subscribe to a topic.
             The subscriber NoLocal attribute allows a subscriber to inhibit the delivery
             of messages published by its own connection. 
             </para>
             <para>If a client needs to receive all the messages published on a topic, 
             including the ones published while the subscriber is inactive, 
             it uses a durable TopicSubscriber. The EMS Server retains a record of this 
             durable subscription and insures that all messages from the topic's publishers 
             are retained until they are acknowledged by this durable subscriber or they have expired. 
             </para>
             <para> Sessions with durable subscribers must always provide the same 
             client identifier. In addition, each client must specify a name that 
             uniquely identifies (within client identifier) each durable subscription 
             it creates. Only one session at a time can have a TopicSubscriber for 
             a particular durable subscription. 
             </para>
             <para> A client can change an existing durable subscription by creating 
             a durable TopicSubscriber with the same name and a new topic and/or 
             message selector. Changing a durable subscription is equivalent to
             unsubscribing (deleting) the old one and creating a new one. 
            </para>
            <para> The unsubscribe method is used to delete a durable subscription.
            The unsubscribe method can be used at the Session or TopicSession level. 
            This method deletes the state being maintained on behalf of the subscriber by its provider.
            </para>
            </remarks>
            <b>Note: </b>
            This class is provided for backward compatibility to support older EMS clients programs.
            New clients should use the <see cref="T:TIBCO.EMS.MessageConsumer">MessageConsumer</see> class instead.
            
        </member>
        <member name="P:TIBCO.EMS.UFO.TopicSubscriber.Topic">
            <summary> Gets the Topic associated with this subscriber </summary>
            <remarks><para>The subscriber consumes messages from this topic.</para>
            <para>Programs set this topic property when creating the subscriber and cannot 
            subsequently change it.</para>
            </remarks>
            <returns> this subscriber's Topic </returns>
        </member>
        <member name="P:TIBCO.EMS.UFO.TopicSubscriber.NoLocal">
            <summary> Gets the NoLocal attribute for this subscriber. </summary>
            <remarks>
            <para>When NoLocal is true, the subscriber does not receive messages sent through 
            the same server connection (that is, the connection associated with the subscriber).</para>
            <para>Programs set this property when creating the subscriber, and cannot subsequently 
            change it.</para>
            </remarks>
            <returns> true if locally published messages are being inhibited </returns>
        </member>
        <member name="F:TIBCO.EMS.UFO.Utilities.MILLIS_TICKS_CONVERSION">
            <summary>The conversion between milliseconds and DateTime.Ticks
            which is in units of 100-nanoseconds. 1 msec = 10000 ticks </summary>
        </member>
        <member name="F:TIBCO.EMS.UFO.Utilities.SHIFT_TIME">
            <summary>The ticks time that needed to be shifted to convert
            between in milliseconds time of c/java approach (elapsed 
            since 00:00:00 January 1, 1970 and that of .NET (elapsed 
            since 00:00:00 January 1, 0001. 
            Add this value when converting from c/java to .NET, and substract
            otherwise. </summary>
        </member>
        <member name="M:TIBCO.EMS.UFO.Utilities.GetCurrentTimeInMillis">
            <summary>Get the current time in milliseconds since 
            coordinated universal time (UTC) 12:00 am, January 1, 
            1970.</summary>
            <remarks>This .NET DateTime class takes reference on 
            12:00am, January 1, 0001.  But both java and c takes
            12:00am, January 1, 1970.  The time information
            in the message has to be consistent in order for
            heterogenous clients to co-operate.  This function
            thus performs the conversion so that the milliseconds
            since 12:00am, January 1, 1970 is returned.
            </remarks>
            <returns> current time in millisecondes </returns>
        </member>
    </members>
</doc>
